{"pageProps":{"post":{"content":"<p>どうもこんにちは.</p>\n<p>前回(<a href=\"http://agtn.hatenablog.com/entry/2015/07/21/234658\">HaskellのConcurrentについて調べてまとめる (IORef編) - プログラミングのメモ帳➚</a>)の続きです.</p>\n<p>今回はスレッド間協調のために<code>MVar</code>を使う方法について調べたので, まとめたいと思います.</p>\n<h2>MVar</h2>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>にかかわらず, 最近の並行処理はメッセージパッシングでやれみたいなのが流行ってますね (<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Scala\">Scala</a>のAkkaや<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/golang\">golang</a>のchanなど).<br/>\n<code>MVar</code>は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>における, 容量1のメッセージボックスのようなものです. <code>MVar</code>を使うことで, スレッド間でメッセージのやり取りを協調的に行うことができます.<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>のスレッドが１つの<code>MVar</code>に対して, メッセージを入れたり取り出したりすることでスレッド間協調を行います.</p>\n<p>基本となる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>はこのような感じ</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>newEmptyMVar :: IO (MVar a)\nnewMVar :: a -&gt; IO (MVar a)\ntakeMVar :: MVar a -&gt; IO a\nputMVar :: MVar a -&gt; a -&gt; IO ()\nreadMVar :: MVar a -&gt; IO a</pre>\n<p>型を見ればなんとなく使い方もわかる気がしますね.<br/>\n<code>MVar</code>を作るには<code>newEmptyMVar</code>か<code>newMVar</code>を使用します. <code>newEmptyMVar</code>は空のメッセージボックスを作り, <code>newMVar</code>は第一引数を初期値としてもつメッセージボックスを作ります.</p>\n<p><code>MVar</code>にメッセージを格納するには, <code>putMVar</code>を使います. <code>putMVar mvar msg</code> で, <code>msg</code>を<code>mvar</code>に格納します.<br/>\nこの際, もし<code>MVar</code>にすでにメッセージが格納されている場合, <code>MVar</code>は容量1のボックスなので, <code>putMVar</code>がブロックされます. 他のスレッドが<code>MVar</code>からメッセージを取り出して空にするまで待ってから, メッセージを格納します.</p>\n<p>一方, <code>MVar</code>からメッセージを読み取るには, <code>takeMVar</code>か<code>readMVar</code>を使用します.<br/>\n<code>takeMVar</code>はメッセージを読み取り, その<code>MVar</code>を空にします. <code>readMVar</code>はメッセージを読み取りますが, <code>MVar</code>の中のメッセージはそのまま残します.<br/>\nここで, <code>put</code>の時と同様に, <code>takeMVar</code>も<code>readMVar</code>も<code>MVar</code>にメッセージが格納されていなかった場合, 他のスレッドが<code>MVar</code>にメッセージを格納するまでブロックします.</p>\n<p>というわけで簡単なサンプルコード</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>module Main where\n\nimport Control.Concurrent (forkIO, threadDelay)\nimport Control.Concurrent.MVar\n\nmain :: IO ()\nmain = do\n    mvar &lt;- newEmptyMVar\n    forkIO $ do\n        msg &lt;- takeMVar mvar\n        putStrLn $ &#34;recv: &#34; ++ msg\n        threadDelay $ 1 * 10 ^ 6\n        putMVar mvar &#34;B&#34;\n    putStrLn &#34;sleep 1&#34;\n    threadDelay $ 1 * 10 ^ 6\n    putStrLn &#34;wake up&#34;\n    putMVar mvar &#34;A&#34;\n    takeMVar mvar &gt;&gt;= print</pre>\n<p>実行結果</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>sleep 1\nwake up\nrecv: A\n&#34;B&#34;</pre>\n<p>確かにメッセージが格納されるまで <code>takeMVar</code>がブロックしていることがわかります</p>\n<h2>共有変数としてのMVar</h2>\n<p>さて, <code>MVar</code>にはもうひとつの使い方があります. 共有変数としての<code>MVar</code>です.</p>\n<p><code>MVar</code>の特徴として, 誰かが<code>take</code>してから<code>put</code>するまでの間は, 他のスレッドはだれも<code>MVar</code>の中身に触れないという点が挙げられます.</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>main = do\n    mvar &lt;- newMVar 0\n    forkIO $ do\n        val &lt;- takeMVar mvar\n        -- 他のスレッドはMVarの中身に触れない\n        putMVar mvar $ val + 1\n    ...</pre>\n<p>この特徴はまさにロックの特徴といえます. ロックを取得し解放するまでは, 他のスレッドは同じロックで保護された区間にははいれません.<br/>\nというわけで<code>MVar</code>は型レベルでロックがついた共有変数とみなすことができますね！(このへんはRustのMutexに似た空気を感じます. どちらも型レベルでロックとそれが保護する中身がつながっています)<br/>\n型レベルでロックがくっついているので, 中身にアクセスするには必ずロックをとる(<code>takeMVar</code>)必要があり, ロックの取得忘れがありません.</p>\n<p>さらに, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>は基本的に破壊的操作があまり登場しない言語であることもこの<code>MVar</code>ロックにプラスに働きます.</p>\n<p>例えば, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CF%A2%C1%DB%C7%DB%CE%F3\">連想配列</a>をスレッド間で共有することを考えます. また, ここでは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CF%A2%C1%DB%C7%DB%CE%F3\">連想配列</a>の実装として, hashtableではなく<code>Data.Map</code>を使用するとします(<code>Data.Map</code>はimmutableな構造になっていて, lookupはO(log n)ですが, immutableなので<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>上で扱いやすいというメリットがあります).</p>\n<p><code>Data.Map</code>はimmutableなので, 一度<code>MVar</code>から取得してしまえばそれ以降変更される可能性もないため, ロックを保持し続ける必要がありません. そこで, 単なる読み込みの場合は, <code>takeMVar</code>してすぐに<code>putMVar</code>で戻すだとか, <code>readMVar</code>で読み込むだけにすることで, ロックの粒度を小さくできます.<br/>\n<code>MVar</code>の中身を書き換えたい場合は, 単純にロックを取得し, 書き換え後の値を<code>putMVar</code>します.</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>module Main where\n\nimport Control.Concurrent (forkIO, threadDelay)\nimport Control.Concurrent.MVar\nimport qualified Data.Map.Strict as M\n\nmain :: IO ()\nmain = do\n    mvar &lt;- newMVar M.empty\n    forkIO $ do\n        table &lt;- takeMVar mvar\n        putMVar mvar table\n        -- tableを使用する操作\n    forkIO $ do\n         table &lt;- readMVar mvar\n         -- tableを使用する操作\n    forkIO $ do\n        table &lt;- takeMVar mvar\n        -- tableを変更する操作\n        let newTable = ...\n        putMVar mvar newTable</pre>\n<p>このように<code>MVar</code>とimmutableなデータ構造を組み合わせることで, 粒度の小さいロックを実現することができます.<br/>\n一方, <code>MVar</code>とmutableなデータ構造(<code>IORef</code>など)を組み合わせる場合は, たとえ読み込みしかしない場合であっても操作が終わるまではロックを保持しておく必要があることに注意しなければなりません (<code>IORef</code>には前回紹介したように<code>atomicModifyIORef</code>があるのでなかなかこういう状況は起こりませんね)</p>\n<p>また, RustのMutexと違い, <code>MVar</code>によるロックの模倣(?)はロックの解放を自動的には行いません. したがって例外が送出された場合にロックを開放し忘れるケースがあるので, 注意が必要です.</p>\n<h2>一旦まとめ</h2>\n<p>というわけで今回は<code>MVar</code>について紹介しました. <code>MVar</code>でロックを実現する方に関しては, 散々言われているロックの問題点をそのまま持ってきてしまうのであまり使えないかもしれませんね...<br/>\n<code>MVar</code>は容量1のメッセージボックスでしたが, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>には<code>Chan</code>というものもあります. こちらは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/golang\">golang</a>のchanにかなり近いもので, 容量の制限がないキューのように働かせることができます. <code>Chan</code>のよみとり専用のスレッドを１つ立てておき, 他の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>のスレッドがタスクを<code>Chan</code>に書き込んでいくといった<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B9%A5%B1%A1%BC%A5%B9\">ユースケース</a>が考えられますね. こっちのほうが便利そうな気がしてきました.</p>\n<p>ロックはいろいろ厄介で, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%C3%A5%C9%A5%ED%A5%C3%A5%AF\">デッドロック</a>とか解放忘れとかの問題がついて回ります. それを解決する１つの方法として<code>STM</code>があるようなので, 次はそれについて調べてみようと思います.</p>\n<hr>\n<hr>\n","meta":{"rawMarkdown":"---\ntitle: \"HaskellのConcurrentについて調べてまとめる (MVar編)\"\ndate: 2015-07-22T01:21:48.000Z\ntags: []\n---\n\n<p>どうもこんにちは.</p>\n\n<p>前回(<a href=\"http://agtn.hatenablog.com/entry/2015/07/21/234658\">HaskellのConcurrentについて調べてまとめる (IORef編) - プログラミングのメモ帳➚</a>)の続きです.</p>\n\n<p>今回はスレッド間協調のために<code>MVar</code>を使う方法について調べたので, まとめたいと思います.</p>\n\n<h2>MVar</h2>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>にかかわらず, 最近の並行処理はメッセージパッシングでやれみたいなのが流行ってますね (<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Scala\">Scala</a>のAkkaや<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/golang\">golang</a>のchanなど).<br/>\n<code>MVar</code>は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>における, 容量1のメッセージボックスのようなものです. <code>MVar</code>を使うことで, スレッド間でメッセージのやり取りを協調的に行うことができます.<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>のスレッドが１つの<code>MVar</code>に対して, メッセージを入れたり取り出したりすることでスレッド間協調を行います.</p>\n\n<p>基本となる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>はこのような感じ</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>newEmptyMVar :: IO (MVar a)\nnewMVar :: a -&gt; IO (MVar a)\ntakeMVar :: MVar a -&gt; IO a\nputMVar :: MVar a -&gt; a -&gt; IO ()\nreadMVar :: MVar a -&gt; IO a</pre>\n\n<p>型を見ればなんとなく使い方もわかる気がしますね.<br/>\n<code>MVar</code>を作るには<code>newEmptyMVar</code>か<code>newMVar</code>を使用します. <code>newEmptyMVar</code>は空のメッセージボックスを作り, <code>newMVar</code>は第一引数を初期値としてもつメッセージボックスを作ります.</p>\n\n<p><code>MVar</code>にメッセージを格納するには, <code>putMVar</code>を使います. <code>putMVar mvar msg</code> で, <code>msg</code>を<code>mvar</code>に格納します.<br/>\nこの際, もし<code>MVar</code>にすでにメッセージが格納されている場合, <code>MVar</code>は容量1のボックスなので, <code>putMVar</code>がブロックされます. 他のスレッドが<code>MVar</code>からメッセージを取り出して空にするまで待ってから, メッセージを格納します.</p>\n\n<p>一方, <code>MVar</code>からメッセージを読み取るには, <code>takeMVar</code>か<code>readMVar</code>を使用します.<br/>\n<code>takeMVar</code>はメッセージを読み取り, その<code>MVar</code>を空にします. <code>readMVar</code>はメッセージを読み取りますが, <code>MVar</code>の中のメッセージはそのまま残します.<br/>\nここで, <code>put</code>の時と同様に, <code>takeMVar</code>も<code>readMVar</code>も<code>MVar</code>にメッセージが格納されていなかった場合, 他のスレッドが<code>MVar</code>にメッセージを格納するまでブロックします.</p>\n\n<p>というわけで簡単なサンプルコード</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>module Main where\n\nimport Control.Concurrent (forkIO, threadDelay)\nimport Control.Concurrent.MVar\n\nmain :: IO ()\nmain = do\n    mvar &lt;- newEmptyMVar\n    forkIO $ do\n        msg &lt;- takeMVar mvar\n        putStrLn $ &#34;recv: &#34; ++ msg\n        threadDelay $ 1 * 10 ^ 6\n        putMVar mvar &#34;B&#34;\n    putStrLn &#34;sleep 1&#34;\n    threadDelay $ 1 * 10 ^ 6\n    putStrLn &#34;wake up&#34;\n    putMVar mvar &#34;A&#34;\n    takeMVar mvar &gt;&gt;= print</pre>\n\n<p>実行結果</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>sleep 1\nwake up\nrecv: A\n&#34;B&#34;</pre>\n\n<p>確かにメッセージが格納されるまで <code>takeMVar</code>がブロックしていることがわかります</p>\n\n<h2>共有変数としてのMVar</h2>\n\n<p>さて, <code>MVar</code>にはもうひとつの使い方があります. 共有変数としての<code>MVar</code>です.</p>\n\n<p><code>MVar</code>の特徴として, 誰かが<code>take</code>してから<code>put</code>するまでの間は, 他のスレッドはだれも<code>MVar</code>の中身に触れないという点が挙げられます.</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>main = do\n    mvar &lt;- newMVar 0\n    forkIO $ do\n        val &lt;- takeMVar mvar\n        -- 他のスレッドはMVarの中身に触れない\n        putMVar mvar $ val + 1\n    ...</pre>\n\n<p>この特徴はまさにロックの特徴といえます. ロックを取得し解放するまでは, 他のスレッドは同じロックで保護された区間にははいれません.<br/>\nというわけで<code>MVar</code>は型レベルでロックがついた共有変数とみなすことができますね！(このへんはRustのMutexに似た空気を感じます. どちらも型レベルでロックとそれが保護する中身がつながっています)<br/>\n型レベルでロックがくっついているので, 中身にアクセスするには必ずロックをとる(<code>takeMVar</code>)必要があり, ロックの取得忘れがありません.</p>\n\n<p>さらに, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>は基本的に破壊的操作があまり登場しない言語であることもこの<code>MVar</code>ロックにプラスに働きます.</p>\n\n<p>例えば, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CF%A2%C1%DB%C7%DB%CE%F3\">連想配列</a>をスレッド間で共有することを考えます. また, ここでは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CF%A2%C1%DB%C7%DB%CE%F3\">連想配列</a>の実装として, hashtableではなく<code>Data.Map</code>を使用するとします(<code>Data.Map</code>はimmutableな構造になっていて, lookupはO(log n)ですが, immutableなので<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>上で扱いやすいというメリットがあります).</p>\n\n<p><code>Data.Map</code>はimmutableなので, 一度<code>MVar</code>から取得してしまえばそれ以降変更される可能性もないため, ロックを保持し続ける必要がありません. そこで, 単なる読み込みの場合は, <code>takeMVar</code>してすぐに<code>putMVar</code>で戻すだとか, <code>readMVar</code>で読み込むだけにすることで, ロックの粒度を小さくできます.<br/>\n<code>MVar</code>の中身を書き換えたい場合は, 単純にロックを取得し, 書き換え後の値を<code>putMVar</code>します.</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>module Main where\n\nimport Control.Concurrent (forkIO, threadDelay)\nimport Control.Concurrent.MVar\nimport qualified Data.Map.Strict as M\n\nmain :: IO ()\nmain = do\n    mvar &lt;- newMVar M.empty\n    forkIO $ do\n        table &lt;- takeMVar mvar\n        putMVar mvar table\n        -- tableを使用する操作\n    forkIO $ do\n         table &lt;- readMVar mvar\n         -- tableを使用する操作\n    forkIO $ do\n        table &lt;- takeMVar mvar\n        -- tableを変更する操作\n        let newTable = ...\n        putMVar mvar newTable</pre>\n\n<p>このように<code>MVar</code>とimmutableなデータ構造を組み合わせることで, 粒度の小さいロックを実現することができます.<br/>\n一方, <code>MVar</code>とmutableなデータ構造(<code>IORef</code>など)を組み合わせる場合は, たとえ読み込みしかしない場合であっても操作が終わるまではロックを保持しておく必要があることに注意しなければなりません (<code>IORef</code>には前回紹介したように<code>atomicModifyIORef</code>があるのでなかなかこういう状況は起こりませんね)</p>\n\n<p>また, RustのMutexと違い, <code>MVar</code>によるロックの模倣(?)はロックの解放を自動的には行いません. したがって例外が送出された場合にロックを開放し忘れるケースがあるので, 注意が必要です.</p>\n\n<h2>一旦まとめ</h2>\n\n<p>というわけで今回は<code>MVar</code>について紹介しました. <code>MVar</code>でロックを実現する方に関しては, 散々言われているロックの問題点をそのまま持ってきてしまうのであまり使えないかもしれませんね...<br/>\n<code>MVar</code>は容量1のメッセージボックスでしたが, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>には<code>Chan</code>というものもあります. こちらは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/golang\">golang</a>のchanにかなり近いもので, 容量の制限がないキューのように働かせることができます. <code>Chan</code>のよみとり専用のスレッドを１つ立てておき, 他の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>のスレッドがタスクを<code>Chan</code>に書き込んでいくといった<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B9%A5%B1%A1%BC%A5%B9\">ユースケース</a>が考えられますね. こっちのほうが便利そうな気がしてきました.</p>\n\n<p>ロックはいろいろ厄介で, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%C3%A5%C9%A5%ED%A5%C3%A5%AF\">デッドロック</a>とか解放忘れとかの問題がついて回ります. それを解決する１つの方法として<code>STM</code>があるようなので, 次はそれについて調べてみようと思います.</p>\n\n---\n\n---\n","contentMarkdown":"\n<p>どうもこんにちは.</p>\n\n<p>前回(<a href=\"http://agtn.hatenablog.com/entry/2015/07/21/234658\">HaskellのConcurrentについて調べてまとめる (IORef編) - プログラミングのメモ帳➚</a>)の続きです.</p>\n\n<p>今回はスレッド間協調のために<code>MVar</code>を使う方法について調べたので, まとめたいと思います.</p>\n\n<h2>MVar</h2>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>にかかわらず, 最近の並行処理はメッセージパッシングでやれみたいなのが流行ってますね (<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Scala\">Scala</a>のAkkaや<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/golang\">golang</a>のchanなど).<br/>\n<code>MVar</code>は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>における, 容量1のメッセージボックスのようなものです. <code>MVar</code>を使うことで, スレッド間でメッセージのやり取りを協調的に行うことができます.<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>のスレッドが１つの<code>MVar</code>に対して, メッセージを入れたり取り出したりすることでスレッド間協調を行います.</p>\n\n<p>基本となる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>はこのような感じ</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>newEmptyMVar :: IO (MVar a)\nnewMVar :: a -&gt; IO (MVar a)\ntakeMVar :: MVar a -&gt; IO a\nputMVar :: MVar a -&gt; a -&gt; IO ()\nreadMVar :: MVar a -&gt; IO a</pre>\n\n<p>型を見ればなんとなく使い方もわかる気がしますね.<br/>\n<code>MVar</code>を作るには<code>newEmptyMVar</code>か<code>newMVar</code>を使用します. <code>newEmptyMVar</code>は空のメッセージボックスを作り, <code>newMVar</code>は第一引数を初期値としてもつメッセージボックスを作ります.</p>\n\n<p><code>MVar</code>にメッセージを格納するには, <code>putMVar</code>を使います. <code>putMVar mvar msg</code> で, <code>msg</code>を<code>mvar</code>に格納します.<br/>\nこの際, もし<code>MVar</code>にすでにメッセージが格納されている場合, <code>MVar</code>は容量1のボックスなので, <code>putMVar</code>がブロックされます. 他のスレッドが<code>MVar</code>からメッセージを取り出して空にするまで待ってから, メッセージを格納します.</p>\n\n<p>一方, <code>MVar</code>からメッセージを読み取るには, <code>takeMVar</code>か<code>readMVar</code>を使用します.<br/>\n<code>takeMVar</code>はメッセージを読み取り, その<code>MVar</code>を空にします. <code>readMVar</code>はメッセージを読み取りますが, <code>MVar</code>の中のメッセージはそのまま残します.<br/>\nここで, <code>put</code>の時と同様に, <code>takeMVar</code>も<code>readMVar</code>も<code>MVar</code>にメッセージが格納されていなかった場合, 他のスレッドが<code>MVar</code>にメッセージを格納するまでブロックします.</p>\n\n<p>というわけで簡単なサンプルコード</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>module Main where\n\nimport Control.Concurrent (forkIO, threadDelay)\nimport Control.Concurrent.MVar\n\nmain :: IO ()\nmain = do\n    mvar &lt;- newEmptyMVar\n    forkIO $ do\n        msg &lt;- takeMVar mvar\n        putStrLn $ &#34;recv: &#34; ++ msg\n        threadDelay $ 1 * 10 ^ 6\n        putMVar mvar &#34;B&#34;\n    putStrLn &#34;sleep 1&#34;\n    threadDelay $ 1 * 10 ^ 6\n    putStrLn &#34;wake up&#34;\n    putMVar mvar &#34;A&#34;\n    takeMVar mvar &gt;&gt;= print</pre>\n\n<p>実行結果</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>sleep 1\nwake up\nrecv: A\n&#34;B&#34;</pre>\n\n<p>確かにメッセージが格納されるまで <code>takeMVar</code>がブロックしていることがわかります</p>\n\n<h2>共有変数としてのMVar</h2>\n\n<p>さて, <code>MVar</code>にはもうひとつの使い方があります. 共有変数としての<code>MVar</code>です.</p>\n\n<p><code>MVar</code>の特徴として, 誰かが<code>take</code>してから<code>put</code>するまでの間は, 他のスレッドはだれも<code>MVar</code>の中身に触れないという点が挙げられます.</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>main = do\n    mvar &lt;- newMVar 0\n    forkIO $ do\n        val &lt;- takeMVar mvar\n        -- 他のスレッドはMVarの中身に触れない\n        putMVar mvar $ val + 1\n    ...</pre>\n\n<p>この特徴はまさにロックの特徴といえます. ロックを取得し解放するまでは, 他のスレッドは同じロックで保護された区間にははいれません.<br/>\nというわけで<code>MVar</code>は型レベルでロックがついた共有変数とみなすことができますね！(このへんはRustのMutexに似た空気を感じます. どちらも型レベルでロックとそれが保護する中身がつながっています)<br/>\n型レベルでロックがくっついているので, 中身にアクセスするには必ずロックをとる(<code>takeMVar</code>)必要があり, ロックの取得忘れがありません.</p>\n\n<p>さらに, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>は基本的に破壊的操作があまり登場しない言語であることもこの<code>MVar</code>ロックにプラスに働きます.</p>\n\n<p>例えば, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CF%A2%C1%DB%C7%DB%CE%F3\">連想配列</a>をスレッド間で共有することを考えます. また, ここでは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CF%A2%C1%DB%C7%DB%CE%F3\">連想配列</a>の実装として, hashtableではなく<code>Data.Map</code>を使用するとします(<code>Data.Map</code>はimmutableな構造になっていて, lookupはO(log n)ですが, immutableなので<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>上で扱いやすいというメリットがあります).</p>\n\n<p><code>Data.Map</code>はimmutableなので, 一度<code>MVar</code>から取得してしまえばそれ以降変更される可能性もないため, ロックを保持し続ける必要がありません. そこで, 単なる読み込みの場合は, <code>takeMVar</code>してすぐに<code>putMVar</code>で戻すだとか, <code>readMVar</code>で読み込むだけにすることで, ロックの粒度を小さくできます.<br/>\n<code>MVar</code>の中身を書き換えたい場合は, 単純にロックを取得し, 書き換え後の値を<code>putMVar</code>します.</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>module Main where\n\nimport Control.Concurrent (forkIO, threadDelay)\nimport Control.Concurrent.MVar\nimport qualified Data.Map.Strict as M\n\nmain :: IO ()\nmain = do\n    mvar &lt;- newMVar M.empty\n    forkIO $ do\n        table &lt;- takeMVar mvar\n        putMVar mvar table\n        -- tableを使用する操作\n    forkIO $ do\n         table &lt;- readMVar mvar\n         -- tableを使用する操作\n    forkIO $ do\n        table &lt;- takeMVar mvar\n        -- tableを変更する操作\n        let newTable = ...\n        putMVar mvar newTable</pre>\n\n<p>このように<code>MVar</code>とimmutableなデータ構造を組み合わせることで, 粒度の小さいロックを実現することができます.<br/>\n一方, <code>MVar</code>とmutableなデータ構造(<code>IORef</code>など)を組み合わせる場合は, たとえ読み込みしかしない場合であっても操作が終わるまではロックを保持しておく必要があることに注意しなければなりません (<code>IORef</code>には前回紹介したように<code>atomicModifyIORef</code>があるのでなかなかこういう状況は起こりませんね)</p>\n\n<p>また, RustのMutexと違い, <code>MVar</code>によるロックの模倣(?)はロックの解放を自動的には行いません. したがって例外が送出された場合にロックを開放し忘れるケースがあるので, 注意が必要です.</p>\n\n<h2>一旦まとめ</h2>\n\n<p>というわけで今回は<code>MVar</code>について紹介しました. <code>MVar</code>でロックを実現する方に関しては, 散々言われているロックの問題点をそのまま持ってきてしまうのであまり使えないかもしれませんね...<br/>\n<code>MVar</code>は容量1のメッセージボックスでしたが, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>には<code>Chan</code>というものもあります. こちらは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/golang\">golang</a>のchanにかなり近いもので, 容量の制限がないキューのように働かせることができます. <code>Chan</code>のよみとり専用のスレッドを１つ立てておき, 他の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>のスレッドがタスクを<code>Chan</code>に書き込んでいくといった<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B9%A5%B1%A1%BC%A5%B9\">ユースケース</a>が考えられますね. こっちのほうが便利そうな気がしてきました.</p>\n\n<p>ロックはいろいろ厄介で, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%C3%A5%C9%A5%ED%A5%C3%A5%AF\">デッドロック</a>とか解放忘れとかの問題がついて回ります. それを解決する１つの方法として<code>STM</code>があるようなので, 次はそれについて調べてみようと思います.</p>\n\n---\n\n---\n","slug":"HaskellのConcurrentについて調べてまとめる_(MVar編)","title":"HaskellのConcurrentについて調べてまとめる (MVar編)","timestamp":1437528108000,"tags":[]}}},"__N_SSG":true}