{"pageProps":{"post":{"content":"<ul>\n<li><code>if</code> 文が値を返す</li>\n<li><code>return</code> 文を持つ</li>\n</ul>\n<p>以上のような特徴を持つ言語はどういう感じで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>されるのか知りたくて，Rust について調べてみました．</p>\n<p>Rust では以下の様なことが出来ます．</p>\n<pre class=\"code lang-rust\" data-lang=\"rust\" data-unlink><span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">f</span>() {\n  <span class=\"synStatement\">let</span> x = <span class=\"synStatement\">if</span> cond {\n    return None;\n  } <span class=\"synStatement\">else</span> {\n    <span class=\"synConstant\">1</span>\n  };\n  ...\n}\n</pre>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Scala\">Scala</a> とかもできると思います．<code>cond</code> が真だった場合は，<code>x</code> の値を返すのではなく，関数から抜けてしまうという意味です．</p>\n<p>これを Rust ではどんな <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/LLVM\">LLVM</a> IR に落とし込んでいるのか．</p>\n<h1><code>return</code> 文がない場合</h1>\n<pre class=\"code lang-rust\" data-lang=\"rust\" data-unlink><span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">noreturn</span>(x: isize) -&gt; isize {\n  x\n}\n</pre>\n<p>最も単純な場合です．この場合，生成される <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/LLVM\">LLVM</a> IR は，</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>define internal i64 @_ZN4hoge8noreturn17h811bf1a871f85432E(i64) unnamed_addr #0 {\nentry-block:\n  %x = alloca i64\n  store i64 %0, i64* %x\n  %1 = load i64, i64* %x\n  ret i64 %1\n}</pre>\n<p>となります．\n名前がマングルされていますが，上記の <code>noreturn</code> 関数です．\nやっていることは単純で，第一引数を読み込んで返すだけです．</p>\n<h1><code>return</code> に相当する文が一つのみの場合</h1>\n<pre class=\"code lang-rust\" data-lang=\"rust\" data-unlink><span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">onereturn</span>(x: isize) -&gt; isize {\n  <span class=\"synStatement\">let</span> y = <span class=\"synStatement\">if</span> x == <span class=\"synConstant\">0</span> {\n    <span class=\"synConstant\">1</span>\n  } <span class=\"synStatement\">else</span> {\n    x\n  };\n  return x;\n}\n</pre>\n<p>実際に値を返す部分が一箇所しかない場合です．途中に分岐があっても最終的に一箇所になっていれば多分同じ結果になります．</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>define internal i64 @_ZN4hoge9onereturn17h8b718f32daa6a379E(i64) unnamed_addr #0 {\nentry-block:\n  %x = alloca i64\n  %y = alloca i64\n  store i64 %0, i64* %x\n  %1 = load i64, i64* %x\n  %2 = icmp eq i64 %1, 0\n  br i1 %2, label %then-block-18-, label %else-block\n\nthen-block-18-:                                   ; preds = %entry-block\n  store i64 1, i64* %y\n  br label %join\n\nelse-block:                                       ; preds = %entry-block\n  %3 = load i64, i64* %x\n  store i64 %3, i64* %y\n  br label %join\n\njoin:                                             ; preds = %else-block, %then-block-18-\n  %4 = load i64, i64* %x\n  br label %clean_ast_10_\n\nreturn:                                           ; preds = %clean_ast_10_\n  ret i64 %4\n\nclean_ast_10_:                                    ; preds = %join\n  br label %return\n}</pre>\n<p><code>return</code> という BasicBlock ができています．これは <code>return</code> 文が現れると作られるよう？です．\nで，その中では単純に <code>x</code> に該当する値を返しています．</p>\n<p>最後の <code>return x;</code> 文を 単純に <code>x</code> に置き換えてみると，</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>define internal i64 @_ZN4hoge9onereturn17h8b718f32daa6a379E(i64) unnamed_addr #0 {\nentry-block:\n  %x = alloca i64\n  %y = alloca i64\n  store i64 %0, i64* %x\n  %1 = load i64, i64* %x\n  %2 = icmp eq i64 %1, 0\n  br i1 %2, label %then-block-18-, label %else-block\n\nthen-block-18-:                                   ; preds = %entry-block\n  store i64 1, i64* %y\n  br label %join\n\nelse-block:                                       ; preds = %entry-block\n  %3 = load i64, i64* %x\n  store i64 %3, i64* %y\n  br label %join\n\njoin:                                             ; preds = %else-block, %then-block-18-\n  %4 = load i64, i64* %x\n  ret i64 %4\n}</pre>\n<p>となります． <code>return</code> ブロックが消えていますね．なので <code>return</code> 文があると <code>return</code> ブロックが作られる、で良さそう？</p>\n<h1><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>のパスから値を返す</h1>\n<pre class=\"code lang-rust\" data-lang=\"rust\" data-unlink><span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">multireturn</span>(x: isize) -&gt; isize {\n  <span class=\"synStatement\">let</span> y = <span class=\"synStatement\">if</span> x == <span class=\"synConstant\">0</span> {\n    return -<span class=\"synConstant\">1</span>;\n  } <span class=\"synStatement\">else</span> {\n    x\n  };\n  y\n}\n</pre>\n<p>さて，では最初に述べた，<code>if</code> の分岐内にある <code>return</code> についてです．\nこれは，</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>define internal i64 @_ZN4hoge11multireturn17had379e8ce5a18f08E(i64) unnamed_addr #0 {\nentry-block:\n  %sret_slot = alloca i64\n  %x = alloca i64\n  %y = alloca i64\n  store i64 %0, i64* %x\n  %1 = load i64, i64* %x\n  %2 = icmp eq i64 %1, 0\n  br i1 %2, label %then-block-18-, label %else-block\n\nthen-block-18-:                                   ; preds = %entry-block\n  store i64 -1, i64* %sret_slot\n  br label %return\n\nelse-block:                                       ; preds = %entry-block\n  %3 = load i64, i64* %x\n  store i64 %3, i64* %y\n  br label %join\n\njoin:                                             ; preds = %else-block\n  %4 = load i64, i64* %y\n  store i64 %4, i64* %sret_slot\n  br label %return\n\nreturn:                                           ; preds = %join, %then-block-18-\n  %5 = load i64, i64* %sret_slot\n  ret i64 %5\n}</pre>\n<p>こうなりました．\nまず，<code>return</code> 文があるため？，<code>return</code> ブロックが作られています．\nしかし今回は，パスによって返すものが違います．(値が違うという意味ではなく，同じ変数ですらないという意味です...)</p>\n<p>よく IR を読むと，関数の頭で <code>%sret_slot</code> という名前でスタック領域を確保していることがわかります．\nそして，<code>return</code> ブロック内では，これを読んできて返しています．<br/>\nさらに，<code>if</code> 文の then 節にあたる，<code>then-block-18-</code> というブロックでは，<code>%sret_slot</code> に値を格納して <code>return</code> ブロックへジャンプしています．\nelse 節のあとの部分 (<code>join</code> ブロック) でも同様に, <code>%sret_slot</code> に値を格納して <code>return</code> ブロックへジャンプしています．</p>\n<h1>まとめ</h1>\n<p>というわけで，様々な Rust コードを <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/LLVM\">LLVM</a> IR に変換して見てみた結果，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>のパスから値を返す場合は，「ローカル変数として返り値を定義し，そこに返したい値を格納してから <code>return</code> に goto」という形になっていることがわかりました．</p>\n<p>(ほとんど <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/LLVM\">LLVM</a> IR を乗っけるだけになってしまった...)</p>\n<h2>ちなみに ...</h2>\n<h1><code>if</code> 文の返す値をそのまま返す</h1>\n<pre class=\"code lang-rust\" data-lang=\"rust\" data-unlink><span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">ifreturn</span>(x: isize) -&gt; isize {\n  <span class=\"synStatement\">if</span> x == <span class=\"synConstant\">0</span> {\n    <span class=\"synConstant\">1</span>\n  } <span class=\"synStatement\">else</span> {\n    x\n  }\n}\n</pre>\n<p>Rust に慣れていないとちょっとわかりにくいですが，<code>x == 0</code> の場合は 1 を返し，そうでない場合は <code>x</code> を返す関数です．</p>\n<p>これは，</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>define internal i64 @_ZN4hoge8ifreturn17hcdaab6e376d6c95cE(i64) unnamed_addr #0 {\nentry-block:\n  %sret_slot = alloca i64\n  %x = alloca i64\n  store i64 %0, i64* %x\n  %1 = load i64, i64* %x\n  %2 = icmp eq i64 %1, 0\n  br i1 %2, label %then-block-15-, label %else-block\n\nthen-block-15-:                                   ; preds = %entry-block\n  store i64 1, i64* %sret_slot\n  br label %join\n\nelse-block:                                       ; preds = %entry-block\n  %3 = load i64, i64* %x\n  store i64 %3, i64* %sret_slot\n  br label %join\n\njoin:                                             ; preds = %else-block, %then-block-15-\n  %4 = load i64, i64* %sret_slot\n  ret i64 %4\n}</pre>\n<p>こうなります．やっていることは上記の例たちとあまり変わりません．\nしかし，<code>return</code> 文がないので？，<code>return</code> ブロックが作られていません．が, <code>%sret_slot</code> は定義されていますね...<br/>\nこれはどういうことなんでしょう．<code>rustc</code> のコードを読むべきなのかもしれませんが，イマイチ内部処理が想像しにくいです...</p>\n<p>普通に翻訳していったら，</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>let x = if x == 0 { 1 } else { x };\nx</pre>\n<p>と同じ感じになる気がするので，<code>%sret_slot</code> という名前が出てくる余地は無い気がするのですが...(実質同じ処理ではあります)\n分岐が直接返戻値になる場合は特別扱いしているのかな？</p>\n<hr>\n<hr>\n","meta":{"rawMarkdown":"---\ntitle: \"Rust における return文の LLVM IR 表現について\"\ndate: 2016-04-13T09:34:03.000Z\ntags: []\n---\n\n<ul>\n<li><code>if</code> 文が値を返す</li>\n<li><code>return</code> 文を持つ</li>\n</ul>\n\n<p>以上のような特徴を持つ言語はどういう感じで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>されるのか知りたくて，Rust について調べてみました．</p>\n\n<p>Rust では以下の様なことが出来ます．</p>\n\n<pre class=\"code lang-rust\" data-lang=\"rust\" data-unlink><span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">f</span>() {\n  <span class=\"synStatement\">let</span> x = <span class=\"synStatement\">if</span> cond {\n    return None;\n  } <span class=\"synStatement\">else</span> {\n    <span class=\"synConstant\">1</span>\n  };\n  ...\n}\n</pre>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Scala\">Scala</a> とかもできると思います．<code>cond</code> が真だった場合は，<code>x</code> の値を返すのではなく，関数から抜けてしまうという意味です．</p>\n\n<p>これを Rust ではどんな <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/LLVM\">LLVM</a> IR に落とし込んでいるのか．</p>\n\n<h1><code>return</code> 文がない場合</h1>\n\n<pre class=\"code lang-rust\" data-lang=\"rust\" data-unlink><span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">noreturn</span>(x: isize) -&gt; isize {\n  x\n}\n</pre>\n\n<p>最も単純な場合です．この場合，生成される <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/LLVM\">LLVM</a> IR は，</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>define internal i64 @_ZN4hoge8noreturn17h811bf1a871f85432E(i64) unnamed_addr #0 {\nentry-block:\n  %x = alloca i64\n  store i64 %0, i64* %x\n  %1 = load i64, i64* %x\n  ret i64 %1\n}</pre>\n\n<p>となります．\n名前がマングルされていますが，上記の <code>noreturn</code> 関数です．\nやっていることは単純で，第一引数を読み込んで返すだけです．</p>\n\n<h1><code>return</code> に相当する文が一つのみの場合</h1>\n\n<pre class=\"code lang-rust\" data-lang=\"rust\" data-unlink><span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">onereturn</span>(x: isize) -&gt; isize {\n  <span class=\"synStatement\">let</span> y = <span class=\"synStatement\">if</span> x == <span class=\"synConstant\">0</span> {\n    <span class=\"synConstant\">1</span>\n  } <span class=\"synStatement\">else</span> {\n    x\n  };\n  return x;\n}\n</pre>\n\n<p>実際に値を返す部分が一箇所しかない場合です．途中に分岐があっても最終的に一箇所になっていれば多分同じ結果になります．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>define internal i64 @_ZN4hoge9onereturn17h8b718f32daa6a379E(i64) unnamed_addr #0 {\nentry-block:\n  %x = alloca i64\n  %y = alloca i64\n  store i64 %0, i64* %x\n  %1 = load i64, i64* %x\n  %2 = icmp eq i64 %1, 0\n  br i1 %2, label %then-block-18-, label %else-block\n\nthen-block-18-:                                   ; preds = %entry-block\n  store i64 1, i64* %y\n  br label %join\n\nelse-block:                                       ; preds = %entry-block\n  %3 = load i64, i64* %x\n  store i64 %3, i64* %y\n  br label %join\n\njoin:                                             ; preds = %else-block, %then-block-18-\n  %4 = load i64, i64* %x\n  br label %clean_ast_10_\n\nreturn:                                           ; preds = %clean_ast_10_\n  ret i64 %4\n\nclean_ast_10_:                                    ; preds = %join\n  br label %return\n}</pre>\n\n<p><code>return</code> という BasicBlock ができています．これは <code>return</code> 文が現れると作られるよう？です．\nで，その中では単純に <code>x</code> に該当する値を返しています．</p>\n\n<p>最後の <code>return x;</code> 文を 単純に <code>x</code> に置き換えてみると，</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>define internal i64 @_ZN4hoge9onereturn17h8b718f32daa6a379E(i64) unnamed_addr #0 {\nentry-block:\n  %x = alloca i64\n  %y = alloca i64\n  store i64 %0, i64* %x\n  %1 = load i64, i64* %x\n  %2 = icmp eq i64 %1, 0\n  br i1 %2, label %then-block-18-, label %else-block\n\nthen-block-18-:                                   ; preds = %entry-block\n  store i64 1, i64* %y\n  br label %join\n\nelse-block:                                       ; preds = %entry-block\n  %3 = load i64, i64* %x\n  store i64 %3, i64* %y\n  br label %join\n\njoin:                                             ; preds = %else-block, %then-block-18-\n  %4 = load i64, i64* %x\n  ret i64 %4\n}</pre>\n\n<p>となります． <code>return</code> ブロックが消えていますね．なので <code>return</code> 文があると <code>return</code> ブロックが作られる、で良さそう？</p>\n\n<h1><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>のパスから値を返す</h1>\n\n<pre class=\"code lang-rust\" data-lang=\"rust\" data-unlink><span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">multireturn</span>(x: isize) -&gt; isize {\n  <span class=\"synStatement\">let</span> y = <span class=\"synStatement\">if</span> x == <span class=\"synConstant\">0</span> {\n    return -<span class=\"synConstant\">1</span>;\n  } <span class=\"synStatement\">else</span> {\n    x\n  };\n  y\n}\n</pre>\n\n<p>さて，では最初に述べた，<code>if</code> の分岐内にある <code>return</code> についてです．\nこれは，</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>define internal i64 @_ZN4hoge11multireturn17had379e8ce5a18f08E(i64) unnamed_addr #0 {\nentry-block:\n  %sret_slot = alloca i64\n  %x = alloca i64\n  %y = alloca i64\n  store i64 %0, i64* %x\n  %1 = load i64, i64* %x\n  %2 = icmp eq i64 %1, 0\n  br i1 %2, label %then-block-18-, label %else-block\n\nthen-block-18-:                                   ; preds = %entry-block\n  store i64 -1, i64* %sret_slot\n  br label %return\n\nelse-block:                                       ; preds = %entry-block\n  %3 = load i64, i64* %x\n  store i64 %3, i64* %y\n  br label %join\n\njoin:                                             ; preds = %else-block\n  %4 = load i64, i64* %y\n  store i64 %4, i64* %sret_slot\n  br label %return\n\nreturn:                                           ; preds = %join, %then-block-18-\n  %5 = load i64, i64* %sret_slot\n  ret i64 %5\n}</pre>\n\n<p>こうなりました．\nまず，<code>return</code> 文があるため？，<code>return</code> ブロックが作られています．\nしかし今回は，パスによって返すものが違います．(値が違うという意味ではなく，同じ変数ですらないという意味です...)</p>\n\n<p>よく IR を読むと，関数の頭で <code>%sret_slot</code> という名前でスタック領域を確保していることがわかります．\nそして，<code>return</code> ブロック内では，これを読んできて返しています．<br/>\nさらに，<code>if</code> 文の then 節にあたる，<code>then-block-18-</code> というブロックでは，<code>%sret_slot</code> に値を格納して <code>return</code> ブロックへジャンプしています．\nelse 節のあとの部分 (<code>join</code> ブロック) でも同様に, <code>%sret_slot</code> に値を格納して <code>return</code> ブロックへジャンプしています．</p>\n\n<h1>まとめ</h1>\n\n<p>というわけで，様々な Rust コードを <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/LLVM\">LLVM</a> IR に変換して見てみた結果，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>のパスから値を返す場合は，「ローカル変数として返り値を定義し，そこに返したい値を格納してから <code>return</code> に goto」という形になっていることがわかりました．</p>\n\n<p>(ほとんど <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/LLVM\">LLVM</a> IR を乗っけるだけになってしまった...)</p>\n\n<h2>ちなみに ...</h2>\n\n<h1><code>if</code> 文の返す値をそのまま返す</h1>\n\n<pre class=\"code lang-rust\" data-lang=\"rust\" data-unlink><span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">ifreturn</span>(x: isize) -&gt; isize {\n  <span class=\"synStatement\">if</span> x == <span class=\"synConstant\">0</span> {\n    <span class=\"synConstant\">1</span>\n  } <span class=\"synStatement\">else</span> {\n    x\n  }\n}\n</pre>\n\n<p>Rust に慣れていないとちょっとわかりにくいですが，<code>x == 0</code> の場合は 1 を返し，そうでない場合は <code>x</code> を返す関数です．</p>\n\n<p>これは，</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>define internal i64 @_ZN4hoge8ifreturn17hcdaab6e376d6c95cE(i64) unnamed_addr #0 {\nentry-block:\n  %sret_slot = alloca i64\n  %x = alloca i64\n  store i64 %0, i64* %x\n  %1 = load i64, i64* %x\n  %2 = icmp eq i64 %1, 0\n  br i1 %2, label %then-block-15-, label %else-block\n\nthen-block-15-:                                   ; preds = %entry-block\n  store i64 1, i64* %sret_slot\n  br label %join\n\nelse-block:                                       ; preds = %entry-block\n  %3 = load i64, i64* %x\n  store i64 %3, i64* %sret_slot\n  br label %join\n\njoin:                                             ; preds = %else-block, %then-block-15-\n  %4 = load i64, i64* %sret_slot\n  ret i64 %4\n}</pre>\n\n<p>こうなります．やっていることは上記の例たちとあまり変わりません．\nしかし，<code>return</code> 文がないので？，<code>return</code> ブロックが作られていません．が, <code>%sret_slot</code> は定義されていますね...<br/>\nこれはどういうことなんでしょう．<code>rustc</code> のコードを読むべきなのかもしれませんが，イマイチ内部処理が想像しにくいです...</p>\n\n<p>普通に翻訳していったら，</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>let x = if x == 0 { 1 } else { x };\nx</pre>\n\n<p>と同じ感じになる気がするので，<code>%sret_slot</code> という名前が出てくる余地は無い気がするのですが...(実質同じ処理ではあります)\n分岐が直接返戻値になる場合は特別扱いしているのかな？</p>\n\n---\n\n---\n","contentMarkdown":"\n<ul>\n<li><code>if</code> 文が値を返す</li>\n<li><code>return</code> 文を持つ</li>\n</ul>\n\n<p>以上のような特徴を持つ言語はどういう感じで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>されるのか知りたくて，Rust について調べてみました．</p>\n\n<p>Rust では以下の様なことが出来ます．</p>\n\n<pre class=\"code lang-rust\" data-lang=\"rust\" data-unlink><span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">f</span>() {\n  <span class=\"synStatement\">let</span> x = <span class=\"synStatement\">if</span> cond {\n    return None;\n  } <span class=\"synStatement\">else</span> {\n    <span class=\"synConstant\">1</span>\n  };\n  ...\n}\n</pre>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Scala\">Scala</a> とかもできると思います．<code>cond</code> が真だった場合は，<code>x</code> の値を返すのではなく，関数から抜けてしまうという意味です．</p>\n\n<p>これを Rust ではどんな <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/LLVM\">LLVM</a> IR に落とし込んでいるのか．</p>\n\n<h1><code>return</code> 文がない場合</h1>\n\n<pre class=\"code lang-rust\" data-lang=\"rust\" data-unlink><span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">noreturn</span>(x: isize) -&gt; isize {\n  x\n}\n</pre>\n\n<p>最も単純な場合です．この場合，生成される <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/LLVM\">LLVM</a> IR は，</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>define internal i64 @_ZN4hoge8noreturn17h811bf1a871f85432E(i64) unnamed_addr #0 {\nentry-block:\n  %x = alloca i64\n  store i64 %0, i64* %x\n  %1 = load i64, i64* %x\n  ret i64 %1\n}</pre>\n\n<p>となります．\n名前がマングルされていますが，上記の <code>noreturn</code> 関数です．\nやっていることは単純で，第一引数を読み込んで返すだけです．</p>\n\n<h1><code>return</code> に相当する文が一つのみの場合</h1>\n\n<pre class=\"code lang-rust\" data-lang=\"rust\" data-unlink><span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">onereturn</span>(x: isize) -&gt; isize {\n  <span class=\"synStatement\">let</span> y = <span class=\"synStatement\">if</span> x == <span class=\"synConstant\">0</span> {\n    <span class=\"synConstant\">1</span>\n  } <span class=\"synStatement\">else</span> {\n    x\n  };\n  return x;\n}\n</pre>\n\n<p>実際に値を返す部分が一箇所しかない場合です．途中に分岐があっても最終的に一箇所になっていれば多分同じ結果になります．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>define internal i64 @_ZN4hoge9onereturn17h8b718f32daa6a379E(i64) unnamed_addr #0 {\nentry-block:\n  %x = alloca i64\n  %y = alloca i64\n  store i64 %0, i64* %x\n  %1 = load i64, i64* %x\n  %2 = icmp eq i64 %1, 0\n  br i1 %2, label %then-block-18-, label %else-block\n\nthen-block-18-:                                   ; preds = %entry-block\n  store i64 1, i64* %y\n  br label %join\n\nelse-block:                                       ; preds = %entry-block\n  %3 = load i64, i64* %x\n  store i64 %3, i64* %y\n  br label %join\n\njoin:                                             ; preds = %else-block, %then-block-18-\n  %4 = load i64, i64* %x\n  br label %clean_ast_10_\n\nreturn:                                           ; preds = %clean_ast_10_\n  ret i64 %4\n\nclean_ast_10_:                                    ; preds = %join\n  br label %return\n}</pre>\n\n<p><code>return</code> という BasicBlock ができています．これは <code>return</code> 文が現れると作られるよう？です．\nで，その中では単純に <code>x</code> に該当する値を返しています．</p>\n\n<p>最後の <code>return x;</code> 文を 単純に <code>x</code> に置き換えてみると，</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>define internal i64 @_ZN4hoge9onereturn17h8b718f32daa6a379E(i64) unnamed_addr #0 {\nentry-block:\n  %x = alloca i64\n  %y = alloca i64\n  store i64 %0, i64* %x\n  %1 = load i64, i64* %x\n  %2 = icmp eq i64 %1, 0\n  br i1 %2, label %then-block-18-, label %else-block\n\nthen-block-18-:                                   ; preds = %entry-block\n  store i64 1, i64* %y\n  br label %join\n\nelse-block:                                       ; preds = %entry-block\n  %3 = load i64, i64* %x\n  store i64 %3, i64* %y\n  br label %join\n\njoin:                                             ; preds = %else-block, %then-block-18-\n  %4 = load i64, i64* %x\n  ret i64 %4\n}</pre>\n\n<p>となります． <code>return</code> ブロックが消えていますね．なので <code>return</code> 文があると <code>return</code> ブロックが作られる、で良さそう？</p>\n\n<h1><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>のパスから値を返す</h1>\n\n<pre class=\"code lang-rust\" data-lang=\"rust\" data-unlink><span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">multireturn</span>(x: isize) -&gt; isize {\n  <span class=\"synStatement\">let</span> y = <span class=\"synStatement\">if</span> x == <span class=\"synConstant\">0</span> {\n    return -<span class=\"synConstant\">1</span>;\n  } <span class=\"synStatement\">else</span> {\n    x\n  };\n  y\n}\n</pre>\n\n<p>さて，では最初に述べた，<code>if</code> の分岐内にある <code>return</code> についてです．\nこれは，</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>define internal i64 @_ZN4hoge11multireturn17had379e8ce5a18f08E(i64) unnamed_addr #0 {\nentry-block:\n  %sret_slot = alloca i64\n  %x = alloca i64\n  %y = alloca i64\n  store i64 %0, i64* %x\n  %1 = load i64, i64* %x\n  %2 = icmp eq i64 %1, 0\n  br i1 %2, label %then-block-18-, label %else-block\n\nthen-block-18-:                                   ; preds = %entry-block\n  store i64 -1, i64* %sret_slot\n  br label %return\n\nelse-block:                                       ; preds = %entry-block\n  %3 = load i64, i64* %x\n  store i64 %3, i64* %y\n  br label %join\n\njoin:                                             ; preds = %else-block\n  %4 = load i64, i64* %y\n  store i64 %4, i64* %sret_slot\n  br label %return\n\nreturn:                                           ; preds = %join, %then-block-18-\n  %5 = load i64, i64* %sret_slot\n  ret i64 %5\n}</pre>\n\n<p>こうなりました．\nまず，<code>return</code> 文があるため？，<code>return</code> ブロックが作られています．\nしかし今回は，パスによって返すものが違います．(値が違うという意味ではなく，同じ変数ですらないという意味です...)</p>\n\n<p>よく IR を読むと，関数の頭で <code>%sret_slot</code> という名前でスタック領域を確保していることがわかります．\nそして，<code>return</code> ブロック内では，これを読んできて返しています．<br/>\nさらに，<code>if</code> 文の then 節にあたる，<code>then-block-18-</code> というブロックでは，<code>%sret_slot</code> に値を格納して <code>return</code> ブロックへジャンプしています．\nelse 節のあとの部分 (<code>join</code> ブロック) でも同様に, <code>%sret_slot</code> に値を格納して <code>return</code> ブロックへジャンプしています．</p>\n\n<h1>まとめ</h1>\n\n<p>というわけで，様々な Rust コードを <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/LLVM\">LLVM</a> IR に変換して見てみた結果，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>のパスから値を返す場合は，「ローカル変数として返り値を定義し，そこに返したい値を格納してから <code>return</code> に goto」という形になっていることがわかりました．</p>\n\n<p>(ほとんど <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/LLVM\">LLVM</a> IR を乗っけるだけになってしまった...)</p>\n\n<h2>ちなみに ...</h2>\n\n<h1><code>if</code> 文の返す値をそのまま返す</h1>\n\n<pre class=\"code lang-rust\" data-lang=\"rust\" data-unlink><span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">ifreturn</span>(x: isize) -&gt; isize {\n  <span class=\"synStatement\">if</span> x == <span class=\"synConstant\">0</span> {\n    <span class=\"synConstant\">1</span>\n  } <span class=\"synStatement\">else</span> {\n    x\n  }\n}\n</pre>\n\n<p>Rust に慣れていないとちょっとわかりにくいですが，<code>x == 0</code> の場合は 1 を返し，そうでない場合は <code>x</code> を返す関数です．</p>\n\n<p>これは，</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>define internal i64 @_ZN4hoge8ifreturn17hcdaab6e376d6c95cE(i64) unnamed_addr #0 {\nentry-block:\n  %sret_slot = alloca i64\n  %x = alloca i64\n  store i64 %0, i64* %x\n  %1 = load i64, i64* %x\n  %2 = icmp eq i64 %1, 0\n  br i1 %2, label %then-block-15-, label %else-block\n\nthen-block-15-:                                   ; preds = %entry-block\n  store i64 1, i64* %sret_slot\n  br label %join\n\nelse-block:                                       ; preds = %entry-block\n  %3 = load i64, i64* %x\n  store i64 %3, i64* %sret_slot\n  br label %join\n\njoin:                                             ; preds = %else-block, %then-block-15-\n  %4 = load i64, i64* %sret_slot\n  ret i64 %4\n}</pre>\n\n<p>こうなります．やっていることは上記の例たちとあまり変わりません．\nしかし，<code>return</code> 文がないので？，<code>return</code> ブロックが作られていません．が, <code>%sret_slot</code> は定義されていますね...<br/>\nこれはどういうことなんでしょう．<code>rustc</code> のコードを読むべきなのかもしれませんが，イマイチ内部処理が想像しにくいです...</p>\n\n<p>普通に翻訳していったら，</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>let x = if x == 0 { 1 } else { x };\nx</pre>\n\n<p>と同じ感じになる気がするので，<code>%sret_slot</code> という名前が出てくる余地は無い気がするのですが...(実質同じ処理ではあります)\n分岐が直接返戻値になる場合は特別扱いしているのかな？</p>\n\n---\n\n---\n","slug":"Rust_における_return文の_LLVM_IR_表現について","title":"Rust における return文の LLVM IR 表現について","timestamp":1460540043000,"tags":[]}}},"__N_SSG":true}