{"pageProps":{"post":{"content":"<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>といえば，Boost.Spirit や <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/yacc\">yacc</a>系などが有名ですが，どうにも使うの辛かったので作りました．</p>\n<h3>2016/05/01 追記　</h3>\n<p>いろいろ更新しました．肯定先読み以外はプリミティブも実装し終わっているかと思います．<br/>\nドキュメントはまだ無いのですが，すべての機能についてテストは書いてあるので，それを見てもらえればなんとか使い方もわかるかと思います．</p>\n<p><a href=\"https://github.com/agatan/coco\">agatan/coco</a></p>\n<p><code>coco::combix</code> がパーサ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D3%A5%CD%A1%BC%A5%BF\">コンビネータ</a>ライブラリの namespace です．</p>\n<p>Boost.Spirit は高機能かつ高性能なんですが，かなり変態的な構文で記述する必要があり(まぁ <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> なんですけど)，さらにその性能や便利さ，構文のために異常なまでにテンプレートを多用しています．私は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>後の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%CC%DA\">構文木</a>の構築に Boost.Variant を使ってみているのですが，Boost.Spirit と Boost.Variant の両面から，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%C3%A5%AF\">ジェネリック</a>すぎるがゆえの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>エラー爆発攻撃を食らって本当に辛いです．</p>\n<p>そこで，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a> の <a href=\"https://hackage.haskell.org/package/parsec\">parsec</a> や Rust の <a href=\"https://github.com/Marwes/combine\">combine</a> を参考にしつつ，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> でパーサ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D3%A5%CD%A1%BC%A5%BF\">コンビネータ</a>を書いてみました．(実際これを使っても<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>エラーは割りと発狂しますが)</p>\n<h2>例</h2>\n<p>例となるコードは <a href=\"https://github.com/agatan/coco-combix-demo\">agatan/coco-combix-demo</a> においてあります．<br/>\nドキュメントもないので，なんとなく雰囲気だけコードから読み取る必要があります．(例に出ていない機能もちょいちょい実装されてしまっています．)</p>\n<p>以下にちょっと簡略版のコードを載せてみます．ありがちな電卓です．AST を作らず直接計算しています．</p>\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;string&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;iostream&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;functional&gt;</span>\n\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;coco/combix.hpp&gt;</span>\n\n<span class=\"synType\">namespace</span> cbx = coco::combix;\n\n<span class=\"synStatement\">using</span> stream_type = cbx::iterator_stream&lt;std::string::const_iterator&gt;;\n\ncbx::parser&lt;<span class=\"synType\">int</span>, stream_type&gt; expression();\n\ncbx::parser&lt;<span class=\"synType\">int</span>, stream_type&gt; number() {\n  <span class=\"synStatement\">return</span> cbx::expected(cbx::map(cbx::many1(cbx::digit()),\n                                [](<span class=\"synType\">auto</span>&amp;&amp; is) <span class=\"synError\">{</span>\n                                  <span class=\"synType\">int</span> acc = <span class=\"synConstant\">0</span>;\n                                  <span class=\"synStatement\">for</span> (<span class=\"synType\">auto</span> i : is) <span class=\"synError\">{</span>\n                                    acc = acc * <span class=\"synConstant\">10</span> + i;\n                                  <span class=\"synError\">}</span>\n                                  <span class=\"synStatement\">return</span> acc;\n                                }<span class=\"synError\">)</span>,\n                       <span class=\"synConstant\">&quot;integer number&quot;</span><span class=\"synError\">)</span>;\n}\n\ncbx::parser&lt;<span class=\"synType\">int</span>, stream_type&gt; factor() {\n  <span class=\"synStatement\">return</span> cbx::choice(\n      number(),\n      cbx::between(cbx::skip(cbx::token(<span class=\"synConstant\">'('</span>), cbx::spaces()),\n                   cbx::skip(cbx::token(<span class=\"synConstant\">')'</span>), cbx::spaces()),\n                   cbx::skip(cbx::lazy_fun(expression), cbx::spaces())));\n}\n\ncbx::parser&lt;<span class=\"synType\">int</span>, stream_type&gt; term() {\n  <span class=\"synType\">auto</span> op = cbx::map(\n      cbx::skip(cbx::choice(cbx::token(<span class=\"synConstant\">'*'</span>), cbx::token(<span class=\"synConstant\">'/'</span>)), cbx::spaces()),\n      [](<span class=\"synType\">auto</span> c) -&gt; std::function&lt;<span class=\"synType\">int</span>(<span class=\"synType\">int</span>, <span class=\"synType\">int</span>)&gt; <span class=\"synError\">{</span>\n        <span class=\"synStatement\">if</span> (c == <span class=\"synConstant\">'*'</span>) <span class=\"synError\">{</span>\n          <span class=\"synStatement\">return</span> std::multiplies&lt;<span class=\"synType\">int</span>&gt;();\n        <span class=\"synError\">}</span> <span class=\"synStatement\">else</span> <span class=\"synError\">{</span>\n          <span class=\"synStatement\">return</span> std::divides&lt;<span class=\"synType\">int</span>&gt;();\n        <span class=\"synError\">}</span>\n      }<span class=\"synError\">)</span>;\n  <span class=\"synStatement\">return</span> cbx::chainl1(cbx::skip(factor(), cbx::spaces()), op);\n}\n\ncbx::parser&lt;<span class=\"synType\">int</span>, stream_type&gt; expression() {\n  <span class=\"synType\">auto</span> op = cbx::map(\n      cbx::skip(cbx::choice(cbx::token(<span class=\"synConstant\">'+'</span>), cbx::token(<span class=\"synConstant\">'-'</span>)), cbx::spaces()),\n      [](<span class=\"synType\">auto</span> c) -&gt; std::function&lt;<span class=\"synType\">int</span>(<span class=\"synType\">int</span>, <span class=\"synType\">int</span>)&gt; <span class=\"synError\">{</span>\n        <span class=\"synStatement\">if</span> (c == <span class=\"synConstant\">'+'</span>) <span class=\"synError\">{</span>\n          <span class=\"synStatement\">return</span> std::plus&lt;<span class=\"synType\">int</span>&gt;();\n        <span class=\"synError\">}</span> <span class=\"synStatement\">else</span> <span class=\"synError\">{</span>\n          <span class=\"synStatement\">return</span> std::minus&lt;<span class=\"synType\">int</span>&gt;();\n        <span class=\"synError\">}</span>\n      }<span class=\"synError\">)</span>;\n  <span class=\"synStatement\">return</span> cbx::chainl1(cbx::skip(term(), cbx::spaces()), op);\n}\n\n<span class=\"synType\">int</span> main() {\n  std::string src;\n  std::getline(std::cin, src);\n  <span class=\"synType\">auto</span> n = number();\n  <span class=\"synType\">auto</span> stream = cbx::range_stream(src);\n  <span class=\"synType\">auto</span> <span class=\"synType\">const</span> parser = expression();\n  <span class=\"synStatement\">if</span> (<span class=\"synType\">auto</span> res = cbx::parse(parser, stream)) {\n    std::cout &lt;&lt; res.unwrap() &lt;&lt; std::endl;\n  } <span class=\"synStatement\">else</span> {\n    std::cout &lt;&lt; cbx::to_string(res.unwrap_error()) &lt;&lt; std::endl;\n  }\n}\n</pre>\n<h2>特徴</h2>\n<p>parsec を知っている方であれば読めるはずです...<br/>\n特徴としては，多くのパーサは入力ストリームの型に依存せずに作れるようになっていることです．例えば，あらゆる入力一つを受け付け消費する <code>any</code> というパーサは，入力が <code>char</code> のストリームであろうと <code>int</code> のストリームであろうとパースを実行できるようになっています．<br/>\n本来はエラーメッセージの爆発や読みづらさを防ぐために，すべてのパーサ自体にストリームの型をひも付けたかったのですが，そうすると，<code>any</code> を使うたびに，<code>any&lt;cbx::iterator_stream&lt;typename std::vector&lt;int&gt;::const_iterator&gt;&gt;()</code> とか <code>any&lt;cbx::iterator_stream&lt;std::string::const_iterator&gt;&gt;()</code> とかしなくてはなりません．これは <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a> や Rust と違って <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B7%BF%BF%E4%CF%C0\">型推論</a>が限定的であるためです．(<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a> や Rust では後でその値がどう使われているかも推論の根拠として使われます．)<br/>\nそこで，パーサ自体には入力ストリームの型を指定させずに，実際にパースする部分で初めて入力ストリームの型を検査することにしました．</p>\n<p>で，<code>cbx::parser&lt;int, stream_type&gt;</code> はパーサを type erasure を使ってラップします．普通に使っていると簡単に <code>cbx::expected&lt;cbx::map_parser&lt;cbx::many1_parser&lt;cbx::digit_parser&gt;, (lambda at ...)&gt;&gt;</code> 型とかが出てきます(<code>cbx::expected(cbx::map(cbx::many1(cbx::digit()), [](auto&amp;&amp;) {...}), \"integer number\")</code> の型です)<br/>\nこれを関数定義のたびに書くとか発狂してしまうので，type erasure を使って型をラップし短絡します．<br/>\nただしパフォーマンスの観点から行くとおそらく型をラップするために仮想関数を使ってしまうので，インライン展開等がきかなくなると思われます．まぁ仕方ないです．<br/>\nただ，型を膨らませすぎずに適度にラップしてやると，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>エラーの内容がかなり読みやすくなるはずです．なのでなんかわからんけどエラーになるっていうときは細かくパーサを分割してラップしてやると良いかもしれません．</p>\n<h2>まとめ</h2>\n<p>あまりにもドキュメントやコメント書かなすぎてひどいですが，ちょっと<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>したいとかっていうときに便利だと思います．<br/>\nBoost.Spirit と違って普通に <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> のプログラムとして書けます．(Boost.Spirit も <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> プログラムとして書けてはいるんですが，なんかあれはあれで別の言語を覚えているような気分になってしまったので...)</p>\n<p>あと PEG のプリミティブをまだ完全に実装していないと思います．先読みや否定先読みが出来ません．(実装します…)</p>\n<hr>\n<hr>\n","meta":{"rawMarkdown":"---\ntitle: \"C++ でパーサコンビネータを書きました\"\ndate: 2016-04-29T15:30:09.000Z\ntags: []\n---\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>といえば，Boost.Spirit や <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/yacc\">yacc</a>系などが有名ですが，どうにも使うの辛かったので作りました．</p>\n\n<h3>2016/05/01 追記　</h3>\n\n<p>いろいろ更新しました．肯定先読み以外はプリミティブも実装し終わっているかと思います．<br/>\nドキュメントはまだ無いのですが，すべての機能についてテストは書いてあるので，それを見てもらえればなんとか使い方もわかるかと思います．</p>\n\n<p><a href=\"https://github.com/agatan/coco\">agatan/coco</a></p>\n\n<p><code>coco::combix</code> がパーサ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D3%A5%CD%A1%BC%A5%BF\">コンビネータ</a>ライブラリの namespace です．</p>\n\n<p>Boost.Spirit は高機能かつ高性能なんですが，かなり変態的な構文で記述する必要があり(まぁ <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> なんですけど)，さらにその性能や便利さ，構文のために異常なまでにテンプレートを多用しています．私は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>後の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%CC%DA\">構文木</a>の構築に Boost.Variant を使ってみているのですが，Boost.Spirit と Boost.Variant の両面から，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%C3%A5%AF\">ジェネリック</a>すぎるがゆえの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>エラー爆発攻撃を食らって本当に辛いです．</p>\n\n<p>そこで，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a> の <a href=\"https://hackage.haskell.org/package/parsec\">parsec</a> や Rust の <a href=\"https://github.com/Marwes/combine\">combine</a> を参考にしつつ，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> でパーサ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D3%A5%CD%A1%BC%A5%BF\">コンビネータ</a>を書いてみました．(実際これを使っても<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>エラーは割りと発狂しますが)</p>\n\n<h2>例</h2>\n\n<p>例となるコードは <a href=\"https://github.com/agatan/coco-combix-demo\">agatan/coco-combix-demo</a> においてあります．<br/>\nドキュメントもないので，なんとなく雰囲気だけコードから読み取る必要があります．(例に出ていない機能もちょいちょい実装されてしまっています．)</p>\n\n<p>以下にちょっと簡略版のコードを載せてみます．ありがちな電卓です．AST を作らず直接計算しています．</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;string&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;iostream&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;functional&gt;</span>\n\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;coco/combix.hpp&gt;</span>\n\n<span class=\"synType\">namespace</span> cbx = coco::combix;\n\n<span class=\"synStatement\">using</span> stream_type = cbx::iterator_stream&lt;std::string::const_iterator&gt;;\n\ncbx::parser&lt;<span class=\"synType\">int</span>, stream_type&gt; expression();\n\ncbx::parser&lt;<span class=\"synType\">int</span>, stream_type&gt; number() {\n  <span class=\"synStatement\">return</span> cbx::expected(cbx::map(cbx::many1(cbx::digit()),\n                                [](<span class=\"synType\">auto</span>&amp;&amp; is) <span class=\"synError\">{</span>\n                                  <span class=\"synType\">int</span> acc = <span class=\"synConstant\">0</span>;\n                                  <span class=\"synStatement\">for</span> (<span class=\"synType\">auto</span> i : is) <span class=\"synError\">{</span>\n                                    acc = acc * <span class=\"synConstant\">10</span> + i;\n                                  <span class=\"synError\">}</span>\n                                  <span class=\"synStatement\">return</span> acc;\n                                }<span class=\"synError\">)</span>,\n                       <span class=\"synConstant\">&quot;integer number&quot;</span><span class=\"synError\">)</span>;\n}\n\ncbx::parser&lt;<span class=\"synType\">int</span>, stream_type&gt; factor() {\n  <span class=\"synStatement\">return</span> cbx::choice(\n      number(),\n      cbx::between(cbx::skip(cbx::token(<span class=\"synConstant\">'('</span>), cbx::spaces()),\n                   cbx::skip(cbx::token(<span class=\"synConstant\">')'</span>), cbx::spaces()),\n                   cbx::skip(cbx::lazy_fun(expression), cbx::spaces())));\n}\n\ncbx::parser&lt;<span class=\"synType\">int</span>, stream_type&gt; term() {\n  <span class=\"synType\">auto</span> op = cbx::map(\n      cbx::skip(cbx::choice(cbx::token(<span class=\"synConstant\">'*'</span>), cbx::token(<span class=\"synConstant\">'/'</span>)), cbx::spaces()),\n      [](<span class=\"synType\">auto</span> c) -&gt; std::function&lt;<span class=\"synType\">int</span>(<span class=\"synType\">int</span>, <span class=\"synType\">int</span>)&gt; <span class=\"synError\">{</span>\n        <span class=\"synStatement\">if</span> (c == <span class=\"synConstant\">'*'</span>) <span class=\"synError\">{</span>\n          <span class=\"synStatement\">return</span> std::multiplies&lt;<span class=\"synType\">int</span>&gt;();\n        <span class=\"synError\">}</span> <span class=\"synStatement\">else</span> <span class=\"synError\">{</span>\n          <span class=\"synStatement\">return</span> std::divides&lt;<span class=\"synType\">int</span>&gt;();\n        <span class=\"synError\">}</span>\n      }<span class=\"synError\">)</span>;\n  <span class=\"synStatement\">return</span> cbx::chainl1(cbx::skip(factor(), cbx::spaces()), op);\n}\n\ncbx::parser&lt;<span class=\"synType\">int</span>, stream_type&gt; expression() {\n  <span class=\"synType\">auto</span> op = cbx::map(\n      cbx::skip(cbx::choice(cbx::token(<span class=\"synConstant\">'+'</span>), cbx::token(<span class=\"synConstant\">'-'</span>)), cbx::spaces()),\n      [](<span class=\"synType\">auto</span> c) -&gt; std::function&lt;<span class=\"synType\">int</span>(<span class=\"synType\">int</span>, <span class=\"synType\">int</span>)&gt; <span class=\"synError\">{</span>\n        <span class=\"synStatement\">if</span> (c == <span class=\"synConstant\">'+'</span>) <span class=\"synError\">{</span>\n          <span class=\"synStatement\">return</span> std::plus&lt;<span class=\"synType\">int</span>&gt;();\n        <span class=\"synError\">}</span> <span class=\"synStatement\">else</span> <span class=\"synError\">{</span>\n          <span class=\"synStatement\">return</span> std::minus&lt;<span class=\"synType\">int</span>&gt;();\n        <span class=\"synError\">}</span>\n      }<span class=\"synError\">)</span>;\n  <span class=\"synStatement\">return</span> cbx::chainl1(cbx::skip(term(), cbx::spaces()), op);\n}\n\n<span class=\"synType\">int</span> main() {\n  std::string src;\n  std::getline(std::cin, src);\n  <span class=\"synType\">auto</span> n = number();\n  <span class=\"synType\">auto</span> stream = cbx::range_stream(src);\n  <span class=\"synType\">auto</span> <span class=\"synType\">const</span> parser = expression();\n  <span class=\"synStatement\">if</span> (<span class=\"synType\">auto</span> res = cbx::parse(parser, stream)) {\n    std::cout &lt;&lt; res.unwrap() &lt;&lt; std::endl;\n  } <span class=\"synStatement\">else</span> {\n    std::cout &lt;&lt; cbx::to_string(res.unwrap_error()) &lt;&lt; std::endl;\n  }\n}\n</pre>\n\n<h2>特徴</h2>\n\n<p>parsec を知っている方であれば読めるはずです...<br/>\n特徴としては，多くのパーサは入力ストリームの型に依存せずに作れるようになっていることです．例えば，あらゆる入力一つを受け付け消費する <code>any</code> というパーサは，入力が <code>char</code> のストリームであろうと <code>int</code> のストリームであろうとパースを実行できるようになっています．<br/>\n本来はエラーメッセージの爆発や読みづらさを防ぐために，すべてのパーサ自体にストリームの型をひも付けたかったのですが，そうすると，<code>any</code> を使うたびに，<code>any&lt;cbx::iterator_stream&lt;typename std::vector&lt;int&gt;::const_iterator&gt;&gt;()</code> とか <code>any&lt;cbx::iterator_stream&lt;std::string::const_iterator&gt;&gt;()</code> とかしなくてはなりません．これは <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a> や Rust と違って <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B7%BF%BF%E4%CF%C0\">型推論</a>が限定的であるためです．(<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a> や Rust では後でその値がどう使われているかも推論の根拠として使われます．)<br/>\nそこで，パーサ自体には入力ストリームの型を指定させずに，実際にパースする部分で初めて入力ストリームの型を検査することにしました．</p>\n\n<p>で，<code>cbx::parser&lt;int, stream_type&gt;</code> はパーサを type erasure を使ってラップします．普通に使っていると簡単に <code>cbx::expected&lt;cbx::map_parser&lt;cbx::many1_parser&lt;cbx::digit_parser&gt;, (lambda at ...)&gt;&gt;</code> 型とかが出てきます(<code>cbx::expected(cbx::map(cbx::many1(cbx::digit()), [](auto&amp;&amp;) {...}), \"integer number\")</code> の型です)<br/>\nこれを関数定義のたびに書くとか発狂してしまうので，type erasure を使って型をラップし短絡します．<br/>\nただしパフォーマンスの観点から行くとおそらく型をラップするために仮想関数を使ってしまうので，インライン展開等がきかなくなると思われます．まぁ仕方ないです．<br/>\nただ，型を膨らませすぎずに適度にラップしてやると，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>エラーの内容がかなり読みやすくなるはずです．なのでなんかわからんけどエラーになるっていうときは細かくパーサを分割してラップしてやると良いかもしれません．</p>\n\n<h2>まとめ</h2>\n\n<p>あまりにもドキュメントやコメント書かなすぎてひどいですが，ちょっと<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>したいとかっていうときに便利だと思います．<br/>\nBoost.Spirit と違って普通に <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> のプログラムとして書けます．(Boost.Spirit も <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> プログラムとして書けてはいるんですが，なんかあれはあれで別の言語を覚えているような気分になってしまったので...)</p>\n\n<p>あと PEG のプリミティブをまだ完全に実装していないと思います．先読みや否定先読みが出来ません．(実装します…)</p>\n\n---\n\n---\n","contentMarkdown":"\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>といえば，Boost.Spirit や <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/yacc\">yacc</a>系などが有名ですが，どうにも使うの辛かったので作りました．</p>\n\n<h3>2016/05/01 追記　</h3>\n\n<p>いろいろ更新しました．肯定先読み以外はプリミティブも実装し終わっているかと思います．<br/>\nドキュメントはまだ無いのですが，すべての機能についてテストは書いてあるので，それを見てもらえればなんとか使い方もわかるかと思います．</p>\n\n<p><a href=\"https://github.com/agatan/coco\">agatan/coco</a></p>\n\n<p><code>coco::combix</code> がパーサ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D3%A5%CD%A1%BC%A5%BF\">コンビネータ</a>ライブラリの namespace です．</p>\n\n<p>Boost.Spirit は高機能かつ高性能なんですが，かなり変態的な構文で記述する必要があり(まぁ <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> なんですけど)，さらにその性能や便利さ，構文のために異常なまでにテンプレートを多用しています．私は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>後の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%CC%DA\">構文木</a>の構築に Boost.Variant を使ってみているのですが，Boost.Spirit と Boost.Variant の両面から，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%C3%A5%AF\">ジェネリック</a>すぎるがゆえの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>エラー爆発攻撃を食らって本当に辛いです．</p>\n\n<p>そこで，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a> の <a href=\"https://hackage.haskell.org/package/parsec\">parsec</a> や Rust の <a href=\"https://github.com/Marwes/combine\">combine</a> を参考にしつつ，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> でパーサ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D3%A5%CD%A1%BC%A5%BF\">コンビネータ</a>を書いてみました．(実際これを使っても<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>エラーは割りと発狂しますが)</p>\n\n<h2>例</h2>\n\n<p>例となるコードは <a href=\"https://github.com/agatan/coco-combix-demo\">agatan/coco-combix-demo</a> においてあります．<br/>\nドキュメントもないので，なんとなく雰囲気だけコードから読み取る必要があります．(例に出ていない機能もちょいちょい実装されてしまっています．)</p>\n\n<p>以下にちょっと簡略版のコードを載せてみます．ありがちな電卓です．AST を作らず直接計算しています．</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;string&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;iostream&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;functional&gt;</span>\n\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;coco/combix.hpp&gt;</span>\n\n<span class=\"synType\">namespace</span> cbx = coco::combix;\n\n<span class=\"synStatement\">using</span> stream_type = cbx::iterator_stream&lt;std::string::const_iterator&gt;;\n\ncbx::parser&lt;<span class=\"synType\">int</span>, stream_type&gt; expression();\n\ncbx::parser&lt;<span class=\"synType\">int</span>, stream_type&gt; number() {\n  <span class=\"synStatement\">return</span> cbx::expected(cbx::map(cbx::many1(cbx::digit()),\n                                [](<span class=\"synType\">auto</span>&amp;&amp; is) <span class=\"synError\">{</span>\n                                  <span class=\"synType\">int</span> acc = <span class=\"synConstant\">0</span>;\n                                  <span class=\"synStatement\">for</span> (<span class=\"synType\">auto</span> i : is) <span class=\"synError\">{</span>\n                                    acc = acc * <span class=\"synConstant\">10</span> + i;\n                                  <span class=\"synError\">}</span>\n                                  <span class=\"synStatement\">return</span> acc;\n                                }<span class=\"synError\">)</span>,\n                       <span class=\"synConstant\">&quot;integer number&quot;</span><span class=\"synError\">)</span>;\n}\n\ncbx::parser&lt;<span class=\"synType\">int</span>, stream_type&gt; factor() {\n  <span class=\"synStatement\">return</span> cbx::choice(\n      number(),\n      cbx::between(cbx::skip(cbx::token(<span class=\"synConstant\">'('</span>), cbx::spaces()),\n                   cbx::skip(cbx::token(<span class=\"synConstant\">')'</span>), cbx::spaces()),\n                   cbx::skip(cbx::lazy_fun(expression), cbx::spaces())));\n}\n\ncbx::parser&lt;<span class=\"synType\">int</span>, stream_type&gt; term() {\n  <span class=\"synType\">auto</span> op = cbx::map(\n      cbx::skip(cbx::choice(cbx::token(<span class=\"synConstant\">'*'</span>), cbx::token(<span class=\"synConstant\">'/'</span>)), cbx::spaces()),\n      [](<span class=\"synType\">auto</span> c) -&gt; std::function&lt;<span class=\"synType\">int</span>(<span class=\"synType\">int</span>, <span class=\"synType\">int</span>)&gt; <span class=\"synError\">{</span>\n        <span class=\"synStatement\">if</span> (c == <span class=\"synConstant\">'*'</span>) <span class=\"synError\">{</span>\n          <span class=\"synStatement\">return</span> std::multiplies&lt;<span class=\"synType\">int</span>&gt;();\n        <span class=\"synError\">}</span> <span class=\"synStatement\">else</span> <span class=\"synError\">{</span>\n          <span class=\"synStatement\">return</span> std::divides&lt;<span class=\"synType\">int</span>&gt;();\n        <span class=\"synError\">}</span>\n      }<span class=\"synError\">)</span>;\n  <span class=\"synStatement\">return</span> cbx::chainl1(cbx::skip(factor(), cbx::spaces()), op);\n}\n\ncbx::parser&lt;<span class=\"synType\">int</span>, stream_type&gt; expression() {\n  <span class=\"synType\">auto</span> op = cbx::map(\n      cbx::skip(cbx::choice(cbx::token(<span class=\"synConstant\">'+'</span>), cbx::token(<span class=\"synConstant\">'-'</span>)), cbx::spaces()),\n      [](<span class=\"synType\">auto</span> c) -&gt; std::function&lt;<span class=\"synType\">int</span>(<span class=\"synType\">int</span>, <span class=\"synType\">int</span>)&gt; <span class=\"synError\">{</span>\n        <span class=\"synStatement\">if</span> (c == <span class=\"synConstant\">'+'</span>) <span class=\"synError\">{</span>\n          <span class=\"synStatement\">return</span> std::plus&lt;<span class=\"synType\">int</span>&gt;();\n        <span class=\"synError\">}</span> <span class=\"synStatement\">else</span> <span class=\"synError\">{</span>\n          <span class=\"synStatement\">return</span> std::minus&lt;<span class=\"synType\">int</span>&gt;();\n        <span class=\"synError\">}</span>\n      }<span class=\"synError\">)</span>;\n  <span class=\"synStatement\">return</span> cbx::chainl1(cbx::skip(term(), cbx::spaces()), op);\n}\n\n<span class=\"synType\">int</span> main() {\n  std::string src;\n  std::getline(std::cin, src);\n  <span class=\"synType\">auto</span> n = number();\n  <span class=\"synType\">auto</span> stream = cbx::range_stream(src);\n  <span class=\"synType\">auto</span> <span class=\"synType\">const</span> parser = expression();\n  <span class=\"synStatement\">if</span> (<span class=\"synType\">auto</span> res = cbx::parse(parser, stream)) {\n    std::cout &lt;&lt; res.unwrap() &lt;&lt; std::endl;\n  } <span class=\"synStatement\">else</span> {\n    std::cout &lt;&lt; cbx::to_string(res.unwrap_error()) &lt;&lt; std::endl;\n  }\n}\n</pre>\n\n<h2>特徴</h2>\n\n<p>parsec を知っている方であれば読めるはずです...<br/>\n特徴としては，多くのパーサは入力ストリームの型に依存せずに作れるようになっていることです．例えば，あらゆる入力一つを受け付け消費する <code>any</code> というパーサは，入力が <code>char</code> のストリームであろうと <code>int</code> のストリームであろうとパースを実行できるようになっています．<br/>\n本来はエラーメッセージの爆発や読みづらさを防ぐために，すべてのパーサ自体にストリームの型をひも付けたかったのですが，そうすると，<code>any</code> を使うたびに，<code>any&lt;cbx::iterator_stream&lt;typename std::vector&lt;int&gt;::const_iterator&gt;&gt;()</code> とか <code>any&lt;cbx::iterator_stream&lt;std::string::const_iterator&gt;&gt;()</code> とかしなくてはなりません．これは <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a> や Rust と違って <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B7%BF%BF%E4%CF%C0\">型推論</a>が限定的であるためです．(<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a> や Rust では後でその値がどう使われているかも推論の根拠として使われます．)<br/>\nそこで，パーサ自体には入力ストリームの型を指定させずに，実際にパースする部分で初めて入力ストリームの型を検査することにしました．</p>\n\n<p>で，<code>cbx::parser&lt;int, stream_type&gt;</code> はパーサを type erasure を使ってラップします．普通に使っていると簡単に <code>cbx::expected&lt;cbx::map_parser&lt;cbx::many1_parser&lt;cbx::digit_parser&gt;, (lambda at ...)&gt;&gt;</code> 型とかが出てきます(<code>cbx::expected(cbx::map(cbx::many1(cbx::digit()), [](auto&amp;&amp;) {...}), \"integer number\")</code> の型です)<br/>\nこれを関数定義のたびに書くとか発狂してしまうので，type erasure を使って型をラップし短絡します．<br/>\nただしパフォーマンスの観点から行くとおそらく型をラップするために仮想関数を使ってしまうので，インライン展開等がきかなくなると思われます．まぁ仕方ないです．<br/>\nただ，型を膨らませすぎずに適度にラップしてやると，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>エラーの内容がかなり読みやすくなるはずです．なのでなんかわからんけどエラーになるっていうときは細かくパーサを分割してラップしてやると良いかもしれません．</p>\n\n<h2>まとめ</h2>\n\n<p>あまりにもドキュメントやコメント書かなすぎてひどいですが，ちょっと<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>したいとかっていうときに便利だと思います．<br/>\nBoost.Spirit と違って普通に <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> のプログラムとして書けます．(Boost.Spirit も <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> プログラムとして書けてはいるんですが，なんかあれはあれで別の言語を覚えているような気分になってしまったので...)</p>\n\n<p>あと PEG のプリミティブをまだ完全に実装していないと思います．先読みや否定先読みが出来ません．(実装します…)</p>\n\n---\n\n---\n","slug":"C++_でパーサコンビネータを書きました","title":"C++ でパーサコンビネータを書きました","timestamp":1461943809000,"tags":[]}}},"__N_SSG":true}