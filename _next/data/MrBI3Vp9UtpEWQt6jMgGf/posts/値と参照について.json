{"pageProps":{"post":{"content":"<p>「値」と「参照」という言葉があります。\nこのへんの言葉について、今の理解をまとめておこうと思います。\n言葉の定義や理解が誤っている部分があればご指摘ください。</p>\n<p>まず、前提として以下では、「値」ベースの言語として C, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>, Rust などを、「参照」ベースの言語として <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%23\">C#</a>, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a> などを想定しています。\n（もちろん言語によってはハイブリッドなものもあります: Crystal, Go, D, ...）</p>\n<h2>そもそも「値」「参照」とは</h2>\n<p>「値」は「実体」、「参照」は「実体へのポインタ」です。</p>\n<p><code>int</code> の配列みたいなものを考えてみます。\n<code>[1, 2, 3]</code> をメモリ上にどう表現できるでしょうか。</p>\n<p>配列ですから、単純にメモリ上のどこかに以下のような領域を作ればよさそうです。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>+---+\n| 1 |\n+---+\n| 2 |\n+---+\n| 3 |\n+---+</pre>\n<p>これが「値」であり配列の実体です。\nそして、実体の配置されたメモリ領域へのポインタが「参照」です。</p>\n<h2>スタック上の表現</h2>\n<p>さて、プログラム上ではこの配列のようなオブジェクトを、ローカル変数としてスタック上で表現したり、関数に引数として渡したりします。\nでは、スタック上での配列の表現はどうなっているのか考えてみます。</p>\n<p>ここで、「値」と「参照」という言葉が重要になります。</p>\n<p>「値」ベースな言語では、スタック上に</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>+---+\n| 1 |\n+---+\n| 2 |\n+---+\n| 3 |\n+---+</pre>\n<p>をそのままべたっと配置します。</p>\n<p>一方で、「参照」ベースな言語では、ヒープ上に</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>+---+\n| 1 |\n+---+\n| 2 |\n+---+\n| 3 |\n+---+</pre>\n<p>を配置し、スタック上では実体へのポインタという表現になります。\n（必ずしもヒープに置くとは限らない？処理系や最適化によってはスタックに置くこともありえる？とにかくローカル変数などの表現としては実体へのポインタという形をとるということ）</p>\n<h2>値渡し・参照渡し</h2>\n<p>値渡しとか参照渡しという言葉があります。</p>\n<p>以下に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B5%BC%BB%F7%A5%B3%A1%BC%A5%C9\">擬似コード</a>を一つ書いてみます。（C 風に書いていますが C ではないと思ってください）</p>\n<pre class=\"code lang-c\" data-lang=\"c\" data-unlink><span class=\"synType\">void</span> inc_age(Person p) {\n  p.age++;\n}\n\nPerson john = Person { <span class=\"synConstant\">&quot;john&quot;</span>, <span class=\"synConstant\">20</span> };\ninc_age(john);\nprint(john.age); <span class=\"synComment\">// =&gt; ??</span>\n</pre>\n<p>このコード、処理系が「値」ベースか「参照」ベースかで結果が異なります。</p>\n<h4>「値」ベースの場合</h4>\n<p>値ベースの言語の場合、<code>inc_age</code> の引数に <code>john</code> を渡した時には、<code>inc_age</code> 内のローカル変数（引数） <code>p</code> のために、<code>john</code> のコピーが作られます。<br/>\n<code>inc_age</code> 内で <code>p.age++</code> としていますが、<code>p</code> は <code>john</code> のコピーであって <code>john</code> ではありませんから、<code>inc_age</code> から戻ってきて <code>john.age</code> を参照しても 20 のまま変化が無いはずです。</p>\n<p>したがって結果として <code>20</code> が出力されます。</p>\n<h4>「参照」ベースの場合</h4>\n<p>参照ベースの言語の場合、<code>john</code> 変数のメモリ上での表現は、ヒープに置かれた <code>Person { \"john\", 20 }</code> というオブジェクトへのポインタになります。<br/>\n<code>inc_age</code> にこれを引数として渡すと、ポインタの値がコピーされますから、<code>p</code> と <code>john</code> は同じオブジェクトを参照しているポインタになります。<br/>\n<code>p.age++</code> とすると <code>p</code> が参照するオブジェクトが変更されます。これは <code>john</code> が参照するオブジェクトと同一ですから、<code>john.age</code> も 21 に変化します。</p>\n<p>したがって結果として <code>21</code> が出力されます。</p>\n<h3>C の場合</h3>\n<p>C の場合、ポインタが直接表現できますから、参照渡しの挙動を模倣することができます。</p>\n<pre class=\"code lang-c\" data-lang=\"c\" data-unlink><span class=\"synType\">void</span> inc_age(Person *p) {\n    p-&gt;age++;\n}\n\nPerson john = Person { <span class=\"synConstant\">&quot;john&quot;</span>, <span class=\"synConstant\">20</span> };\ninc_age(&amp;john);\nprint(john.age); <span class=\"synComment\">// =&gt; 21</span>\n</pre>\n<p><code>p</code> が <code>Person*</code> 型であること、そして <code>inc_age</code> に <code>john</code> のアドレスを渡していることに注目してください。\nこの場合、<code>p</code> は <code>john</code> を参照するポインタですから、結果は <code>21</code> になります。</p>\n<h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> の場合</h3>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> の場合、言語機能として「参照渡し」という機能があります。</p>\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">void</span> inc_age(Person&amp; p) {\n    p.age++;\n}\n\nPerson john = Person { <span class=\"synConstant\">&quot;john&quot;</span>, <span class=\"synConstant\">20</span> };\ninc_age(john);\nprint(john.age); <span class=\"synComment\">// =&gt; 21</span>\n</pre>\n<p><code>p</code> が <code>Person&amp;</code> 型であること、<code>inc_age</code> には <code>john</code> をそのまま渡しているように見えることに注目してください。\nこれは <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> の提供する機能で、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>すると、<code>Person&amp;</code> は実質 <code>Person*</code> と同じ表現になります。\n<code>p-&gt;age</code> ではなく <code>p.age</code> と書けること、<code>&amp;john</code> ではなく <code>john</code> のままで参照渡しが実現できるようになっています。\n単純なポインタを使っても同じことが出来ますが、ポインタと違って <code>nullptr</code> になることがないという特徴があります。</p>\n<h2>参照のハマりやすい点</h2>\n<p>個人的に参照ベースの言語でハマりやすいなと感じるのは以下のようなコードです。</p>\n<pre class=\"code lang-java\" data-lang=\"java\" data-unlink><span class=\"synType\">void</span> some_function(Person p) {\n    p.age++;\n    p = <span class=\"synStatement\">new</span> Person(<span class=\"synConstant\">&quot;bob&quot;</span>, <span class=\"synConstant\">30</span>);\n}\n\nPerson p = <span class=\"synStatement\">new</span> Person(<span class=\"synConstant\">&quot;john&quot;</span>, <span class=\"synConstant\">20</span>);\nsome_function(p);\nprintln(p.name); <span class=\"synComment\">// =&gt; john</span>\nprintln(p.age); <span class=\"synComment\">// =&gt; 21</span>\n</pre>\n<p><code>p.age++</code> の部分は呼び出し元のオブジェクトに反映されるのに、<code>p = new Person(...)</code> の部分はなんで反映されないの！ってなります。（なりません？）\n本質的にポインタの値渡しにすぎないんだということを理解していればまぁ納得なのですが...</p>\n<p>（ちなみに <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> や D の参照渡しだと <code>p = new Person(...)</code> 的なコードも呼び出し元に反映されます。）</p>\n<h2>値のハマりやすい点</h2>\n<p>ハマりやすいというか、気がつかないままパフォーマンスが悪くなりやすいのが値ベースの言語の弱点でしょう。</p>\n<pre class=\"code lang-c\" data-lang=\"c\" data-unlink><span class=\"synType\">void</span> print_object(HugeObject obj) {\n   printf(<span class=\"synConstant\">&quot;</span><span class=\"synSpecial\">%s\\n</span><span class=\"synConstant\">&quot;</span>, obj.name);\n}\nHugeObject obj = ...;\nprint_object(obj);\n</pre>\n<p>このようなコードを書くと、ただ名前を表示するだけの関数が激重になる可能性があります。\n値ベースの言語では、引数として値を渡すとまるっとそのコピーをつくりますから、不要にもかかわらず巨大な値のコピーを作ってしまいます。</p>\n<h2>まとめ</h2>\n<p>「ムーブセマンティクス」とか「immutable と参照」とかについてまとめようと思ったのですが、前提として「値」「参照」についてまとめていないと書きにくいなと思ったのでまとめておきました。</p>\n<p>内部表現を知ることでハマりやすい点の回避にもつながると思うので、この辺はきちんと理解しておきたいです。</p>\n<hr>\n<hr>\n","meta":{"rawMarkdown":"---\ntitle: \"値と参照について\"\ndate: 2016-08-14T04:56:32.000Z\ntags: []\n---\n\n<p>「値」と「参照」という言葉があります。\nこのへんの言葉について、今の理解をまとめておこうと思います。\n言葉の定義や理解が誤っている部分があればご指摘ください。</p>\n\n<p>まず、前提として以下では、「値」ベースの言語として C, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>, Rust などを、「参照」ベースの言語として <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%23\">C#</a>, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a> などを想定しています。\n（もちろん言語によってはハイブリッドなものもあります: Crystal, Go, D, ...）</p>\n\n<h2>そもそも「値」「参照」とは</h2>\n\n<p>「値」は「実体」、「参照」は「実体へのポインタ」です。</p>\n\n<p><code>int</code> の配列みたいなものを考えてみます。\n<code>[1, 2, 3]</code> をメモリ上にどう表現できるでしょうか。</p>\n\n<p>配列ですから、単純にメモリ上のどこかに以下のような領域を作ればよさそうです。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>+---+\n| 1 |\n+---+\n| 2 |\n+---+\n| 3 |\n+---+</pre>\n\n<p>これが「値」であり配列の実体です。\nそして、実体の配置されたメモリ領域へのポインタが「参照」です。</p>\n\n<h2>スタック上の表現</h2>\n\n<p>さて、プログラム上ではこの配列のようなオブジェクトを、ローカル変数としてスタック上で表現したり、関数に引数として渡したりします。\nでは、スタック上での配列の表現はどうなっているのか考えてみます。</p>\n\n<p>ここで、「値」と「参照」という言葉が重要になります。</p>\n\n<p>「値」ベースな言語では、スタック上に</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>+---+\n| 1 |\n+---+\n| 2 |\n+---+\n| 3 |\n+---+</pre>\n\n<p>をそのままべたっと配置します。</p>\n\n<p>一方で、「参照」ベースな言語では、ヒープ上に</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>+---+\n| 1 |\n+---+\n| 2 |\n+---+\n| 3 |\n+---+</pre>\n\n<p>を配置し、スタック上では実体へのポインタという表現になります。\n（必ずしもヒープに置くとは限らない？処理系や最適化によってはスタックに置くこともありえる？とにかくローカル変数などの表現としては実体へのポインタという形をとるということ）</p>\n\n<h2>値渡し・参照渡し</h2>\n\n<p>値渡しとか参照渡しという言葉があります。</p>\n\n<p>以下に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B5%BC%BB%F7%A5%B3%A1%BC%A5%C9\">擬似コード</a>を一つ書いてみます。（C 風に書いていますが C ではないと思ってください）</p>\n\n<pre class=\"code lang-c\" data-lang=\"c\" data-unlink><span class=\"synType\">void</span> inc_age(Person p) {\n  p.age++;\n}\n\nPerson john = Person { <span class=\"synConstant\">&quot;john&quot;</span>, <span class=\"synConstant\">20</span> };\ninc_age(john);\nprint(john.age); <span class=\"synComment\">// =&gt; ??</span>\n</pre>\n\n<p>このコード、処理系が「値」ベースか「参照」ベースかで結果が異なります。</p>\n\n<h4>「値」ベースの場合</h4>\n\n<p>値ベースの言語の場合、<code>inc_age</code> の引数に <code>john</code> を渡した時には、<code>inc_age</code> 内のローカル変数（引数） <code>p</code> のために、<code>john</code> のコピーが作られます。<br/>\n<code>inc_age</code> 内で <code>p.age++</code> としていますが、<code>p</code> は <code>john</code> のコピーであって <code>john</code> ではありませんから、<code>inc_age</code> から戻ってきて <code>john.age</code> を参照しても 20 のまま変化が無いはずです。</p>\n\n<p>したがって結果として <code>20</code> が出力されます。</p>\n\n<h4>「参照」ベースの場合</h4>\n\n<p>参照ベースの言語の場合、<code>john</code> 変数のメモリ上での表現は、ヒープに置かれた <code>Person { \"john\", 20 }</code> というオブジェクトへのポインタになります。<br/>\n<code>inc_age</code> にこれを引数として渡すと、ポインタの値がコピーされますから、<code>p</code> と <code>john</code> は同じオブジェクトを参照しているポインタになります。<br/>\n<code>p.age++</code> とすると <code>p</code> が参照するオブジェクトが変更されます。これは <code>john</code> が参照するオブジェクトと同一ですから、<code>john.age</code> も 21 に変化します。</p>\n\n<p>したがって結果として <code>21</code> が出力されます。</p>\n\n<h3>C の場合</h3>\n\n<p>C の場合、ポインタが直接表現できますから、参照渡しの挙動を模倣することができます。</p>\n\n<pre class=\"code lang-c\" data-lang=\"c\" data-unlink><span class=\"synType\">void</span> inc_age(Person *p) {\n    p-&gt;age++;\n}\n\nPerson john = Person { <span class=\"synConstant\">&quot;john&quot;</span>, <span class=\"synConstant\">20</span> };\ninc_age(&amp;john);\nprint(john.age); <span class=\"synComment\">// =&gt; 21</span>\n</pre>\n\n<p><code>p</code> が <code>Person*</code> 型であること、そして <code>inc_age</code> に <code>john</code> のアドレスを渡していることに注目してください。\nこの場合、<code>p</code> は <code>john</code> を参照するポインタですから、結果は <code>21</code> になります。</p>\n\n<h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> の場合</h3>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> の場合、言語機能として「参照渡し」という機能があります。</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">void</span> inc_age(Person&amp; p) {\n    p.age++;\n}\n\nPerson john = Person { <span class=\"synConstant\">&quot;john&quot;</span>, <span class=\"synConstant\">20</span> };\ninc_age(john);\nprint(john.age); <span class=\"synComment\">// =&gt; 21</span>\n</pre>\n\n<p><code>p</code> が <code>Person&amp;</code> 型であること、<code>inc_age</code> には <code>john</code> をそのまま渡しているように見えることに注目してください。\nこれは <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> の提供する機能で、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>すると、<code>Person&amp;</code> は実質 <code>Person*</code> と同じ表現になります。\n<code>p-&gt;age</code> ではなく <code>p.age</code> と書けること、<code>&amp;john</code> ではなく <code>john</code> のままで参照渡しが実現できるようになっています。\n単純なポインタを使っても同じことが出来ますが、ポインタと違って <code>nullptr</code> になることがないという特徴があります。</p>\n\n<h2>参照のハマりやすい点</h2>\n\n<p>個人的に参照ベースの言語でハマりやすいなと感じるのは以下のようなコードです。</p>\n\n<pre class=\"code lang-java\" data-lang=\"java\" data-unlink><span class=\"synType\">void</span> some_function(Person p) {\n    p.age++;\n    p = <span class=\"synStatement\">new</span> Person(<span class=\"synConstant\">&quot;bob&quot;</span>, <span class=\"synConstant\">30</span>);\n}\n\nPerson p = <span class=\"synStatement\">new</span> Person(<span class=\"synConstant\">&quot;john&quot;</span>, <span class=\"synConstant\">20</span>);\nsome_function(p);\nprintln(p.name); <span class=\"synComment\">// =&gt; john</span>\nprintln(p.age); <span class=\"synComment\">// =&gt; 21</span>\n</pre>\n\n<p><code>p.age++</code> の部分は呼び出し元のオブジェクトに反映されるのに、<code>p = new Person(...)</code> の部分はなんで反映されないの！ってなります。（なりません？）\n本質的にポインタの値渡しにすぎないんだということを理解していればまぁ納得なのですが...</p>\n\n<p>（ちなみに <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> や D の参照渡しだと <code>p = new Person(...)</code> 的なコードも呼び出し元に反映されます。）</p>\n\n<h2>値のハマりやすい点</h2>\n\n<p>ハマりやすいというか、気がつかないままパフォーマンスが悪くなりやすいのが値ベースの言語の弱点でしょう。</p>\n\n<pre class=\"code lang-c\" data-lang=\"c\" data-unlink><span class=\"synType\">void</span> print_object(HugeObject obj) {\n   printf(<span class=\"synConstant\">&quot;</span><span class=\"synSpecial\">%s\\n</span><span class=\"synConstant\">&quot;</span>, obj.name);\n}\nHugeObject obj = ...;\nprint_object(obj);\n</pre>\n\n<p>このようなコードを書くと、ただ名前を表示するだけの関数が激重になる可能性があります。\n値ベースの言語では、引数として値を渡すとまるっとそのコピーをつくりますから、不要にもかかわらず巨大な値のコピーを作ってしまいます。</p>\n\n<h2>まとめ</h2>\n\n<p>「ムーブセマンティクス」とか「immutable と参照」とかについてまとめようと思ったのですが、前提として「値」「参照」についてまとめていないと書きにくいなと思ったのでまとめておきました。</p>\n\n<p>内部表現を知ることでハマりやすい点の回避にもつながると思うので、この辺はきちんと理解しておきたいです。</p>\n\n---\n\n---\n","contentMarkdown":"\n<p>「値」と「参照」という言葉があります。\nこのへんの言葉について、今の理解をまとめておこうと思います。\n言葉の定義や理解が誤っている部分があればご指摘ください。</p>\n\n<p>まず、前提として以下では、「値」ベースの言語として C, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>, Rust などを、「参照」ベースの言語として <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%23\">C#</a>, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a> などを想定しています。\n（もちろん言語によってはハイブリッドなものもあります: Crystal, Go, D, ...）</p>\n\n<h2>そもそも「値」「参照」とは</h2>\n\n<p>「値」は「実体」、「参照」は「実体へのポインタ」です。</p>\n\n<p><code>int</code> の配列みたいなものを考えてみます。\n<code>[1, 2, 3]</code> をメモリ上にどう表現できるでしょうか。</p>\n\n<p>配列ですから、単純にメモリ上のどこかに以下のような領域を作ればよさそうです。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>+---+\n| 1 |\n+---+\n| 2 |\n+---+\n| 3 |\n+---+</pre>\n\n<p>これが「値」であり配列の実体です。\nそして、実体の配置されたメモリ領域へのポインタが「参照」です。</p>\n\n<h2>スタック上の表現</h2>\n\n<p>さて、プログラム上ではこの配列のようなオブジェクトを、ローカル変数としてスタック上で表現したり、関数に引数として渡したりします。\nでは、スタック上での配列の表現はどうなっているのか考えてみます。</p>\n\n<p>ここで、「値」と「参照」という言葉が重要になります。</p>\n\n<p>「値」ベースな言語では、スタック上に</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>+---+\n| 1 |\n+---+\n| 2 |\n+---+\n| 3 |\n+---+</pre>\n\n<p>をそのままべたっと配置します。</p>\n\n<p>一方で、「参照」ベースな言語では、ヒープ上に</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>+---+\n| 1 |\n+---+\n| 2 |\n+---+\n| 3 |\n+---+</pre>\n\n<p>を配置し、スタック上では実体へのポインタという表現になります。\n（必ずしもヒープに置くとは限らない？処理系や最適化によってはスタックに置くこともありえる？とにかくローカル変数などの表現としては実体へのポインタという形をとるということ）</p>\n\n<h2>値渡し・参照渡し</h2>\n\n<p>値渡しとか参照渡しという言葉があります。</p>\n\n<p>以下に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B5%BC%BB%F7%A5%B3%A1%BC%A5%C9\">擬似コード</a>を一つ書いてみます。（C 風に書いていますが C ではないと思ってください）</p>\n\n<pre class=\"code lang-c\" data-lang=\"c\" data-unlink><span class=\"synType\">void</span> inc_age(Person p) {\n  p.age++;\n}\n\nPerson john = Person { <span class=\"synConstant\">&quot;john&quot;</span>, <span class=\"synConstant\">20</span> };\ninc_age(john);\nprint(john.age); <span class=\"synComment\">// =&gt; ??</span>\n</pre>\n\n<p>このコード、処理系が「値」ベースか「参照」ベースかで結果が異なります。</p>\n\n<h4>「値」ベースの場合</h4>\n\n<p>値ベースの言語の場合、<code>inc_age</code> の引数に <code>john</code> を渡した時には、<code>inc_age</code> 内のローカル変数（引数） <code>p</code> のために、<code>john</code> のコピーが作られます。<br/>\n<code>inc_age</code> 内で <code>p.age++</code> としていますが、<code>p</code> は <code>john</code> のコピーであって <code>john</code> ではありませんから、<code>inc_age</code> から戻ってきて <code>john.age</code> を参照しても 20 のまま変化が無いはずです。</p>\n\n<p>したがって結果として <code>20</code> が出力されます。</p>\n\n<h4>「参照」ベースの場合</h4>\n\n<p>参照ベースの言語の場合、<code>john</code> 変数のメモリ上での表現は、ヒープに置かれた <code>Person { \"john\", 20 }</code> というオブジェクトへのポインタになります。<br/>\n<code>inc_age</code> にこれを引数として渡すと、ポインタの値がコピーされますから、<code>p</code> と <code>john</code> は同じオブジェクトを参照しているポインタになります。<br/>\n<code>p.age++</code> とすると <code>p</code> が参照するオブジェクトが変更されます。これは <code>john</code> が参照するオブジェクトと同一ですから、<code>john.age</code> も 21 に変化します。</p>\n\n<p>したがって結果として <code>21</code> が出力されます。</p>\n\n<h3>C の場合</h3>\n\n<p>C の場合、ポインタが直接表現できますから、参照渡しの挙動を模倣することができます。</p>\n\n<pre class=\"code lang-c\" data-lang=\"c\" data-unlink><span class=\"synType\">void</span> inc_age(Person *p) {\n    p-&gt;age++;\n}\n\nPerson john = Person { <span class=\"synConstant\">&quot;john&quot;</span>, <span class=\"synConstant\">20</span> };\ninc_age(&amp;john);\nprint(john.age); <span class=\"synComment\">// =&gt; 21</span>\n</pre>\n\n<p><code>p</code> が <code>Person*</code> 型であること、そして <code>inc_age</code> に <code>john</code> のアドレスを渡していることに注目してください。\nこの場合、<code>p</code> は <code>john</code> を参照するポインタですから、結果は <code>21</code> になります。</p>\n\n<h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> の場合</h3>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> の場合、言語機能として「参照渡し」という機能があります。</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">void</span> inc_age(Person&amp; p) {\n    p.age++;\n}\n\nPerson john = Person { <span class=\"synConstant\">&quot;john&quot;</span>, <span class=\"synConstant\">20</span> };\ninc_age(john);\nprint(john.age); <span class=\"synComment\">// =&gt; 21</span>\n</pre>\n\n<p><code>p</code> が <code>Person&amp;</code> 型であること、<code>inc_age</code> には <code>john</code> をそのまま渡しているように見えることに注目してください。\nこれは <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> の提供する機能で、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>すると、<code>Person&amp;</code> は実質 <code>Person*</code> と同じ表現になります。\n<code>p-&gt;age</code> ではなく <code>p.age</code> と書けること、<code>&amp;john</code> ではなく <code>john</code> のままで参照渡しが実現できるようになっています。\n単純なポインタを使っても同じことが出来ますが、ポインタと違って <code>nullptr</code> になることがないという特徴があります。</p>\n\n<h2>参照のハマりやすい点</h2>\n\n<p>個人的に参照ベースの言語でハマりやすいなと感じるのは以下のようなコードです。</p>\n\n<pre class=\"code lang-java\" data-lang=\"java\" data-unlink><span class=\"synType\">void</span> some_function(Person p) {\n    p.age++;\n    p = <span class=\"synStatement\">new</span> Person(<span class=\"synConstant\">&quot;bob&quot;</span>, <span class=\"synConstant\">30</span>);\n}\n\nPerson p = <span class=\"synStatement\">new</span> Person(<span class=\"synConstant\">&quot;john&quot;</span>, <span class=\"synConstant\">20</span>);\nsome_function(p);\nprintln(p.name); <span class=\"synComment\">// =&gt; john</span>\nprintln(p.age); <span class=\"synComment\">// =&gt; 21</span>\n</pre>\n\n<p><code>p.age++</code> の部分は呼び出し元のオブジェクトに反映されるのに、<code>p = new Person(...)</code> の部分はなんで反映されないの！ってなります。（なりません？）\n本質的にポインタの値渡しにすぎないんだということを理解していればまぁ納得なのですが...</p>\n\n<p>（ちなみに <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> や D の参照渡しだと <code>p = new Person(...)</code> 的なコードも呼び出し元に反映されます。）</p>\n\n<h2>値のハマりやすい点</h2>\n\n<p>ハマりやすいというか、気がつかないままパフォーマンスが悪くなりやすいのが値ベースの言語の弱点でしょう。</p>\n\n<pre class=\"code lang-c\" data-lang=\"c\" data-unlink><span class=\"synType\">void</span> print_object(HugeObject obj) {\n   printf(<span class=\"synConstant\">&quot;</span><span class=\"synSpecial\">%s\\n</span><span class=\"synConstant\">&quot;</span>, obj.name);\n}\nHugeObject obj = ...;\nprint_object(obj);\n</pre>\n\n<p>このようなコードを書くと、ただ名前を表示するだけの関数が激重になる可能性があります。\n値ベースの言語では、引数として値を渡すとまるっとそのコピーをつくりますから、不要にもかかわらず巨大な値のコピーを作ってしまいます。</p>\n\n<h2>まとめ</h2>\n\n<p>「ムーブセマンティクス」とか「immutable と参照」とかについてまとめようと思ったのですが、前提として「値」「参照」についてまとめていないと書きにくいなと思ったのでまとめておきました。</p>\n\n<p>内部表現を知ることでハマりやすい点の回避にもつながると思うので、この辺はきちんと理解しておきたいです。</p>\n\n---\n\n---\n","slug":"値と参照について","title":"値と参照について","timestamp":1471150592000,"tags":[]}}},"__N_SSG":true}