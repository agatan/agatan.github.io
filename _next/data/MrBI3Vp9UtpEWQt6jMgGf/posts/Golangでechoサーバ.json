{"pageProps":{"post":{"content":"<p>最近 <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/golang\">golang</a> が気になります<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/golang\">golang</a> の特徴はもはやわざわざここに書くまでも無いことだと思うので書きませんが, 気になっている理由を書いてみます.</p>\n<ul>\n<li>バイナリ(しかもポータビリティが非常に高いバイナリ)に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>されること</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C/C%2B%2B\">C/C++</a> には及ばずとも実行が非常に速いこと</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C/C%2B%2B\">C/C++</a> ほど低レイヤーいじり放題なわけではないが, ある程度低レイヤーまで降りていけること</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%DE%A5%F3%A5%C9%A5%E9%A5%A4%A5%F3\">コマンドライン</a><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB\">ツール</a>からWeb アプリケーションのような高レイヤーまで十分得意であること</li>\n<li><code>interface</code> による抽象化が, 過度でなく調度良く感じられること</li>\n</ul>\n<p>こんな感じでしょうか.<br/>\nCompiled <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Python\">Python</a> っていう感じが非常に良さそうだなーと思っています.</p>\n<p>というわけで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>に引き続き <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/golang\">golang</a> でも echo サーバを書いてみました</p>\n<pre class=\"code lang-go\" data-lang=\"go\" data-unlink><span class=\"synStatement\">package</span> main\n\n<span class=\"synStatement\">import</span> (\n    <span class=\"synConstant\">&quot;fmt&quot;</span>\n    <span class=\"synConstant\">&quot;io&quot;</span>\n    <span class=\"synConstant\">&quot;net&quot;</span>\n)\n\n<span class=\"synStatement\">func</span> main() {\n    listener, err := net.Listen(<span class=\"synConstant\">&quot;tcp&quot;</span>, <span class=\"synConstant\">&quot;:8080&quot;</span>)\n    <span class=\"synStatement\">if</span> err != <span class=\"synStatement\">nil</span> {\n        <span class=\"synStatement\">panic</span>(err)\n    }\n    <span class=\"synStatement\">for</span> {\n        conn, err := listener.Accept()\n        <span class=\"synStatement\">if</span> err != <span class=\"synStatement\">nil</span> {\n            <span class=\"synStatement\">panic</span>(err)\n        }\n        <span class=\"synStatement\">go</span> <span class=\"synType\">func</span>(conn net.Conn) {\n            <span class=\"synStatement\">defer</span> conn.Close()\n            echo(conn)\n        }(conn)\n    }\n}\n\n<span class=\"synStatement\">func</span> echo(conn net.Conn) {\n    buf := <span class=\"synStatement\">make</span>([]<span class=\"synType\">byte</span>, <span class=\"synConstant\">256</span>)\n    <span class=\"synStatement\">for</span> {\n        n, err := conn.Read(buf)\n        <span class=\"synStatement\">if</span> err != <span class=\"synStatement\">nil</span> {\n            <span class=\"synStatement\">if</span> err == io.EOF {\n                <span class=\"synStatement\">break</span>\n            }\n            <span class=\"synStatement\">panic</span>(err)\n        }\n        <span class=\"synStatement\">if</span> n == <span class=\"synConstant\">0</span> {\n            <span class=\"synStatement\">break</span>\n        }\n        wn, err := conn.Write(buf[<span class=\"synConstant\">0</span>:n])\n        <span class=\"synStatement\">if</span> err != <span class=\"synStatement\">nil</span> {\n            <span class=\"synStatement\">panic</span>(err)\n        }\n        <span class=\"synStatement\">if</span> wn != n {\n            <span class=\"synStatement\">panic</span>(fmt.Errorf(<span class=\"synConstant\">&quot;could not send all data&quot;</span>))\n        }\n    }\n}\n</pre>\n<p>さすがは <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/golang\">golang</a> というかなんというか. ものすごく普通な空気を感じますね.<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/golang\">golang</a>はこういう普通さが売りの１つだと思っています.</p>\n<hr>\n<hr>\n","meta":{"rawMarkdown":"---\ntitle: \"Golangでechoサーバ\"\ndate: 2015-09-08T07:14:10.000Z\ntags: []\n---\n\n<p>最近 <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/golang\">golang</a> が気になります<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/golang\">golang</a> の特徴はもはやわざわざここに書くまでも無いことだと思うので書きませんが, 気になっている理由を書いてみます.</p>\n\n<ul>\n<li>バイナリ(しかもポータビリティが非常に高いバイナリ)に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>されること</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C/C%2B%2B\">C/C++</a> には及ばずとも実行が非常に速いこと</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C/C%2B%2B\">C/C++</a> ほど低レイヤーいじり放題なわけではないが, ある程度低レイヤーまで降りていけること</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%DE%A5%F3%A5%C9%A5%E9%A5%A4%A5%F3\">コマンドライン</a><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB\">ツール</a>からWeb アプリケーションのような高レイヤーまで十分得意であること</li>\n<li><code>interface</code> による抽象化が, 過度でなく調度良く感じられること</li>\n</ul>\n\n<p>こんな感じでしょうか.<br/>\nCompiled <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Python\">Python</a> っていう感じが非常に良さそうだなーと思っています.</p>\n\n<p>というわけで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>に引き続き <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/golang\">golang</a> でも echo サーバを書いてみました</p>\n\n<pre class=\"code lang-go\" data-lang=\"go\" data-unlink><span class=\"synStatement\">package</span> main\n\n<span class=\"synStatement\">import</span> (\n    <span class=\"synConstant\">&quot;fmt&quot;</span>\n    <span class=\"synConstant\">&quot;io&quot;</span>\n    <span class=\"synConstant\">&quot;net&quot;</span>\n)\n\n<span class=\"synStatement\">func</span> main() {\n    listener, err := net.Listen(<span class=\"synConstant\">&quot;tcp&quot;</span>, <span class=\"synConstant\">&quot;:8080&quot;</span>)\n    <span class=\"synStatement\">if</span> err != <span class=\"synStatement\">nil</span> {\n        <span class=\"synStatement\">panic</span>(err)\n    }\n    <span class=\"synStatement\">for</span> {\n        conn, err := listener.Accept()\n        <span class=\"synStatement\">if</span> err != <span class=\"synStatement\">nil</span> {\n            <span class=\"synStatement\">panic</span>(err)\n        }\n        <span class=\"synStatement\">go</span> <span class=\"synType\">func</span>(conn net.Conn) {\n            <span class=\"synStatement\">defer</span> conn.Close()\n            echo(conn)\n        }(conn)\n    }\n}\n\n<span class=\"synStatement\">func</span> echo(conn net.Conn) {\n    buf := <span class=\"synStatement\">make</span>([]<span class=\"synType\">byte</span>, <span class=\"synConstant\">256</span>)\n    <span class=\"synStatement\">for</span> {\n        n, err := conn.Read(buf)\n        <span class=\"synStatement\">if</span> err != <span class=\"synStatement\">nil</span> {\n            <span class=\"synStatement\">if</span> err == io.EOF {\n                <span class=\"synStatement\">break</span>\n            }\n            <span class=\"synStatement\">panic</span>(err)\n        }\n        <span class=\"synStatement\">if</span> n == <span class=\"synConstant\">0</span> {\n            <span class=\"synStatement\">break</span>\n        }\n        wn, err := conn.Write(buf[<span class=\"synConstant\">0</span>:n])\n        <span class=\"synStatement\">if</span> err != <span class=\"synStatement\">nil</span> {\n            <span class=\"synStatement\">panic</span>(err)\n        }\n        <span class=\"synStatement\">if</span> wn != n {\n            <span class=\"synStatement\">panic</span>(fmt.Errorf(<span class=\"synConstant\">&quot;could not send all data&quot;</span>))\n        }\n    }\n}\n</pre>\n\n<p>さすがは <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/golang\">golang</a> というかなんというか. ものすごく普通な空気を感じますね.<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/golang\">golang</a>はこういう普通さが売りの１つだと思っています.</p>\n\n---\n\n---\n","contentMarkdown":"\n<p>最近 <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/golang\">golang</a> が気になります<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/golang\">golang</a> の特徴はもはやわざわざここに書くまでも無いことだと思うので書きませんが, 気になっている理由を書いてみます.</p>\n\n<ul>\n<li>バイナリ(しかもポータビリティが非常に高いバイナリ)に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>されること</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C/C%2B%2B\">C/C++</a> には及ばずとも実行が非常に速いこと</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C/C%2B%2B\">C/C++</a> ほど低レイヤーいじり放題なわけではないが, ある程度低レイヤーまで降りていけること</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%DE%A5%F3%A5%C9%A5%E9%A5%A4%A5%F3\">コマンドライン</a><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB\">ツール</a>からWeb アプリケーションのような高レイヤーまで十分得意であること</li>\n<li><code>interface</code> による抽象化が, 過度でなく調度良く感じられること</li>\n</ul>\n\n<p>こんな感じでしょうか.<br/>\nCompiled <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Python\">Python</a> っていう感じが非常に良さそうだなーと思っています.</p>\n\n<p>というわけで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>に引き続き <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/golang\">golang</a> でも echo サーバを書いてみました</p>\n\n<pre class=\"code lang-go\" data-lang=\"go\" data-unlink><span class=\"synStatement\">package</span> main\n\n<span class=\"synStatement\">import</span> (\n    <span class=\"synConstant\">&quot;fmt&quot;</span>\n    <span class=\"synConstant\">&quot;io&quot;</span>\n    <span class=\"synConstant\">&quot;net&quot;</span>\n)\n\n<span class=\"synStatement\">func</span> main() {\n    listener, err := net.Listen(<span class=\"synConstant\">&quot;tcp&quot;</span>, <span class=\"synConstant\">&quot;:8080&quot;</span>)\n    <span class=\"synStatement\">if</span> err != <span class=\"synStatement\">nil</span> {\n        <span class=\"synStatement\">panic</span>(err)\n    }\n    <span class=\"synStatement\">for</span> {\n        conn, err := listener.Accept()\n        <span class=\"synStatement\">if</span> err != <span class=\"synStatement\">nil</span> {\n            <span class=\"synStatement\">panic</span>(err)\n        }\n        <span class=\"synStatement\">go</span> <span class=\"synType\">func</span>(conn net.Conn) {\n            <span class=\"synStatement\">defer</span> conn.Close()\n            echo(conn)\n        }(conn)\n    }\n}\n\n<span class=\"synStatement\">func</span> echo(conn net.Conn) {\n    buf := <span class=\"synStatement\">make</span>([]<span class=\"synType\">byte</span>, <span class=\"synConstant\">256</span>)\n    <span class=\"synStatement\">for</span> {\n        n, err := conn.Read(buf)\n        <span class=\"synStatement\">if</span> err != <span class=\"synStatement\">nil</span> {\n            <span class=\"synStatement\">if</span> err == io.EOF {\n                <span class=\"synStatement\">break</span>\n            }\n            <span class=\"synStatement\">panic</span>(err)\n        }\n        <span class=\"synStatement\">if</span> n == <span class=\"synConstant\">0</span> {\n            <span class=\"synStatement\">break</span>\n        }\n        wn, err := conn.Write(buf[<span class=\"synConstant\">0</span>:n])\n        <span class=\"synStatement\">if</span> err != <span class=\"synStatement\">nil</span> {\n            <span class=\"synStatement\">panic</span>(err)\n        }\n        <span class=\"synStatement\">if</span> wn != n {\n            <span class=\"synStatement\">panic</span>(fmt.Errorf(<span class=\"synConstant\">&quot;could not send all data&quot;</span>))\n        }\n    }\n}\n</pre>\n\n<p>さすがは <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/golang\">golang</a> というかなんというか. ものすごく普通な空気を感じますね.<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/golang\">golang</a>はこういう普通さが売りの１つだと思っています.</p>\n\n---\n\n---\n","slug":"Golangでechoサーバ","title":"Golangでechoサーバ","timestamp":1441696450000,"tags":[]}}},"__N_SSG":true}