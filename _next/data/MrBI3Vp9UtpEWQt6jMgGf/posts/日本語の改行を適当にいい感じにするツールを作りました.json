{"pageProps":{"post":{"content":"<p>必要に迫られて、HTML ページ内の改行位置をいい感じにするツールを作ってみました。</p>\n<p><iframe src=\"//hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fagatan%2Fjapawrap\" title=\"agatan/japawrap\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://github.com/agatan/japawrap\">github.com</a></cite></p>\n<p>HTMLに長文を書くと、親 DOM のサイズの制約上、適宜改行がぶちこまれます。\nしかし、改行位置は文節を考慮などせずにごりっと挿入されるので、多くの問題が生じることが報告されています。\n最も有名な問題として、今すぐダウンロー<br>\nド問題が挙げられます。</p>\n<p><code>japawrap</code> を使うと、それっぽく日本語を解釈して <code>&lt;span&gt;</code> でくくるみたいなことができます。<code>inline-block</code> を適用すれば改行がそれっぽく入るようにできます。</p>\n<h2>Install</h2>\n<p><code>go get github.com/agatan/japawrap/...</code></p>\n<p>で <code>japawrap</code> コマンドが使えるようになります。</p>\n<h2>Usage</h2>\n<h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CLI\">CLI</a></h3>\n<p>ファイル名を指定するか標準入力から流し込みます。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>$ echo &#34;今日も元気です&#34; | japawrap\n&lt;span class=&#34;wordwrap&#34;&gt;今日も&lt;/span&gt;&lt;span class=&#34;wordwrap&#34;&gt;元気です&lt;/span&gt;</pre>\n<p>このように適宜いい感じに wrap してくれます。</p>\n<p>オプションとして <code>-open string</code> と <code>-close string</code> をサポートしているので、</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>$ echo &#34;今日も元気です&#34; | japawrap -open &#39;&lt;span style=&#34;display: inline-block;&#34;&gt;&#39; -close &#34;&lt;/span&gt;&#34; \n&lt;span style=&#34;display: inline-block;&#34;&gt;今日も&lt;/span&gt;&lt;span style=&#34;display: inline-block;&#34;&gt;元気です&lt;/span&gt;</pre>\n<p>みたいなことができます。</p>\n<h3>Library</h3>\n<p>一応 <code>japawrap</code> はライブラリとしても使用できるようになっています。</p>\n<pre class=\"code lang-go\" data-lang=\"go\" data-unlink>w := japawrap.New(open, <span class=\"synStatement\">close</span>)\ns := <span class=\"synConstant\">&quot;今日も元気です&quot;</span>\nfmt.Println(<span class=\"synConstant\">&quot;%s =&gt; %s&quot;</span>, s, w.Do(s))\n</pre>\n<p>これだけです。</p>\n<h2>Example</h2>\n<p>では実際に使った結果を下に記したいと思います。\n文章は、上の方に自分で書いた文章をそのまま使います。</p>\n<hr />\n<h4>before</h4>\n<p>HTMLに長文を書くと、親DOM のサイズの制約上、適宜改行がぶちこまれます。\nしかし、改行位置は文節を考慮などせずにごりっと挿入されるので、多くの問題が生じることが報告されています。\n最も有名な問題として、今すぐダウンロード問題が挙げられます。</p>\n<h4>after</h4>\n<p><span style=\"display: inline-block;\">HTMLに</span><span style=\"display: inline-block;\">長文を</span><span style=\"display: inline-block;\">書くと、</span><span style=\"display: inline-block;\">親 </span><span style=\"display: inline-block;\">DOM の</span><span style=\"display: inline-block;\">サイズの</span><span style=\"display: inline-block;\">制約上、</span><span style=\"display: inline-block;\">適宜改行が</span><span style=\"display: inline-block;\">ぶちこまれます。</span>\n<span style=\"display: inline-block;\">しかし、</span><span style=\"display: inline-block;\">改行位置は</span><span style=\"display: inline-block;\">文節を</span><span style=\"display: inline-block;\">考慮など</span><span style=\"display: inline-block;\">せず</span><span style=\"display: inline-block;\">にごりっと</span><span style=\"display: inline-block;\">挿入されるので、</span><span style=\"display: inline-block;\">多くの</span><span style=\"display: inline-block;\">問題が</span><span style=\"display: inline-block;\">生じる</span><span style=\"display: inline-block;\">ことが</span><span style=\"display: inline-block;\">報告されて</span><span style=\"display: inline-block;\">います。</span>\n<span style=\"display: inline-block;\">最も</span><span style=\"display: inline-block;\">有名な</span><span style=\"display: inline-block;\">問題として、<span style=\"display: inline-block;\">今すぐ</span><span style=\"display: inline-block;\">ダウンロード問題が</span><span style=\"display: inline-block;\">挙げられます。</span></p>\n<hr />\n<p>こんな感じになります。猛烈に効果がわかりにくくて驚いていますが、一応効果はちゃんと出ているのではないでしょうか？\nHTMLを直接見ていただければどうなっているかはわかると思います。</p>\n<p>次に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%C4%B6%F5%CA%B8%B8%CB\">青空文庫</a>から<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B2%C6%CC%DC%DE%FB%C0%D0\">夏目漱石</a>「こころ」の序文を抜粋してみたのが下の画像たちです。</p>\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/agtn/20161029/20161029131814.png\" alt=\"f:id:agtn:20161029131814p:plain\" title=\"f:id:agtn:20161029131814p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/agtn/20161029/20161029131817.png\" alt=\"f:id:agtn:20161029131817p:plain\" title=\"f:id:agtn:20161029131817p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/agtn/20161029/20161029131820.png\" alt=\"f:id:agtn:20161029131820p:plain\" title=\"f:id:agtn:20161029131820p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n<p>レスポンシブ！それなりになっている気がします。</p>\n<h4>あとがき</h4>\n<p>この問題へのアプローチとして、<a href=\"https://github.com/google/budou\">https://github.com/google/budou</a> が有名だと思います。</p>\n<p><code>budou</code> は　<a href=\"https://cloud.google.com/natural-language/\">Cloud Natural Language API</a> を内部で使っていて、しっかり日本語の文章を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>しているようです。\nなので非常に精度は高いと思うのですが、今僕の <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GCP\">GCP</a> アカウントがごにょごにょしていてぱぱっと試せる状況ではなかったので自作しました。</p>\n<p><code>budou</code> と違ってしっかり<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>などはしていなくて、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B7%C1%C2%D6%C1%C7%B2%F2%C0%CF\">形態素解析</a>した後、それっぽく分割しているだけです。なので精度は落ちると思います。\n一方、<code>budou</code> は <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GCP\">GCP</a> の credentails が必要だったりと準備が必要になるので、お手軽に試せるというのは悪くないかなと思っています。</p>\n<hr>\n<hr>\n","meta":{"rawMarkdown":"---\ntitle: \"日本語の改行を適当にいい感じにするツールを作りました\"\ndate: 2016-10-29T04:24:49.000Z\ntags: []\n---\n\n<p>必要に迫られて、HTML ページ内の改行位置をいい感じにするツールを作ってみました。</p>\n\n<p><iframe src=\"//hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fagatan%2Fjapawrap\" title=\"agatan/japawrap\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://github.com/agatan/japawrap\">github.com</a></cite></p>\n\n<p>HTMLに長文を書くと、親 DOM のサイズの制約上、適宜改行がぶちこまれます。\nしかし、改行位置は文節を考慮などせずにごりっと挿入されるので、多くの問題が生じることが報告されています。\n最も有名な問題として、今すぐダウンロー<br>\nド問題が挙げられます。</p>\n\n<p><code>japawrap</code> を使うと、それっぽく日本語を解釈して <code>&lt;span&gt;</code> でくくるみたいなことができます。<code>inline-block</code> を適用すれば改行がそれっぽく入るようにできます。</p>\n\n<h2>Install</h2>\n\n<p><code>go get github.com/agatan/japawrap/...</code></p>\n\n<p>で <code>japawrap</code> コマンドが使えるようになります。</p>\n\n<h2>Usage</h2>\n\n<h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CLI\">CLI</a></h3>\n\n<p>ファイル名を指定するか標準入力から流し込みます。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ echo &#34;今日も元気です&#34; | japawrap\n&lt;span class=&#34;wordwrap&#34;&gt;今日も&lt;/span&gt;&lt;span class=&#34;wordwrap&#34;&gt;元気です&lt;/span&gt;</pre>\n\n<p>このように適宜いい感じに wrap してくれます。</p>\n\n<p>オプションとして <code>-open string</code> と <code>-close string</code> をサポートしているので、</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ echo &#34;今日も元気です&#34; | japawrap -open &#39;&lt;span style=&#34;display: inline-block;&#34;&gt;&#39; -close &#34;&lt;/span&gt;&#34; \n&lt;span style=&#34;display: inline-block;&#34;&gt;今日も&lt;/span&gt;&lt;span style=&#34;display: inline-block;&#34;&gt;元気です&lt;/span&gt;</pre>\n\n<p>みたいなことができます。</p>\n\n<h3>Library</h3>\n\n<p>一応 <code>japawrap</code> はライブラリとしても使用できるようになっています。</p>\n\n<pre class=\"code lang-go\" data-lang=\"go\" data-unlink>w := japawrap.New(open, <span class=\"synStatement\">close</span>)\ns := <span class=\"synConstant\">&quot;今日も元気です&quot;</span>\nfmt.Println(<span class=\"synConstant\">&quot;%s =&gt; %s&quot;</span>, s, w.Do(s))\n</pre>\n\n<p>これだけです。</p>\n\n<h2>Example</h2>\n\n<p>では実際に使った結果を下に記したいと思います。\n文章は、上の方に自分で書いた文章をそのまま使います。</p>\n\n<hr />\n\n<h4>before</h4>\n\n<p>HTMLに長文を書くと、親DOM のサイズの制約上、適宜改行がぶちこまれます。\nしかし、改行位置は文節を考慮などせずにごりっと挿入されるので、多くの問題が生じることが報告されています。\n最も有名な問題として、今すぐダウンロード問題が挙げられます。</p>\n\n<h4>after</h4>\n\n<p><span style=\"display: inline-block;\">HTMLに</span><span style=\"display: inline-block;\">長文を</span><span style=\"display: inline-block;\">書くと、</span><span style=\"display: inline-block;\">親 </span><span style=\"display: inline-block;\">DOM の</span><span style=\"display: inline-block;\">サイズの</span><span style=\"display: inline-block;\">制約上、</span><span style=\"display: inline-block;\">適宜改行が</span><span style=\"display: inline-block;\">ぶちこまれます。</span>\n<span style=\"display: inline-block;\">しかし、</span><span style=\"display: inline-block;\">改行位置は</span><span style=\"display: inline-block;\">文節を</span><span style=\"display: inline-block;\">考慮など</span><span style=\"display: inline-block;\">せず</span><span style=\"display: inline-block;\">にごりっと</span><span style=\"display: inline-block;\">挿入されるので、</span><span style=\"display: inline-block;\">多くの</span><span style=\"display: inline-block;\">問題が</span><span style=\"display: inline-block;\">生じる</span><span style=\"display: inline-block;\">ことが</span><span style=\"display: inline-block;\">報告されて</span><span style=\"display: inline-block;\">います。</span>\n<span style=\"display: inline-block;\">最も</span><span style=\"display: inline-block;\">有名な</span><span style=\"display: inline-block;\">問題として、<span style=\"display: inline-block;\">今すぐ</span><span style=\"display: inline-block;\">ダウンロード問題が</span><span style=\"display: inline-block;\">挙げられます。</span></p>\n\n<hr />\n\n<p>こんな感じになります。猛烈に効果がわかりにくくて驚いていますが、一応効果はちゃんと出ているのではないでしょうか？\nHTMLを直接見ていただければどうなっているかはわかると思います。</p>\n\n<p>次に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%C4%B6%F5%CA%B8%B8%CB\">青空文庫</a>から<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B2%C6%CC%DC%DE%FB%C0%D0\">夏目漱石</a>「こころ」の序文を抜粋してみたのが下の画像たちです。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/agtn/20161029/20161029131814.png\" alt=\"f:id:agtn:20161029131814p:plain\" title=\"f:id:agtn:20161029131814p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/agtn/20161029/20161029131817.png\" alt=\"f:id:agtn:20161029131817p:plain\" title=\"f:id:agtn:20161029131817p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/agtn/20161029/20161029131820.png\" alt=\"f:id:agtn:20161029131820p:plain\" title=\"f:id:agtn:20161029131820p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>レスポンシブ！それなりになっている気がします。</p>\n\n<h4>あとがき</h4>\n\n<p>この問題へのアプローチとして、<a href=\"https://github.com/google/budou\">https://github.com/google/budou</a> が有名だと思います。</p>\n\n<p><code>budou</code> は　<a href=\"https://cloud.google.com/natural-language/\">Cloud Natural Language API</a> を内部で使っていて、しっかり日本語の文章を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>しているようです。\nなので非常に精度は高いと思うのですが、今僕の <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GCP\">GCP</a> アカウントがごにょごにょしていてぱぱっと試せる状況ではなかったので自作しました。</p>\n\n<p><code>budou</code> と違ってしっかり<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>などはしていなくて、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B7%C1%C2%D6%C1%C7%B2%F2%C0%CF\">形態素解析</a>した後、それっぽく分割しているだけです。なので精度は落ちると思います。\n一方、<code>budou</code> は <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GCP\">GCP</a> の credentails が必要だったりと準備が必要になるので、お手軽に試せるというのは悪くないかなと思っています。</p>\n\n---\n\n---\n","contentMarkdown":"\n<p>必要に迫られて、HTML ページ内の改行位置をいい感じにするツールを作ってみました。</p>\n\n<p><iframe src=\"//hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fagatan%2Fjapawrap\" title=\"agatan/japawrap\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://github.com/agatan/japawrap\">github.com</a></cite></p>\n\n<p>HTMLに長文を書くと、親 DOM のサイズの制約上、適宜改行がぶちこまれます。\nしかし、改行位置は文節を考慮などせずにごりっと挿入されるので、多くの問題が生じることが報告されています。\n最も有名な問題として、今すぐダウンロー<br>\nド問題が挙げられます。</p>\n\n<p><code>japawrap</code> を使うと、それっぽく日本語を解釈して <code>&lt;span&gt;</code> でくくるみたいなことができます。<code>inline-block</code> を適用すれば改行がそれっぽく入るようにできます。</p>\n\n<h2>Install</h2>\n\n<p><code>go get github.com/agatan/japawrap/...</code></p>\n\n<p>で <code>japawrap</code> コマンドが使えるようになります。</p>\n\n<h2>Usage</h2>\n\n<h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CLI\">CLI</a></h3>\n\n<p>ファイル名を指定するか標準入力から流し込みます。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ echo &#34;今日も元気です&#34; | japawrap\n&lt;span class=&#34;wordwrap&#34;&gt;今日も&lt;/span&gt;&lt;span class=&#34;wordwrap&#34;&gt;元気です&lt;/span&gt;</pre>\n\n<p>このように適宜いい感じに wrap してくれます。</p>\n\n<p>オプションとして <code>-open string</code> と <code>-close string</code> をサポートしているので、</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ echo &#34;今日も元気です&#34; | japawrap -open &#39;&lt;span style=&#34;display: inline-block;&#34;&gt;&#39; -close &#34;&lt;/span&gt;&#34; \n&lt;span style=&#34;display: inline-block;&#34;&gt;今日も&lt;/span&gt;&lt;span style=&#34;display: inline-block;&#34;&gt;元気です&lt;/span&gt;</pre>\n\n<p>みたいなことができます。</p>\n\n<h3>Library</h3>\n\n<p>一応 <code>japawrap</code> はライブラリとしても使用できるようになっています。</p>\n\n<pre class=\"code lang-go\" data-lang=\"go\" data-unlink>w := japawrap.New(open, <span class=\"synStatement\">close</span>)\ns := <span class=\"synConstant\">&quot;今日も元気です&quot;</span>\nfmt.Println(<span class=\"synConstant\">&quot;%s =&gt; %s&quot;</span>, s, w.Do(s))\n</pre>\n\n<p>これだけです。</p>\n\n<h2>Example</h2>\n\n<p>では実際に使った結果を下に記したいと思います。\n文章は、上の方に自分で書いた文章をそのまま使います。</p>\n\n<hr />\n\n<h4>before</h4>\n\n<p>HTMLに長文を書くと、親DOM のサイズの制約上、適宜改行がぶちこまれます。\nしかし、改行位置は文節を考慮などせずにごりっと挿入されるので、多くの問題が生じることが報告されています。\n最も有名な問題として、今すぐダウンロード問題が挙げられます。</p>\n\n<h4>after</h4>\n\n<p><span style=\"display: inline-block;\">HTMLに</span><span style=\"display: inline-block;\">長文を</span><span style=\"display: inline-block;\">書くと、</span><span style=\"display: inline-block;\">親 </span><span style=\"display: inline-block;\">DOM の</span><span style=\"display: inline-block;\">サイズの</span><span style=\"display: inline-block;\">制約上、</span><span style=\"display: inline-block;\">適宜改行が</span><span style=\"display: inline-block;\">ぶちこまれます。</span>\n<span style=\"display: inline-block;\">しかし、</span><span style=\"display: inline-block;\">改行位置は</span><span style=\"display: inline-block;\">文節を</span><span style=\"display: inline-block;\">考慮など</span><span style=\"display: inline-block;\">せず</span><span style=\"display: inline-block;\">にごりっと</span><span style=\"display: inline-block;\">挿入されるので、</span><span style=\"display: inline-block;\">多くの</span><span style=\"display: inline-block;\">問題が</span><span style=\"display: inline-block;\">生じる</span><span style=\"display: inline-block;\">ことが</span><span style=\"display: inline-block;\">報告されて</span><span style=\"display: inline-block;\">います。</span>\n<span style=\"display: inline-block;\">最も</span><span style=\"display: inline-block;\">有名な</span><span style=\"display: inline-block;\">問題として、<span style=\"display: inline-block;\">今すぐ</span><span style=\"display: inline-block;\">ダウンロード問題が</span><span style=\"display: inline-block;\">挙げられます。</span></p>\n\n<hr />\n\n<p>こんな感じになります。猛烈に効果がわかりにくくて驚いていますが、一応効果はちゃんと出ているのではないでしょうか？\nHTMLを直接見ていただければどうなっているかはわかると思います。</p>\n\n<p>次に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%C4%B6%F5%CA%B8%B8%CB\">青空文庫</a>から<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B2%C6%CC%DC%DE%FB%C0%D0\">夏目漱石</a>「こころ」の序文を抜粋してみたのが下の画像たちです。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/agtn/20161029/20161029131814.png\" alt=\"f:id:agtn:20161029131814p:plain\" title=\"f:id:agtn:20161029131814p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/agtn/20161029/20161029131817.png\" alt=\"f:id:agtn:20161029131817p:plain\" title=\"f:id:agtn:20161029131817p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/agtn/20161029/20161029131820.png\" alt=\"f:id:agtn:20161029131820p:plain\" title=\"f:id:agtn:20161029131820p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>レスポンシブ！それなりになっている気がします。</p>\n\n<h4>あとがき</h4>\n\n<p>この問題へのアプローチとして、<a href=\"https://github.com/google/budou\">https://github.com/google/budou</a> が有名だと思います。</p>\n\n<p><code>budou</code> は　<a href=\"https://cloud.google.com/natural-language/\">Cloud Natural Language API</a> を内部で使っていて、しっかり日本語の文章を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>しているようです。\nなので非常に精度は高いと思うのですが、今僕の <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GCP\">GCP</a> アカウントがごにょごにょしていてぱぱっと試せる状況ではなかったので自作しました。</p>\n\n<p><code>budou</code> と違ってしっかり<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>などはしていなくて、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B7%C1%C2%D6%C1%C7%B2%F2%C0%CF\">形態素解析</a>した後、それっぽく分割しているだけです。なので精度は落ちると思います。\n一方、<code>budou</code> は <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GCP\">GCP</a> の credentails が必要だったりと準備が必要になるので、お手軽に試せるというのは悪くないかなと思っています。</p>\n\n---\n\n---\n","slug":"日本語の改行を適当にいい感じにするツールを作りました","title":"日本語の改行を適当にいい感じにするツールを作りました","timestamp":1477715089000,"tags":[]}}},"__N_SSG":true}