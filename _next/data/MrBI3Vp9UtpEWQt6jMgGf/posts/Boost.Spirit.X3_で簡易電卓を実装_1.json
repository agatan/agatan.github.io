{"pageProps":{"post":{"content":"<p><iframe src=\"http://agtn.hatenablog.com/embed/2015/12/17/190505\" title=\"Boost.Spirit.X3 の練習1 - プログラミングのメモ帳➚\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://agtn.hatenablog.com/entry/2015/12/17/190505\">agtn.hatenablog.com</a></cite>\n<iframe src=\"http://agtn.hatenablog.com/embed/2015/12/17/232003\" title=\"Boost.Spirit.X3 の練習 2 - プログラミングのメモ帳➚\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://agtn.hatenablog.com/entry/2015/12/17/232003\">agtn.hatenablog.com</a></cite></p>\n<p>引き続き，<code>Boost.Spirit.X3</code> です．<br/>\n今回は，前回までの知識をつかって，簡易電卓を実装してみます．</p>\n<h2>仕様</h2>\n<p>今回定義する電卓は，</p>\n<ul>\n<li><code>+</code></li>\n<li><code>-</code></li>\n<li><code>*</code></li>\n<li><code>/</code></li>\n</ul>\n<p>の 4 つの演算と単項の <code>-</code> をサポートします．<br/>\nまた，整数型のみを扱うものとします．<br/>\n<code>(</code>, <code>)</code> でくくることで，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>の結合優先順位を書き換えられ，<code>*</code> と <code>/</code> は <code>+</code> と <code>-</code> より優先されるとします．</p>\n<p>要するに整数の四則演算のみをサポートする電卓です．</p>\n<p>このような電卓を実装するサンプルは <code>Boost.Spirit.X3</code> 以外のライブラリ/<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB\">ツール</a>でも大量に出てくると思います．<br/>\n今回は，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>そのものというよりは <code>Boost.Spirit.X3</code> の使い方についてメモしたいので，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>そのものの話はぐぐってみてください．</p>\n<h2>パーサの骨格</h2>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>の結合規則をサポートするために，<code>primary</code>(定数と <code>()</code> で囲まれた式), <code>neg_expr</code>(単項 <code>-</code>), <code>mul_expr</code>(<code>*</code>, <code>/</code>), <code>add_expr</code>(<code>+</code>, <code>-</code>), <code>expression</code> というパーサをそれぞれ定義します．<br/>\n先頭から順に結合強度が強くなっています．(<code>expression</code> が最弱, <code>primary</code> が最強)</p>\n<p><code>primary</code> は <code>()</code> で囲まれた式，つまり <code>\"(\" &gt; expression &gt; \")\"</code> を受け付ける必要があり，また，<code>primary</code> 自体も <code>expression</code> の一部です．<br/>\nしたがって，この規則を定義するためには，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的なパーサを記述する必要があります．</p>\n<p><code>X3</code> で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的なパーサを記述する方法は<a href=\"http://agtn.hatenablog.com/entry/2015/12/17/232003\">前回の記事</a>にまとめました．</p>\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink>  <span class=\"synType\">struct</span> primary;\n  <span class=\"synType\">struct</span> neg_expr;\n  <span class=\"synType\">struct</span> mul_expr;\n  <span class=\"synType\">struct</span> add_expr;\n  <span class=\"synType\">struct</span> expression;\n\n  x3::rule&lt;primary, <span class=\"synType\">int</span>&gt; <span class=\"synType\">const</span> primary;\n  x3::rule&lt;neg_expr, <span class=\"synType\">int</span>&gt; <span class=\"synType\">const</span> neg_expr;\n  x3::rule&lt;mul_expr, <span class=\"synType\">int</span>&gt; <span class=\"synType\">const</span> mul_expr;\n  x3::rule&lt;add_expr, <span class=\"synType\">int</span>&gt; <span class=\"synType\">const</span> add_expr;\n  x3::rule&lt;expression, <span class=\"synType\">int</span>&gt; <span class=\"synType\">const</span> expression;\n</pre>\n<p>それぞれのパーサは attribute として整数型を持ちます．ここに演算結果が格納されることになります．<br/>\n<code>struct primary</code> などは，今は前方宣言のみで十分です．<code>on_error</code> などを実装したくなった時に定義します．</p>\n<h2>primary</h2>\n<p>まずは <code>primary</code> を定義します.<br/>\n<code>primary</code> は整数定数か， <code>()</code> で囲まれた <code>expression</code> を受理します．</p>\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">auto</span> <span class=\"synType\">const</span> primary_def =\n    x3::int_\n  | <span class=\"synConstant\">&quot;(&quot;</span> &gt; expression &gt; <span class=\"synConstant\">&quot;)&quot;</span>\n  ;\n</pre>\n<p>attribute を考慮しなければこんな感じでしょうか．<code>expression</code> は既に宣言されているので使用可能です．(<code>expression</code> の実装がこの時点で見えていなくても使用できます.)</p>\n<p>単純に attribute を結果として返すセマンティックアクションはこの後もよく出てくるので，ヘルパとして定義しておきます．</p>\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">namespace</span> detail {\n\n  decltype(<span class=\"synType\">auto</span>) assign()\n  {\n    <span class=\"synStatement\">using</span> x3::_attr;\n    <span class=\"synStatement\">using</span> x3::_val;\n    <span class=\"synStatement\">return</span> [](<span class=\"synType\">auto</span>&amp;&amp; ctx) { _val(ctx) = _attr(ctx); };\n  }\n\n} <span class=\"synComment\">// namespace detail</span>\n</pre>\n<p><code>assign</code> は attribute を結果に代入する関数オブジェクトを返します．<br/>\n関数にする必要が特にありませんが，この後出てくるヘルパと見た目を合わせたいので関数にしました．</p>\n<p>これを使うと，</p>\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">auto</span> primary_def =\n    x3::int_[detail::assign()]\n  | (<span class=\"synConstant\">&quot;(&quot;</span> &gt; expression &gt; <span class=\"synConstant\">&quot;)&quot;</span>)[detail::assign()]\n  ;\n</pre>\n<p>こんな感じで <code>primary</code> が定義できます．</p>\n<h2>単項マイナス</h2>\n<p>次に <code>neg_expr</code> を定義します．\nセマンティックアクションを考えなければ，</p>\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">auto</span> <span class=\"synType\">const</span> neg_expr_def =\n    primary\n  | <span class=\"synConstant\">&quot;-&quot;</span> &gt; primary\n  ;\n</pre>\n<p>となります．<br/>\n<code>\"-\" &gt; primary</code> のセマンティックアクションとしては，attribute を符号反転して結果に格納するというアクションが求められます．<br/>\nここはちょっと汎用的に，attribute に関数オブジェクトを適用して結果に格納するアクションを返すような関数を定義して解決してみます．</p>\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">namespace</span> detail {\n  <span class=\"synType\">template</span> &lt;<span class=\"synType\">typename</span> F&gt;\n  decltype(<span class=\"synType\">auto</span>) assign_f(F&amp;&amp; func)\n  {\n    <span class=\"synStatement\">return</span> [func](<span class=\"synType\">auto</span>&amp;&amp; ctx) { _val(ctx) = func(_attr(ctx)); };\n  }\n} <span class=\"synComment\">// namespace detail</span>\n</pre>\n<p><code>assign_f</code> は <code>assign</code> と異なり，関数オブジェクトを１つ引数に取ります．<br/>\nそして，その関数オブジェクトを <code>_attr(ctx)</code> に適用し結果に格納します．</p>\n<p>これを使って，<code>neg_expr</code> は</p>\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">auto</span> <span class=\"synType\">const</span> neg_expr_def =\n    primary[detail::assign()]\n  | (<span class=\"synConstant\">&quot;-&quot;</span> &gt; primary)[detail::assign(std::negate&lt;<span class=\"synType\">int</span>&gt;<span class=\"synError\">{</span>})]\n  ;\n</pre>\n<p>となります．<code>std::negate</code> は <code>&lt;functional&gt;</code> で定義された型で，ここでは <code>int</code> 型の値を符号反転する関数オブジェクトとして使用しています．</p>\n<h2>乗除</h2>\n<p>次に結合強度が強いのは <code>*</code> と <code>/</code> です．<br/>\nちょっとわかりにくいですが，セマンティックアクションを無視すれば，<code>mul_expr</code> は</p>\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">auto</span> <span class=\"synType\">const</span> mul_expr_def =\n    neg_expr\n    &gt;&gt; *(\n        (<span class=\"synConstant\">&quot;*&quot;</span> &gt;&gt; neg_expr)\n      | (<span class=\"synConstant\">&quot;/&quot;</span> &gt;&gt; neg_expr)\n    )\n  ;\n</pre>\n<p>と定義できます．<code>mul_expr</code> は <code>1</code> や <code>(1 + 2)</code>, <code>-1</code> の後に，<code>* 1</code> とか <code>/ -3</code> とか <code>* (1 - 2)</code> とかが 0 回以上現れるような式です．<br/>\n<code>1 * -2</code> はちょっと気持ち悪い気もしますが… 今気がついたので許してください．</p>\n<p>セマンティックアクションとしては，<code>(\"*\" &gt;&gt; neg_expr)</code> が現れる度に，<code>_val(ctx)</code> を <code>_val(ctx) * _attr(ctx)</code> に更新すれば良いです．<br/>\n始めの <code>neg_expr</code> の結果を <code>_val(ctx)</code> に格納すれば，<code>_val(ctx)</code> は常に現在の計算結果を表すことになります．<code>(\"*\" &gt;&gt; neg_expr)</code> は現在の計算結果に，今処理した式(<code>*</code> の後に続く式のこと) を処理した結果をかければ良いということです．</p>\n<p>というわけで分かりにくいとは思いますが，ほしいアクションは，</p>\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink>[](<span class=\"synType\">auto</span>&amp;&amp; ctx) { _val(ctx) = _val(ctx) * _attr(ctx); }\n</pre>\n<p>です．</p>\n<p>さて，では <code>/</code> の場合を考えます．<br/>\n<code>/</code> の場合であってもほとんどは <code>*</code> と同じであることがわかります．<br/>\nほしいアクションは</p>\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink>[](<span class=\"synType\">auto</span>&amp;&amp; ctx) { _val(ctx) = _val(ctx) / _attr(ctx); }\n</pre>\n<p>であり，<code>*</code> と <code>/</code> の違いしか有りません．</p>\n<p>そこでこれも関数にまとめてしまいます．</p>\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">namespace</span> detail {\n\n  <span class=\"synType\">template</span> &lt;<span class=\"synType\">typename</span> Op&gt;\n  decltype(<span class=\"synType\">auto</span>) calc_op(Op&amp;&amp; op)\n  {\n    <span class=\"synStatement\">return</span> [op](<span class=\"synType\">auto</span>&amp;&amp; ctx) { _val(ctx) = op(_val(ctx), _attr(ctx)); };\n  }\n\n} <span class=\"synComment\">// namespace detail</span>\n</pre>\n<p>こんな関数を定義して，</p>\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">auto</span> <span class=\"synType\">const</span> mul_expr_def =\n    neg_expr[detail::assign()]\n    &gt;&gt; *(\n        (<span class=\"synConstant\">&quot;*&quot;</span> &gt;&gt; neg_expr)[detail::calc_op(std::multiplies&lt;<span class=\"synType\">int</span>&gt;<span class=\"synError\">{</span>})]\n      | (<span class=\"synConstant\">&quot;/&quot;</span> &gt;&gt; neg_expr)[detail::calc_op(std::divides&lt;<span class=\"synType\">int</span>&gt;<span class=\"synError\">{</span>})]\n    )\n  ;\n</pre>\n<p>と使います．<br/>\n<code>calc_op</code> は関数オブジェクトを引数に取り，<code>_val(ctx)</code> と <code>_attr(ctx)</code> に適用した結果を格納するアクションを返します．</p>\n<p><code>add_expr</code> は <code>mul_expr</code> とほぼおなじなので詳細はスキップします．</p>\n<h2>expression</h2>\n<p>最後に <code>expression</code> です．これは単純に <code>add_expr</code> と一致します．<br/>\n命名のわかりやすさと，今後拡張していく際に便利そうということで分けてあるだけです．</p>\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">auto</span> <span class=\"synType\">const</span> expression_def =\n    add_expr[detail::assign()]\n  ;\n</pre>\n<h2>確認</h2>\n<p>コード全体を掲載します．</p>\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;boost/spirit/home/x3.hpp&gt;</span>\n\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;iostream&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;string&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;functional&gt;</span>\n\n<span class=\"synType\">namespace</span> x3 = boost::spirit::x3;\n\n<span class=\"synType\">namespace</span> grammar {\n\n  <span class=\"synType\">namespace</span> detail {\n\n    decltype(<span class=\"synType\">auto</span>) assign()\n    {\n      <span class=\"synStatement\">using</span> x3::_attr;\n      <span class=\"synStatement\">using</span> x3::_val;\n      <span class=\"synStatement\">return</span> [](<span class=\"synType\">auto</span>&amp;&amp; ctx) { _val(ctx) = _attr(ctx); };\n    }\n\n    <span class=\"synType\">template</span> &lt;<span class=\"synType\">typename</span> F&gt;\n    decltype(<span class=\"synType\">auto</span>) assign_f(F&amp;&amp; func)\n    {\n      <span class=\"synStatement\">return</span> [func](<span class=\"synType\">auto</span>&amp;&amp; ctx) { _val(ctx) = func(_attr(ctx)); };\n    }\n\n    <span class=\"synType\">template</span> &lt;<span class=\"synType\">typename</span> Op&gt;\n    decltype(<span class=\"synType\">auto</span>) calc_op(Op&amp;&amp; op)\n    {\n      <span class=\"synStatement\">return</span> [op](<span class=\"synType\">auto</span>&amp;&amp; ctx) { x3::_val(ctx) = op(x3::_val(ctx), x3::_attr(ctx)); };\n    }\n\n  } <span class=\"synComment\">// namespace detail</span>\n\n  <span class=\"synType\">struct</span> primary;\n  <span class=\"synType\">struct</span> neg_expr;\n  <span class=\"synType\">struct</span> mul_expr;\n  <span class=\"synType\">struct</span> add_expr;\n  <span class=\"synType\">struct</span> expression;\n\n  x3::rule&lt;primary, <span class=\"synType\">int</span>&gt; <span class=\"synType\">const</span> primary;\n  x3::rule&lt;neg_expr, <span class=\"synType\">int</span>&gt; <span class=\"synType\">const</span> neg_expr;\n  x3::rule&lt;mul_expr, <span class=\"synType\">int</span>&gt; <span class=\"synType\">const</span> mul_expr;\n  x3::rule&lt;add_expr, <span class=\"synType\">int</span>&gt; <span class=\"synType\">const</span> add_expr;\n  x3::rule&lt;expression, <span class=\"synType\">int</span>&gt; <span class=\"synType\">const</span> expression;\n\n  <span class=\"synType\">auto</span> <span class=\"synType\">const</span> primary_def =\n      x3::int_[detail::assign()]\n    | (<span class=\"synConstant\">&quot;(&quot;</span> &gt; expression &gt; <span class=\"synConstant\">&quot;)&quot;</span>)[detail::assign()]\n    ;\n\n  <span class=\"synType\">auto</span> <span class=\"synType\">const</span> neg_expr_def =\n      primary[detail::assign()]\n    | (<span class=\"synConstant\">&quot;-&quot;</span> &gt; primary)[detail::assign_f(std::negate&lt;<span class=\"synType\">int</span>&gt;<span class=\"synError\">{</span>})]\n    ;\n\n  <span class=\"synType\">auto</span> <span class=\"synType\">const</span> mul_expr_def =\n      neg_expr[detail::assign()]\n      &gt;&gt; *(\n          (<span class=\"synConstant\">&quot;*&quot;</span> &gt;&gt; neg_expr)[detail::calc_op(std::multiplies&lt;<span class=\"synType\">int</span>&gt;<span class=\"synError\">{</span>})]\n        | (<span class=\"synConstant\">&quot;/&quot;</span> &gt;&gt; neg_expr)[detail::calc_op(std::divides&lt;<span class=\"synType\">int</span>&gt;<span class=\"synError\">{</span>})]\n      )\n    ;\n\n  <span class=\"synType\">auto</span> <span class=\"synType\">const</span> add_expr_def =\n      mul_expr[detail::assign()]\n      &gt;&gt; *(\n          (<span class=\"synConstant\">&quot;+&quot;</span> &gt; mul_expr)[detail::calc_op(std::plus&lt;<span class=\"synType\">int</span>&gt;<span class=\"synError\">{</span>})]\n        | (<span class=\"synConstant\">&quot;-&quot;</span> &gt; mul_expr)[detail::calc_op(std::minus&lt;<span class=\"synType\">int</span>&gt;<span class=\"synError\">{</span>})]\n      )\n    ;\n\n  <span class=\"synType\">auto</span> <span class=\"synType\">const</span> expression_def =\n      add_expr[detail::assign()]\n    ;\n\n  BOOST_SPIRIT_DEFINE(\n      primary,\n      neg_expr,\n      mul_expr,\n      add_expr,\n      expression\n      );\n\n} <span class=\"synComment\">// namespace grammar</span>\n<span class=\"synStatement\">using</span> grammar::expression;\n\n<span class=\"synType\">int</span> main()\n{\n  std::string str;\n  std::getline(std::cin, str);\n\n  <span class=\"synType\">auto</span> first(std::cbegin(str));\n  <span class=\"synType\">auto</span> <span class=\"synType\">const</span> last(std::cend(str));\n\n  <span class=\"synType\">int</span> result;\n  <span class=\"synType\">bool</span> success = x3::phrase_parse(first, last, expression, x3::ascii::space, result);\n\n  <span class=\"synStatement\">if</span> (!success || first != last) {\n    std::cerr &lt;&lt; <span class=\"synConstant\">&quot;Parse failed.&quot;</span> &lt;&lt; std::endl;\n    <span class=\"synStatement\">return</span> <span class=\"synConstant\">1</span>;\n  }\n\n  std::cout &lt;&lt; <span class=\"synConstant\">&quot;Parsed: &quot;</span> &lt;&lt; result &lt;&lt; std::endl;\n  <span class=\"synStatement\">return</span> <span class=\"synConstant\">0</span>;\n}\n</pre>\n<p>実行してみます．</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>$ clang++ -std=c++14 main.cpp\n$ ./a.out\n1 + 2 * 3\nParsed: 7\n$ ./a.out\n(1 + 2) * 3\nParsed: 9</pre>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>の優先順位が正しく解決できていることが確認出来ます．</p>\n<h2>まとめ</h2>\n<p>今回は，セマンティックアクションで計算自体を行ってしまいましたが，普通は抽象<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%CC%DA\">構文木</a>(AST) に変換するためにセマンティックアクションを使うのが正道だと思います．<br/>\n<code>X3</code> は AST のための色々を提供してくれていますが，自前で作った AST でもちょっと苦労はするかもしれませんが変換できるはずなので，時間があれば，自前 AST に変換してから実行する電卓も作ってみたいと思います．</p>\n<p>また，AST に変換して計算する場合，AST に位置情報を付与することで，エラーレポートが便利になったりするはずです( 0 除算のエラーを通知する際，どの部分でのエラーなのかを吐いてくれればうれしいですよね).<br/>\nパース失敗時にもどこで失敗したのかをレポートしてくれたほうが便利です．<br/>\n<code>X3</code> で <code>on_error</code>, <code>on_success</code> を使ってこれらを実装してみようと考えています．</p>\n<p>今回のコードでは <code>decltype(auto)</code> など，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>14 の機能を使っています．<code>X3</code> は <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>14 前提のライブラリなので，迷いなくこういった機能を使用できて幸せデスね．</p>\n<hr>\n<hr>\n","meta":{"rawMarkdown":"---\ntitle: \"Boost.Spirit.X3 で簡易電卓を実装 1\"\ndate: 2015-12-18T14:27:05.000Z\ntags: []\n---\n\n<p><iframe src=\"http://agtn.hatenablog.com/embed/2015/12/17/190505\" title=\"Boost.Spirit.X3 の練習1 - プログラミングのメモ帳➚\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://agtn.hatenablog.com/entry/2015/12/17/190505\">agtn.hatenablog.com</a></cite>\n<iframe src=\"http://agtn.hatenablog.com/embed/2015/12/17/232003\" title=\"Boost.Spirit.X3 の練習 2 - プログラミングのメモ帳➚\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://agtn.hatenablog.com/entry/2015/12/17/232003\">agtn.hatenablog.com</a></cite></p>\n\n<p>引き続き，<code>Boost.Spirit.X3</code> です．<br/>\n今回は，前回までの知識をつかって，簡易電卓を実装してみます．</p>\n\n<h2>仕様</h2>\n\n<p>今回定義する電卓は，</p>\n\n<ul>\n<li><code>+</code></li>\n<li><code>-</code></li>\n<li><code>*</code></li>\n<li><code>/</code></li>\n</ul>\n\n<p>の 4 つの演算と単項の <code>-</code> をサポートします．<br/>\nまた，整数型のみを扱うものとします．<br/>\n<code>(</code>, <code>)</code> でくくることで，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>の結合優先順位を書き換えられ，<code>*</code> と <code>/</code> は <code>+</code> と <code>-</code> より優先されるとします．</p>\n\n<p>要するに整数の四則演算のみをサポートする電卓です．</p>\n\n<p>このような電卓を実装するサンプルは <code>Boost.Spirit.X3</code> 以外のライブラリ/<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB\">ツール</a>でも大量に出てくると思います．<br/>\n今回は，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>そのものというよりは <code>Boost.Spirit.X3</code> の使い方についてメモしたいので，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>そのものの話はぐぐってみてください．</p>\n\n<h2>パーサの骨格</h2>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>の結合規則をサポートするために，<code>primary</code>(定数と <code>()</code> で囲まれた式), <code>neg_expr</code>(単項 <code>-</code>), <code>mul_expr</code>(<code>*</code>, <code>/</code>), <code>add_expr</code>(<code>+</code>, <code>-</code>), <code>expression</code> というパーサをそれぞれ定義します．<br/>\n先頭から順に結合強度が強くなっています．(<code>expression</code> が最弱, <code>primary</code> が最強)</p>\n\n<p><code>primary</code> は <code>()</code> で囲まれた式，つまり <code>\"(\" &gt; expression &gt; \")\"</code> を受け付ける必要があり，また，<code>primary</code> 自体も <code>expression</code> の一部です．<br/>\nしたがって，この規則を定義するためには，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的なパーサを記述する必要があります．</p>\n\n<p><code>X3</code> で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的なパーサを記述する方法は<a href=\"http://agtn.hatenablog.com/entry/2015/12/17/232003\">前回の記事</a>にまとめました．</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink>  <span class=\"synType\">struct</span> primary;\n  <span class=\"synType\">struct</span> neg_expr;\n  <span class=\"synType\">struct</span> mul_expr;\n  <span class=\"synType\">struct</span> add_expr;\n  <span class=\"synType\">struct</span> expression;\n\n  x3::rule&lt;primary, <span class=\"synType\">int</span>&gt; <span class=\"synType\">const</span> primary;\n  x3::rule&lt;neg_expr, <span class=\"synType\">int</span>&gt; <span class=\"synType\">const</span> neg_expr;\n  x3::rule&lt;mul_expr, <span class=\"synType\">int</span>&gt; <span class=\"synType\">const</span> mul_expr;\n  x3::rule&lt;add_expr, <span class=\"synType\">int</span>&gt; <span class=\"synType\">const</span> add_expr;\n  x3::rule&lt;expression, <span class=\"synType\">int</span>&gt; <span class=\"synType\">const</span> expression;\n</pre>\n\n<p>それぞれのパーサは attribute として整数型を持ちます．ここに演算結果が格納されることになります．<br/>\n<code>struct primary</code> などは，今は前方宣言のみで十分です．<code>on_error</code> などを実装したくなった時に定義します．</p>\n\n<h2>primary</h2>\n\n<p>まずは <code>primary</code> を定義します.<br/>\n<code>primary</code> は整数定数か， <code>()</code> で囲まれた <code>expression</code> を受理します．</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">auto</span> <span class=\"synType\">const</span> primary_def =\n    x3::int_\n  | <span class=\"synConstant\">&quot;(&quot;</span> &gt; expression &gt; <span class=\"synConstant\">&quot;)&quot;</span>\n  ;\n</pre>\n\n<p>attribute を考慮しなければこんな感じでしょうか．<code>expression</code> は既に宣言されているので使用可能です．(<code>expression</code> の実装がこの時点で見えていなくても使用できます.)</p>\n\n<p>単純に attribute を結果として返すセマンティックアクションはこの後もよく出てくるので，ヘルパとして定義しておきます．</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">namespace</span> detail {\n\n  decltype(<span class=\"synType\">auto</span>) assign()\n  {\n    <span class=\"synStatement\">using</span> x3::_attr;\n    <span class=\"synStatement\">using</span> x3::_val;\n    <span class=\"synStatement\">return</span> [](<span class=\"synType\">auto</span>&amp;&amp; ctx) { _val(ctx) = _attr(ctx); };\n  }\n\n} <span class=\"synComment\">// namespace detail</span>\n</pre>\n\n<p><code>assign</code> は attribute を結果に代入する関数オブジェクトを返します．<br/>\n関数にする必要が特にありませんが，この後出てくるヘルパと見た目を合わせたいので関数にしました．</p>\n\n<p>これを使うと，</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">auto</span> primary_def =\n    x3::int_[detail::assign()]\n  | (<span class=\"synConstant\">&quot;(&quot;</span> &gt; expression &gt; <span class=\"synConstant\">&quot;)&quot;</span>)[detail::assign()]\n  ;\n</pre>\n\n<p>こんな感じで <code>primary</code> が定義できます．</p>\n\n<h2>単項マイナス</h2>\n\n<p>次に <code>neg_expr</code> を定義します．\nセマンティックアクションを考えなければ，</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">auto</span> <span class=\"synType\">const</span> neg_expr_def =\n    primary\n  | <span class=\"synConstant\">&quot;-&quot;</span> &gt; primary\n  ;\n</pre>\n\n<p>となります．<br/>\n<code>\"-\" &gt; primary</code> のセマンティックアクションとしては，attribute を符号反転して結果に格納するというアクションが求められます．<br/>\nここはちょっと汎用的に，attribute に関数オブジェクトを適用して結果に格納するアクションを返すような関数を定義して解決してみます．</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">namespace</span> detail {\n  <span class=\"synType\">template</span> &lt;<span class=\"synType\">typename</span> F&gt;\n  decltype(<span class=\"synType\">auto</span>) assign_f(F&amp;&amp; func)\n  {\n    <span class=\"synStatement\">return</span> [func](<span class=\"synType\">auto</span>&amp;&amp; ctx) { _val(ctx) = func(_attr(ctx)); };\n  }\n} <span class=\"synComment\">// namespace detail</span>\n</pre>\n\n<p><code>assign_f</code> は <code>assign</code> と異なり，関数オブジェクトを１つ引数に取ります．<br/>\nそして，その関数オブジェクトを <code>_attr(ctx)</code> に適用し結果に格納します．</p>\n\n<p>これを使って，<code>neg_expr</code> は</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">auto</span> <span class=\"synType\">const</span> neg_expr_def =\n    primary[detail::assign()]\n  | (<span class=\"synConstant\">&quot;-&quot;</span> &gt; primary)[detail::assign(std::negate&lt;<span class=\"synType\">int</span>&gt;<span class=\"synError\">{</span>})]\n  ;\n</pre>\n\n<p>となります．<code>std::negate</code> は <code>&lt;functional&gt;</code> で定義された型で，ここでは <code>int</code> 型の値を符号反転する関数オブジェクトとして使用しています．</p>\n\n<h2>乗除</h2>\n\n<p>次に結合強度が強いのは <code>*</code> と <code>/</code> です．<br/>\nちょっとわかりにくいですが，セマンティックアクションを無視すれば，<code>mul_expr</code> は</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">auto</span> <span class=\"synType\">const</span> mul_expr_def =\n    neg_expr\n    &gt;&gt; *(\n        (<span class=\"synConstant\">&quot;*&quot;</span> &gt;&gt; neg_expr)\n      | (<span class=\"synConstant\">&quot;/&quot;</span> &gt;&gt; neg_expr)\n    )\n  ;\n</pre>\n\n<p>と定義できます．<code>mul_expr</code> は <code>1</code> や <code>(1 + 2)</code>, <code>-1</code> の後に，<code>* 1</code> とか <code>/ -3</code> とか <code>* (1 - 2)</code> とかが 0 回以上現れるような式です．<br/>\n<code>1 * -2</code> はちょっと気持ち悪い気もしますが… 今気がついたので許してください．</p>\n\n<p>セマンティックアクションとしては，<code>(\"*\" &gt;&gt; neg_expr)</code> が現れる度に，<code>_val(ctx)</code> を <code>_val(ctx) * _attr(ctx)</code> に更新すれば良いです．<br/>\n始めの <code>neg_expr</code> の結果を <code>_val(ctx)</code> に格納すれば，<code>_val(ctx)</code> は常に現在の計算結果を表すことになります．<code>(\"*\" &gt;&gt; neg_expr)</code> は現在の計算結果に，今処理した式(<code>*</code> の後に続く式のこと) を処理した結果をかければ良いということです．</p>\n\n<p>というわけで分かりにくいとは思いますが，ほしいアクションは，</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink>[](<span class=\"synType\">auto</span>&amp;&amp; ctx) { _val(ctx) = _val(ctx) * _attr(ctx); }\n</pre>\n\n<p>です．</p>\n\n<p>さて，では <code>/</code> の場合を考えます．<br/>\n<code>/</code> の場合であってもほとんどは <code>*</code> と同じであることがわかります．<br/>\nほしいアクションは</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink>[](<span class=\"synType\">auto</span>&amp;&amp; ctx) { _val(ctx) = _val(ctx) / _attr(ctx); }\n</pre>\n\n<p>であり，<code>*</code> と <code>/</code> の違いしか有りません．</p>\n\n<p>そこでこれも関数にまとめてしまいます．</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">namespace</span> detail {\n\n  <span class=\"synType\">template</span> &lt;<span class=\"synType\">typename</span> Op&gt;\n  decltype(<span class=\"synType\">auto</span>) calc_op(Op&amp;&amp; op)\n  {\n    <span class=\"synStatement\">return</span> [op](<span class=\"synType\">auto</span>&amp;&amp; ctx) { _val(ctx) = op(_val(ctx), _attr(ctx)); };\n  }\n\n} <span class=\"synComment\">// namespace detail</span>\n</pre>\n\n<p>こんな関数を定義して，</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">auto</span> <span class=\"synType\">const</span> mul_expr_def =\n    neg_expr[detail::assign()]\n    &gt;&gt; *(\n        (<span class=\"synConstant\">&quot;*&quot;</span> &gt;&gt; neg_expr)[detail::calc_op(std::multiplies&lt;<span class=\"synType\">int</span>&gt;<span class=\"synError\">{</span>})]\n      | (<span class=\"synConstant\">&quot;/&quot;</span> &gt;&gt; neg_expr)[detail::calc_op(std::divides&lt;<span class=\"synType\">int</span>&gt;<span class=\"synError\">{</span>})]\n    )\n  ;\n</pre>\n\n<p>と使います．<br/>\n<code>calc_op</code> は関数オブジェクトを引数に取り，<code>_val(ctx)</code> と <code>_attr(ctx)</code> に適用した結果を格納するアクションを返します．</p>\n\n<p><code>add_expr</code> は <code>mul_expr</code> とほぼおなじなので詳細はスキップします．</p>\n\n<h2>expression</h2>\n\n<p>最後に <code>expression</code> です．これは単純に <code>add_expr</code> と一致します．<br/>\n命名のわかりやすさと，今後拡張していく際に便利そうということで分けてあるだけです．</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">auto</span> <span class=\"synType\">const</span> expression_def =\n    add_expr[detail::assign()]\n  ;\n</pre>\n\n<h2>確認</h2>\n\n<p>コード全体を掲載します．</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;boost/spirit/home/x3.hpp&gt;</span>\n\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;iostream&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;string&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;functional&gt;</span>\n\n<span class=\"synType\">namespace</span> x3 = boost::spirit::x3;\n\n<span class=\"synType\">namespace</span> grammar {\n\n  <span class=\"synType\">namespace</span> detail {\n\n    decltype(<span class=\"synType\">auto</span>) assign()\n    {\n      <span class=\"synStatement\">using</span> x3::_attr;\n      <span class=\"synStatement\">using</span> x3::_val;\n      <span class=\"synStatement\">return</span> [](<span class=\"synType\">auto</span>&amp;&amp; ctx) { _val(ctx) = _attr(ctx); };\n    }\n\n    <span class=\"synType\">template</span> &lt;<span class=\"synType\">typename</span> F&gt;\n    decltype(<span class=\"synType\">auto</span>) assign_f(F&amp;&amp; func)\n    {\n      <span class=\"synStatement\">return</span> [func](<span class=\"synType\">auto</span>&amp;&amp; ctx) { _val(ctx) = func(_attr(ctx)); };\n    }\n\n    <span class=\"synType\">template</span> &lt;<span class=\"synType\">typename</span> Op&gt;\n    decltype(<span class=\"synType\">auto</span>) calc_op(Op&amp;&amp; op)\n    {\n      <span class=\"synStatement\">return</span> [op](<span class=\"synType\">auto</span>&amp;&amp; ctx) { x3::_val(ctx) = op(x3::_val(ctx), x3::_attr(ctx)); };\n    }\n\n  } <span class=\"synComment\">// namespace detail</span>\n\n  <span class=\"synType\">struct</span> primary;\n  <span class=\"synType\">struct</span> neg_expr;\n  <span class=\"synType\">struct</span> mul_expr;\n  <span class=\"synType\">struct</span> add_expr;\n  <span class=\"synType\">struct</span> expression;\n\n  x3::rule&lt;primary, <span class=\"synType\">int</span>&gt; <span class=\"synType\">const</span> primary;\n  x3::rule&lt;neg_expr, <span class=\"synType\">int</span>&gt; <span class=\"synType\">const</span> neg_expr;\n  x3::rule&lt;mul_expr, <span class=\"synType\">int</span>&gt; <span class=\"synType\">const</span> mul_expr;\n  x3::rule&lt;add_expr, <span class=\"synType\">int</span>&gt; <span class=\"synType\">const</span> add_expr;\n  x3::rule&lt;expression, <span class=\"synType\">int</span>&gt; <span class=\"synType\">const</span> expression;\n\n  <span class=\"synType\">auto</span> <span class=\"synType\">const</span> primary_def =\n      x3::int_[detail::assign()]\n    | (<span class=\"synConstant\">&quot;(&quot;</span> &gt; expression &gt; <span class=\"synConstant\">&quot;)&quot;</span>)[detail::assign()]\n    ;\n\n  <span class=\"synType\">auto</span> <span class=\"synType\">const</span> neg_expr_def =\n      primary[detail::assign()]\n    | (<span class=\"synConstant\">&quot;-&quot;</span> &gt; primary)[detail::assign_f(std::negate&lt;<span class=\"synType\">int</span>&gt;<span class=\"synError\">{</span>})]\n    ;\n\n  <span class=\"synType\">auto</span> <span class=\"synType\">const</span> mul_expr_def =\n      neg_expr[detail::assign()]\n      &gt;&gt; *(\n          (<span class=\"synConstant\">&quot;*&quot;</span> &gt;&gt; neg_expr)[detail::calc_op(std::multiplies&lt;<span class=\"synType\">int</span>&gt;<span class=\"synError\">{</span>})]\n        | (<span class=\"synConstant\">&quot;/&quot;</span> &gt;&gt; neg_expr)[detail::calc_op(std::divides&lt;<span class=\"synType\">int</span>&gt;<span class=\"synError\">{</span>})]\n      )\n    ;\n\n  <span class=\"synType\">auto</span> <span class=\"synType\">const</span> add_expr_def =\n      mul_expr[detail::assign()]\n      &gt;&gt; *(\n          (<span class=\"synConstant\">&quot;+&quot;</span> &gt; mul_expr)[detail::calc_op(std::plus&lt;<span class=\"synType\">int</span>&gt;<span class=\"synError\">{</span>})]\n        | (<span class=\"synConstant\">&quot;-&quot;</span> &gt; mul_expr)[detail::calc_op(std::minus&lt;<span class=\"synType\">int</span>&gt;<span class=\"synError\">{</span>})]\n      )\n    ;\n\n  <span class=\"synType\">auto</span> <span class=\"synType\">const</span> expression_def =\n      add_expr[detail::assign()]\n    ;\n\n  BOOST_SPIRIT_DEFINE(\n      primary,\n      neg_expr,\n      mul_expr,\n      add_expr,\n      expression\n      );\n\n} <span class=\"synComment\">// namespace grammar</span>\n<span class=\"synStatement\">using</span> grammar::expression;\n\n<span class=\"synType\">int</span> main()\n{\n  std::string str;\n  std::getline(std::cin, str);\n\n  <span class=\"synType\">auto</span> first(std::cbegin(str));\n  <span class=\"synType\">auto</span> <span class=\"synType\">const</span> last(std::cend(str));\n\n  <span class=\"synType\">int</span> result;\n  <span class=\"synType\">bool</span> success = x3::phrase_parse(first, last, expression, x3::ascii::space, result);\n\n  <span class=\"synStatement\">if</span> (!success || first != last) {\n    std::cerr &lt;&lt; <span class=\"synConstant\">&quot;Parse failed.&quot;</span> &lt;&lt; std::endl;\n    <span class=\"synStatement\">return</span> <span class=\"synConstant\">1</span>;\n  }\n\n  std::cout &lt;&lt; <span class=\"synConstant\">&quot;Parsed: &quot;</span> &lt;&lt; result &lt;&lt; std::endl;\n  <span class=\"synStatement\">return</span> <span class=\"synConstant\">0</span>;\n}\n</pre>\n\n<p>実行してみます．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ clang++ -std=c++14 main.cpp\n$ ./a.out\n1 + 2 * 3\nParsed: 7\n$ ./a.out\n(1 + 2) * 3\nParsed: 9</pre>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>の優先順位が正しく解決できていることが確認出来ます．</p>\n\n<h2>まとめ</h2>\n\n<p>今回は，セマンティックアクションで計算自体を行ってしまいましたが，普通は抽象<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%CC%DA\">構文木</a>(AST) に変換するためにセマンティックアクションを使うのが正道だと思います．<br/>\n<code>X3</code> は AST のための色々を提供してくれていますが，自前で作った AST でもちょっと苦労はするかもしれませんが変換できるはずなので，時間があれば，自前 AST に変換してから実行する電卓も作ってみたいと思います．</p>\n\n<p>また，AST に変換して計算する場合，AST に位置情報を付与することで，エラーレポートが便利になったりするはずです( 0 除算のエラーを通知する際，どの部分でのエラーなのかを吐いてくれればうれしいですよね).<br/>\nパース失敗時にもどこで失敗したのかをレポートしてくれたほうが便利です．<br/>\n<code>X3</code> で <code>on_error</code>, <code>on_success</code> を使ってこれらを実装してみようと考えています．</p>\n\n<p>今回のコードでは <code>decltype(auto)</code> など，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>14 の機能を使っています．<code>X3</code> は <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>14 前提のライブラリなので，迷いなくこういった機能を使用できて幸せデスね．</p>\n\n---\n\n---\n","contentMarkdown":"\n<p><iframe src=\"http://agtn.hatenablog.com/embed/2015/12/17/190505\" title=\"Boost.Spirit.X3 の練習1 - プログラミングのメモ帳➚\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://agtn.hatenablog.com/entry/2015/12/17/190505\">agtn.hatenablog.com</a></cite>\n<iframe src=\"http://agtn.hatenablog.com/embed/2015/12/17/232003\" title=\"Boost.Spirit.X3 の練習 2 - プログラミングのメモ帳➚\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://agtn.hatenablog.com/entry/2015/12/17/232003\">agtn.hatenablog.com</a></cite></p>\n\n<p>引き続き，<code>Boost.Spirit.X3</code> です．<br/>\n今回は，前回までの知識をつかって，簡易電卓を実装してみます．</p>\n\n<h2>仕様</h2>\n\n<p>今回定義する電卓は，</p>\n\n<ul>\n<li><code>+</code></li>\n<li><code>-</code></li>\n<li><code>*</code></li>\n<li><code>/</code></li>\n</ul>\n\n<p>の 4 つの演算と単項の <code>-</code> をサポートします．<br/>\nまた，整数型のみを扱うものとします．<br/>\n<code>(</code>, <code>)</code> でくくることで，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>の結合優先順位を書き換えられ，<code>*</code> と <code>/</code> は <code>+</code> と <code>-</code> より優先されるとします．</p>\n\n<p>要するに整数の四則演算のみをサポートする電卓です．</p>\n\n<p>このような電卓を実装するサンプルは <code>Boost.Spirit.X3</code> 以外のライブラリ/<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB\">ツール</a>でも大量に出てくると思います．<br/>\n今回は，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>そのものというよりは <code>Boost.Spirit.X3</code> の使い方についてメモしたいので，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>そのものの話はぐぐってみてください．</p>\n\n<h2>パーサの骨格</h2>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>の結合規則をサポートするために，<code>primary</code>(定数と <code>()</code> で囲まれた式), <code>neg_expr</code>(単項 <code>-</code>), <code>mul_expr</code>(<code>*</code>, <code>/</code>), <code>add_expr</code>(<code>+</code>, <code>-</code>), <code>expression</code> というパーサをそれぞれ定義します．<br/>\n先頭から順に結合強度が強くなっています．(<code>expression</code> が最弱, <code>primary</code> が最強)</p>\n\n<p><code>primary</code> は <code>()</code> で囲まれた式，つまり <code>\"(\" &gt; expression &gt; \")\"</code> を受け付ける必要があり，また，<code>primary</code> 自体も <code>expression</code> の一部です．<br/>\nしたがって，この規則を定義するためには，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的なパーサを記述する必要があります．</p>\n\n<p><code>X3</code> で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>的なパーサを記述する方法は<a href=\"http://agtn.hatenablog.com/entry/2015/12/17/232003\">前回の記事</a>にまとめました．</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink>  <span class=\"synType\">struct</span> primary;\n  <span class=\"synType\">struct</span> neg_expr;\n  <span class=\"synType\">struct</span> mul_expr;\n  <span class=\"synType\">struct</span> add_expr;\n  <span class=\"synType\">struct</span> expression;\n\n  x3::rule&lt;primary, <span class=\"synType\">int</span>&gt; <span class=\"synType\">const</span> primary;\n  x3::rule&lt;neg_expr, <span class=\"synType\">int</span>&gt; <span class=\"synType\">const</span> neg_expr;\n  x3::rule&lt;mul_expr, <span class=\"synType\">int</span>&gt; <span class=\"synType\">const</span> mul_expr;\n  x3::rule&lt;add_expr, <span class=\"synType\">int</span>&gt; <span class=\"synType\">const</span> add_expr;\n  x3::rule&lt;expression, <span class=\"synType\">int</span>&gt; <span class=\"synType\">const</span> expression;\n</pre>\n\n<p>それぞれのパーサは attribute として整数型を持ちます．ここに演算結果が格納されることになります．<br/>\n<code>struct primary</code> などは，今は前方宣言のみで十分です．<code>on_error</code> などを実装したくなった時に定義します．</p>\n\n<h2>primary</h2>\n\n<p>まずは <code>primary</code> を定義します.<br/>\n<code>primary</code> は整数定数か， <code>()</code> で囲まれた <code>expression</code> を受理します．</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">auto</span> <span class=\"synType\">const</span> primary_def =\n    x3::int_\n  | <span class=\"synConstant\">&quot;(&quot;</span> &gt; expression &gt; <span class=\"synConstant\">&quot;)&quot;</span>\n  ;\n</pre>\n\n<p>attribute を考慮しなければこんな感じでしょうか．<code>expression</code> は既に宣言されているので使用可能です．(<code>expression</code> の実装がこの時点で見えていなくても使用できます.)</p>\n\n<p>単純に attribute を結果として返すセマンティックアクションはこの後もよく出てくるので，ヘルパとして定義しておきます．</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">namespace</span> detail {\n\n  decltype(<span class=\"synType\">auto</span>) assign()\n  {\n    <span class=\"synStatement\">using</span> x3::_attr;\n    <span class=\"synStatement\">using</span> x3::_val;\n    <span class=\"synStatement\">return</span> [](<span class=\"synType\">auto</span>&amp;&amp; ctx) { _val(ctx) = _attr(ctx); };\n  }\n\n} <span class=\"synComment\">// namespace detail</span>\n</pre>\n\n<p><code>assign</code> は attribute を結果に代入する関数オブジェクトを返します．<br/>\n関数にする必要が特にありませんが，この後出てくるヘルパと見た目を合わせたいので関数にしました．</p>\n\n<p>これを使うと，</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">auto</span> primary_def =\n    x3::int_[detail::assign()]\n  | (<span class=\"synConstant\">&quot;(&quot;</span> &gt; expression &gt; <span class=\"synConstant\">&quot;)&quot;</span>)[detail::assign()]\n  ;\n</pre>\n\n<p>こんな感じで <code>primary</code> が定義できます．</p>\n\n<h2>単項マイナス</h2>\n\n<p>次に <code>neg_expr</code> を定義します．\nセマンティックアクションを考えなければ，</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">auto</span> <span class=\"synType\">const</span> neg_expr_def =\n    primary\n  | <span class=\"synConstant\">&quot;-&quot;</span> &gt; primary\n  ;\n</pre>\n\n<p>となります．<br/>\n<code>\"-\" &gt; primary</code> のセマンティックアクションとしては，attribute を符号反転して結果に格納するというアクションが求められます．<br/>\nここはちょっと汎用的に，attribute に関数オブジェクトを適用して結果に格納するアクションを返すような関数を定義して解決してみます．</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">namespace</span> detail {\n  <span class=\"synType\">template</span> &lt;<span class=\"synType\">typename</span> F&gt;\n  decltype(<span class=\"synType\">auto</span>) assign_f(F&amp;&amp; func)\n  {\n    <span class=\"synStatement\">return</span> [func](<span class=\"synType\">auto</span>&amp;&amp; ctx) { _val(ctx) = func(_attr(ctx)); };\n  }\n} <span class=\"synComment\">// namespace detail</span>\n</pre>\n\n<p><code>assign_f</code> は <code>assign</code> と異なり，関数オブジェクトを１つ引数に取ります．<br/>\nそして，その関数オブジェクトを <code>_attr(ctx)</code> に適用し結果に格納します．</p>\n\n<p>これを使って，<code>neg_expr</code> は</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">auto</span> <span class=\"synType\">const</span> neg_expr_def =\n    primary[detail::assign()]\n  | (<span class=\"synConstant\">&quot;-&quot;</span> &gt; primary)[detail::assign(std::negate&lt;<span class=\"synType\">int</span>&gt;<span class=\"synError\">{</span>})]\n  ;\n</pre>\n\n<p>となります．<code>std::negate</code> は <code>&lt;functional&gt;</code> で定義された型で，ここでは <code>int</code> 型の値を符号反転する関数オブジェクトとして使用しています．</p>\n\n<h2>乗除</h2>\n\n<p>次に結合強度が強いのは <code>*</code> と <code>/</code> です．<br/>\nちょっとわかりにくいですが，セマンティックアクションを無視すれば，<code>mul_expr</code> は</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">auto</span> <span class=\"synType\">const</span> mul_expr_def =\n    neg_expr\n    &gt;&gt; *(\n        (<span class=\"synConstant\">&quot;*&quot;</span> &gt;&gt; neg_expr)\n      | (<span class=\"synConstant\">&quot;/&quot;</span> &gt;&gt; neg_expr)\n    )\n  ;\n</pre>\n\n<p>と定義できます．<code>mul_expr</code> は <code>1</code> や <code>(1 + 2)</code>, <code>-1</code> の後に，<code>* 1</code> とか <code>/ -3</code> とか <code>* (1 - 2)</code> とかが 0 回以上現れるような式です．<br/>\n<code>1 * -2</code> はちょっと気持ち悪い気もしますが… 今気がついたので許してください．</p>\n\n<p>セマンティックアクションとしては，<code>(\"*\" &gt;&gt; neg_expr)</code> が現れる度に，<code>_val(ctx)</code> を <code>_val(ctx) * _attr(ctx)</code> に更新すれば良いです．<br/>\n始めの <code>neg_expr</code> の結果を <code>_val(ctx)</code> に格納すれば，<code>_val(ctx)</code> は常に現在の計算結果を表すことになります．<code>(\"*\" &gt;&gt; neg_expr)</code> は現在の計算結果に，今処理した式(<code>*</code> の後に続く式のこと) を処理した結果をかければ良いということです．</p>\n\n<p>というわけで分かりにくいとは思いますが，ほしいアクションは，</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink>[](<span class=\"synType\">auto</span>&amp;&amp; ctx) { _val(ctx) = _val(ctx) * _attr(ctx); }\n</pre>\n\n<p>です．</p>\n\n<p>さて，では <code>/</code> の場合を考えます．<br/>\n<code>/</code> の場合であってもほとんどは <code>*</code> と同じであることがわかります．<br/>\nほしいアクションは</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink>[](<span class=\"synType\">auto</span>&amp;&amp; ctx) { _val(ctx) = _val(ctx) / _attr(ctx); }\n</pre>\n\n<p>であり，<code>*</code> と <code>/</code> の違いしか有りません．</p>\n\n<p>そこでこれも関数にまとめてしまいます．</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">namespace</span> detail {\n\n  <span class=\"synType\">template</span> &lt;<span class=\"synType\">typename</span> Op&gt;\n  decltype(<span class=\"synType\">auto</span>) calc_op(Op&amp;&amp; op)\n  {\n    <span class=\"synStatement\">return</span> [op](<span class=\"synType\">auto</span>&amp;&amp; ctx) { _val(ctx) = op(_val(ctx), _attr(ctx)); };\n  }\n\n} <span class=\"synComment\">// namespace detail</span>\n</pre>\n\n<p>こんな関数を定義して，</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">auto</span> <span class=\"synType\">const</span> mul_expr_def =\n    neg_expr[detail::assign()]\n    &gt;&gt; *(\n        (<span class=\"synConstant\">&quot;*&quot;</span> &gt;&gt; neg_expr)[detail::calc_op(std::multiplies&lt;<span class=\"synType\">int</span>&gt;<span class=\"synError\">{</span>})]\n      | (<span class=\"synConstant\">&quot;/&quot;</span> &gt;&gt; neg_expr)[detail::calc_op(std::divides&lt;<span class=\"synType\">int</span>&gt;<span class=\"synError\">{</span>})]\n    )\n  ;\n</pre>\n\n<p>と使います．<br/>\n<code>calc_op</code> は関数オブジェクトを引数に取り，<code>_val(ctx)</code> と <code>_attr(ctx)</code> に適用した結果を格納するアクションを返します．</p>\n\n<p><code>add_expr</code> は <code>mul_expr</code> とほぼおなじなので詳細はスキップします．</p>\n\n<h2>expression</h2>\n\n<p>最後に <code>expression</code> です．これは単純に <code>add_expr</code> と一致します．<br/>\n命名のわかりやすさと，今後拡張していく際に便利そうということで分けてあるだけです．</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">auto</span> <span class=\"synType\">const</span> expression_def =\n    add_expr[detail::assign()]\n  ;\n</pre>\n\n<h2>確認</h2>\n\n<p>コード全体を掲載します．</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;boost/spirit/home/x3.hpp&gt;</span>\n\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;iostream&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;string&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;functional&gt;</span>\n\n<span class=\"synType\">namespace</span> x3 = boost::spirit::x3;\n\n<span class=\"synType\">namespace</span> grammar {\n\n  <span class=\"synType\">namespace</span> detail {\n\n    decltype(<span class=\"synType\">auto</span>) assign()\n    {\n      <span class=\"synStatement\">using</span> x3::_attr;\n      <span class=\"synStatement\">using</span> x3::_val;\n      <span class=\"synStatement\">return</span> [](<span class=\"synType\">auto</span>&amp;&amp; ctx) { _val(ctx) = _attr(ctx); };\n    }\n\n    <span class=\"synType\">template</span> &lt;<span class=\"synType\">typename</span> F&gt;\n    decltype(<span class=\"synType\">auto</span>) assign_f(F&amp;&amp; func)\n    {\n      <span class=\"synStatement\">return</span> [func](<span class=\"synType\">auto</span>&amp;&amp; ctx) { _val(ctx) = func(_attr(ctx)); };\n    }\n\n    <span class=\"synType\">template</span> &lt;<span class=\"synType\">typename</span> Op&gt;\n    decltype(<span class=\"synType\">auto</span>) calc_op(Op&amp;&amp; op)\n    {\n      <span class=\"synStatement\">return</span> [op](<span class=\"synType\">auto</span>&amp;&amp; ctx) { x3::_val(ctx) = op(x3::_val(ctx), x3::_attr(ctx)); };\n    }\n\n  } <span class=\"synComment\">// namespace detail</span>\n\n  <span class=\"synType\">struct</span> primary;\n  <span class=\"synType\">struct</span> neg_expr;\n  <span class=\"synType\">struct</span> mul_expr;\n  <span class=\"synType\">struct</span> add_expr;\n  <span class=\"synType\">struct</span> expression;\n\n  x3::rule&lt;primary, <span class=\"synType\">int</span>&gt; <span class=\"synType\">const</span> primary;\n  x3::rule&lt;neg_expr, <span class=\"synType\">int</span>&gt; <span class=\"synType\">const</span> neg_expr;\n  x3::rule&lt;mul_expr, <span class=\"synType\">int</span>&gt; <span class=\"synType\">const</span> mul_expr;\n  x3::rule&lt;add_expr, <span class=\"synType\">int</span>&gt; <span class=\"synType\">const</span> add_expr;\n  x3::rule&lt;expression, <span class=\"synType\">int</span>&gt; <span class=\"synType\">const</span> expression;\n\n  <span class=\"synType\">auto</span> <span class=\"synType\">const</span> primary_def =\n      x3::int_[detail::assign()]\n    | (<span class=\"synConstant\">&quot;(&quot;</span> &gt; expression &gt; <span class=\"synConstant\">&quot;)&quot;</span>)[detail::assign()]\n    ;\n\n  <span class=\"synType\">auto</span> <span class=\"synType\">const</span> neg_expr_def =\n      primary[detail::assign()]\n    | (<span class=\"synConstant\">&quot;-&quot;</span> &gt; primary)[detail::assign_f(std::negate&lt;<span class=\"synType\">int</span>&gt;<span class=\"synError\">{</span>})]\n    ;\n\n  <span class=\"synType\">auto</span> <span class=\"synType\">const</span> mul_expr_def =\n      neg_expr[detail::assign()]\n      &gt;&gt; *(\n          (<span class=\"synConstant\">&quot;*&quot;</span> &gt;&gt; neg_expr)[detail::calc_op(std::multiplies&lt;<span class=\"synType\">int</span>&gt;<span class=\"synError\">{</span>})]\n        | (<span class=\"synConstant\">&quot;/&quot;</span> &gt;&gt; neg_expr)[detail::calc_op(std::divides&lt;<span class=\"synType\">int</span>&gt;<span class=\"synError\">{</span>})]\n      )\n    ;\n\n  <span class=\"synType\">auto</span> <span class=\"synType\">const</span> add_expr_def =\n      mul_expr[detail::assign()]\n      &gt;&gt; *(\n          (<span class=\"synConstant\">&quot;+&quot;</span> &gt; mul_expr)[detail::calc_op(std::plus&lt;<span class=\"synType\">int</span>&gt;<span class=\"synError\">{</span>})]\n        | (<span class=\"synConstant\">&quot;-&quot;</span> &gt; mul_expr)[detail::calc_op(std::minus&lt;<span class=\"synType\">int</span>&gt;<span class=\"synError\">{</span>})]\n      )\n    ;\n\n  <span class=\"synType\">auto</span> <span class=\"synType\">const</span> expression_def =\n      add_expr[detail::assign()]\n    ;\n\n  BOOST_SPIRIT_DEFINE(\n      primary,\n      neg_expr,\n      mul_expr,\n      add_expr,\n      expression\n      );\n\n} <span class=\"synComment\">// namespace grammar</span>\n<span class=\"synStatement\">using</span> grammar::expression;\n\n<span class=\"synType\">int</span> main()\n{\n  std::string str;\n  std::getline(std::cin, str);\n\n  <span class=\"synType\">auto</span> first(std::cbegin(str));\n  <span class=\"synType\">auto</span> <span class=\"synType\">const</span> last(std::cend(str));\n\n  <span class=\"synType\">int</span> result;\n  <span class=\"synType\">bool</span> success = x3::phrase_parse(first, last, expression, x3::ascii::space, result);\n\n  <span class=\"synStatement\">if</span> (!success || first != last) {\n    std::cerr &lt;&lt; <span class=\"synConstant\">&quot;Parse failed.&quot;</span> &lt;&lt; std::endl;\n    <span class=\"synStatement\">return</span> <span class=\"synConstant\">1</span>;\n  }\n\n  std::cout &lt;&lt; <span class=\"synConstant\">&quot;Parsed: &quot;</span> &lt;&lt; result &lt;&lt; std::endl;\n  <span class=\"synStatement\">return</span> <span class=\"synConstant\">0</span>;\n}\n</pre>\n\n<p>実行してみます．</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ clang++ -std=c++14 main.cpp\n$ ./a.out\n1 + 2 * 3\nParsed: 7\n$ ./a.out\n(1 + 2) * 3\nParsed: 9</pre>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>の優先順位が正しく解決できていることが確認出来ます．</p>\n\n<h2>まとめ</h2>\n\n<p>今回は，セマンティックアクションで計算自体を行ってしまいましたが，普通は抽象<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%CC%DA\">構文木</a>(AST) に変換するためにセマンティックアクションを使うのが正道だと思います．<br/>\n<code>X3</code> は AST のための色々を提供してくれていますが，自前で作った AST でもちょっと苦労はするかもしれませんが変換できるはずなので，時間があれば，自前 AST に変換してから実行する電卓も作ってみたいと思います．</p>\n\n<p>また，AST に変換して計算する場合，AST に位置情報を付与することで，エラーレポートが便利になったりするはずです( 0 除算のエラーを通知する際，どの部分でのエラーなのかを吐いてくれればうれしいですよね).<br/>\nパース失敗時にもどこで失敗したのかをレポートしてくれたほうが便利です．<br/>\n<code>X3</code> で <code>on_error</code>, <code>on_success</code> を使ってこれらを実装してみようと考えています．</p>\n\n<p>今回のコードでは <code>decltype(auto)</code> など，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>14 の機能を使っています．<code>X3</code> は <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>14 前提のライブラリなので，迷いなくこういった機能を使用できて幸せデスね．</p>\n\n---\n\n---\n","slug":"Boost.Spirit.X3_で簡易電卓を実装_1","title":"Boost.Spirit.X3 で簡易電卓を実装 1","timestamp":1450448825000,"tags":[]}}},"__N_SSG":true}