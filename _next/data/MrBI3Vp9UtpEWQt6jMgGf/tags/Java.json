{"pageProps":{"tag":"Java","postMetas":[{"rawMarkdown":"---\ntitle: pgjdbc の SQLException.getErrorCode() は常に 0 を返す\ndate: 2021-06-23\ntags:\n  - Java\n  - Kotlin\n---\n\n最近になって仕事で初めて JVM 上で動く言語を書いています。\nそこでちょっとハマったことがあり、色々調べて解決したのでメモがてら共有しようと思い、記事にすることにしました。\nもっと遭遇している人多そうなんですが、パッとググった限り日本語でこの問題について言及している記事が見当たらなかったので、有用だと信じています。（経験ある JDBC ユーザにとっては当たり前なんですかね？）\n\n## TL;DR\n\nhttps://github.com/pgjdbc/pgjdbc を使っていると、 `java.sql.SQLException.getErrorCode()` が常に 0 になる。\n代わりに `java.sql.SQLException.getSQLState()` を使おう。\n\n## 問題\n\nUNIQUE 制約をはったテーブルに対して「レコードがすでにあればそれを SELECT する。なければ新規に作る。」という操作をしたいことがあります。\nそういったときに、文字通り「1. まず SELECT し、 2. なかったら INSERT」というふうに実装してしまうと、同時に二つ以上のリクエストが処理されると想定通りの挙動になりません。（1. と 2. の間に別のリクエストによって 2. が実行されるかもしれない。）\nそこで、こういったケースでは「1. まず INSERT を試み、 2. UNIQUE 制約に引っ掛かったら SELECT」というふうに実装するのが正しいです。（Rails 的にいうと `find_or_create_by` ではなく、 `create_or_find_by` しよう、という話です。）\n\n```kotlin\nval record = try {\n    Users.insertAndGet(...)\n} catch (ex: SQLException) {\n    if ( /* ex が UNIQUE VIOLATION である */ ) {\n\t    Users.select(...)\n\t} else {\n\t    throw ex\n\t}\n}\n```\n\nこんな感じです。（疑似コードですが）\n\nさて、ここで `/* ex が UNIQUE VIOLATION である */` ことの確認をする方法が必要です。\n[`java.sql.SQLException` のドキュメント](https://docs.oracle.com/en/java/javase/13/docs/api/java.sql/java/sql/SQLException.html) を見てみると、`int getErrorCode()` という API があるので、これを使ってみます。vendor-specific exception code が取得できる、と説明があります。\n[PostgreSQL のエラーコード一覧](https://www.postgresql.org/docs/13/errcodes-appendix.html) によると、23505 が `unique_violation` らしいので、以下のようなコードで判定できるように見えます。\n\n```kotlin\nconst val UNIQUE_VIOLATION = 23505\nif (ex.errorCode == UNIQUE_VIOLATION) {\n    ...\n}\n```\n\n## 動かない！\n\nこれでテスト書いてうまく動くことを確かめよう〜と思ったら、なぜか全然テストが通らない！\nしかも `SQLException` が投げられていて、その内容が完全に UNIQUE 制約に引っ掛かっているというエラーでした。\n何事...\n\nデバッガで追ってみると、 `ex.errorCode == UNIQUE_VIOLATION` が false になっているようです。エラーは確かに `unique_violation` だというのに。\n\nさらにデバッガでよく見てみると、なんと `ex.errorCode` が 0 になっています。\n何事...\n\n## pgjdbc は getErrorCode に対応していなかった\n\n[PSQLException の実装](https://github.com/pgjdbc/pgjdbc/blob/master/pgjdbc/src/main/java/org/postgresql/util/PSQLException.java) をよく見てみると、そもそも `getErrorCode` の定義がありません。どうやら常にデフォルトの 0 を返すようです。\n\nhttps://github.com/pgjdbc/pgjdbc/pull/623 で対応が試みられていますが Close されています。\nPostgreSQL のエラーコードはアルファベットを含むものもあり、全てを統一的に `getErrorCode` で返すことができないというのが理由でした。\n言われてみれば当たり前だし、確かによくみると [PostgreSQL のエラーコード一覧](https://www.postgresql.org/docs/13/errcodes-appendix.html) にはちらほらアルファベットがありますね...\n\n## 対応\n\n`String SQLException.getSQLState()` を使います。\nさらに [PSQLState](https://github.com/pgjdbc/pgjdbc/blob/master/pgjdbc/src/main/java/org/postgresql/util/PSQLState.java) という enum が定義されているので、これを併用して\n\n```kotlin\nif (ex.sqlState == PSQLState.UNIQUE\\_VIOLATION.state) {\n    ...\n}\n```\n\nとすれば期待通りの挙動になります。\n\n## まとめ\n\nしかしこの挙動、もうちょっとドキュメントとかに書いてくれていてもいいんじゃないかなぁと思ったんですがどうなんでしょう。\n`PSQLException` のドキュメントを見ても何も書いていないんですよね。\nPostgreSQL のドキュメントをちゃんと見れば Error Code が int で表現しきれないことは自明だ、と言われればそれはそうなんですが。\n\npgjdbc の話からは逸れますが、こういう「統一インターフェースを標準で提供するから内部実装は各自ライブラリでやって差し替える」系のライブラリ、統一インターフェースの方のドキュメントばかり読んでしまって個々のライブラリのドキュメントをあまり読まなくても使えてしまうので、こういう罠があるとハマりますね。よくできているということでもあると思います。\n（まぁ今回は個々のライブラリのドキュメントを見ても何も書いていないと思うのですが...）\n\npgjdbc には別の問題でもハマっていて、そっちは PR 出して無事マージ & リリースされたので、いつかその問題についても書いてみようと思います。\n","contentMarkdown":"\n最近になって仕事で初めて JVM 上で動く言語を書いています。\nそこでちょっとハマったことがあり、色々調べて解決したのでメモがてら共有しようと思い、記事にすることにしました。\nもっと遭遇している人多そうなんですが、パッとググった限り日本語でこの問題について言及している記事が見当たらなかったので、有用だと信じています。（経験ある JDBC ユーザにとっては当たり前なんですかね？）\n\n## TL;DR\n\nhttps://github.com/pgjdbc/pgjdbc を使っていると、 `java.sql.SQLException.getErrorCode()` が常に 0 になる。\n代わりに `java.sql.SQLException.getSQLState()` を使おう。\n\n## 問題\n\nUNIQUE 制約をはったテーブルに対して「レコードがすでにあればそれを SELECT する。なければ新規に作る。」という操作をしたいことがあります。\nそういったときに、文字通り「1. まず SELECT し、 2. なかったら INSERT」というふうに実装してしまうと、同時に二つ以上のリクエストが処理されると想定通りの挙動になりません。（1. と 2. の間に別のリクエストによって 2. が実行されるかもしれない。）\nそこで、こういったケースでは「1. まず INSERT を試み、 2. UNIQUE 制約に引っ掛かったら SELECT」というふうに実装するのが正しいです。（Rails 的にいうと `find_or_create_by` ではなく、 `create_or_find_by` しよう、という話です。）\n\n```kotlin\nval record = try {\n    Users.insertAndGet(...)\n} catch (ex: SQLException) {\n    if ( /* ex が UNIQUE VIOLATION である */ ) {\n\t    Users.select(...)\n\t} else {\n\t    throw ex\n\t}\n}\n```\n\nこんな感じです。（疑似コードですが）\n\nさて、ここで `/* ex が UNIQUE VIOLATION である */` ことの確認をする方法が必要です。\n[`java.sql.SQLException` のドキュメント](https://docs.oracle.com/en/java/javase/13/docs/api/java.sql/java/sql/SQLException.html) を見てみると、`int getErrorCode()` という API があるので、これを使ってみます。vendor-specific exception code が取得できる、と説明があります。\n[PostgreSQL のエラーコード一覧](https://www.postgresql.org/docs/13/errcodes-appendix.html) によると、23505 が `unique_violation` らしいので、以下のようなコードで判定できるように見えます。\n\n```kotlin\nconst val UNIQUE_VIOLATION = 23505\nif (ex.errorCode == UNIQUE_VIOLATION) {\n    ...\n}\n```\n\n## 動かない！\n\nこれでテスト書いてうまく動くことを確かめよう〜と思ったら、なぜか全然テストが通らない！\nしかも `SQLException` が投げられていて、その内容が完全に UNIQUE 制約に引っ掛かっているというエラーでした。\n何事...\n\nデバッガで追ってみると、 `ex.errorCode == UNIQUE_VIOLATION` が false になっているようです。エラーは確かに `unique_violation` だというのに。\n\nさらにデバッガでよく見てみると、なんと `ex.errorCode` が 0 になっています。\n何事...\n\n## pgjdbc は getErrorCode に対応していなかった\n\n[PSQLException の実装](https://github.com/pgjdbc/pgjdbc/blob/master/pgjdbc/src/main/java/org/postgresql/util/PSQLException.java) をよく見てみると、そもそも `getErrorCode` の定義がありません。どうやら常にデフォルトの 0 を返すようです。\n\nhttps://github.com/pgjdbc/pgjdbc/pull/623 で対応が試みられていますが Close されています。\nPostgreSQL のエラーコードはアルファベットを含むものもあり、全てを統一的に `getErrorCode` で返すことができないというのが理由でした。\n言われてみれば当たり前だし、確かによくみると [PostgreSQL のエラーコード一覧](https://www.postgresql.org/docs/13/errcodes-appendix.html) にはちらほらアルファベットがありますね...\n\n## 対応\n\n`String SQLException.getSQLState()` を使います。\nさらに [PSQLState](https://github.com/pgjdbc/pgjdbc/blob/master/pgjdbc/src/main/java/org/postgresql/util/PSQLState.java) という enum が定義されているので、これを併用して\n\n```kotlin\nif (ex.sqlState == PSQLState.UNIQUE\\_VIOLATION.state) {\n    ...\n}\n```\n\nとすれば期待通りの挙動になります。\n\n## まとめ\n\nしかしこの挙動、もうちょっとドキュメントとかに書いてくれていてもいいんじゃないかなぁと思ったんですがどうなんでしょう。\n`PSQLException` のドキュメントを見ても何も書いていないんですよね。\nPostgreSQL のドキュメントをちゃんと見れば Error Code が int で表現しきれないことは自明だ、と言われればそれはそうなんですが。\n\npgjdbc の話からは逸れますが、こういう「統一インターフェースを標準で提供するから内部実装は各自ライブラリでやって差し替える」系のライブラリ、統一インターフェースの方のドキュメントばかり読んでしまって個々のライブラリのドキュメントをあまり読まなくても使えてしまうので、こういう罠があるとハマりますね。よくできているということでもあると思います。\n（まぁ今回は個々のライブラリのドキュメントを見ても何も書いていないと思うのですが...）\n\npgjdbc には別の問題でもハマっていて、そっちは PR 出して無事マージ & リリースされたので、いつかその問題についても書いてみようと思います。\n","slug":"pgjdbc-error-code","title":"pgjdbc の SQLException.getErrorCode() は常に 0 を返す","timestamp":1624406400000,"tags":["Java","Kotlin"]}]},"__N_SSG":true}