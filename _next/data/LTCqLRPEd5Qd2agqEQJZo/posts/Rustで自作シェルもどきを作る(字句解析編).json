{"pageProps":{"post":{"content":"<p>Rust が最近とてもおもしろいので、勉強がてら自作シェルみたいなものを作ってみたいと思います。<br>\nとはいえ、C 言語でさえろくにシステムプログラムを書いたことがないので、道は険しくなりそうです。</p>\n<h2>バージョン</h2>\n<p>0.13.0-nightly を使用しました。</p>\n<p>コード全文はこちら\n<a href=\"https://github.com/agatan/rsh\">agatan/rsh</a></p>\n<h2>字句解析</h2>\n<p>さて、シェルといったらまずはユーザの入力を受け付けてパースし、コマンドを実行しなくてはなりません。<br>\nというわけでまず初めにパース部分についてやってみます。<br>\nさくっと終わらせたかったのですが、どうもまだ<code>String</code>と<code>&#x26;str</code>とかそのへんで詰まってしまいます...</p>\n<h2>Token の規定</h2>\n<p><code>enum</code>を使って<code>Token</code>を列挙します。<br>\n一応最終的にはパイプやらリダイレクトやらも実装したいなーと思っているので、その辺を考慮に入れた実装にしてみました。</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Token</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Str</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token class-name\">Pipe</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token class-name\">RedirectTo</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token class-name\">RedirectFrom</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token class-name\">Ampersand</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>Str</code>は特殊な文字以外の文字列ですから、要素として<code>String</code>を保持させておきました。</p>\n<h2>parser</h2>\n<p>パースには(おもしろそうだったので)<code>iterator</code>トレイトを実装させることにしました。<br>\n実際つかうときにはいらない気もしますが、ちょっとためしたかったので。</p>\n<p>構造体として<code>Parser</code>を作ります。ソースとなる文字列と、現在どこまでパース済みなのかを保持する<code>current</code>を持たせました。</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Parser</span> <span class=\"token punctuation\">{</span>\n    src<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> current<span class=\"token punctuation\">:</span> uint<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>この構造体に<code>Iterator</code>トレイトを実装すればよいのですが、補助関数としていくつか実装しておきます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">impl</span> <span class=\"token class-name\">Parser</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Parser</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Parser</span> <span class=\"token punctuation\">{</span> src<span class=\"token punctuation\">:</span> src<span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">current_char</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">char</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">.</span><span class=\"token function\">char_at</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">skip_whitespace</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">current_char</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">is_whitespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>current <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>current <span class=\"token operator\">>=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">.</span><span class=\"token function\">char_len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_pipe</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Token</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">current_char</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char string\">'|'</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>current <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">skip_whitespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Token</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Pipe</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">None</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_ampersand</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Token</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">current_char</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char string\">'&#x26;'</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>current <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">skip_whitespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Token</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Ampersand</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">None</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_redirect_to</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Token</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">current_char</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char string\">'>'</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>current <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">skip_whitespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Token</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">RedirectTo</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">None</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_redirect_from</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Token</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">current_char</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char string\">'&#x3C;'</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>current <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">skip_whitespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Token</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">RedirectFrom</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_str</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Token</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> i <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token operator\">!</span><span class=\"token constant\">KEYWORDS</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains_char</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">.</span><span class=\"token function\">char_at</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>current <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">None</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Token</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Str</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">.</span><span class=\"token function\">slice_chars</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">skip_whitespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            result\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n<p><code>new</code>は新しいパーサーを生成するための関数です。<code>Parser</code>は文字列の所有権を要求していますが、入力された文字列はパースする以外に使い道は無いと思ったので大丈夫と判断しました。</p>\n<p><code>current_char</code>は現在注目している文字を返します。\n<code>skip_whitespace</code>は空白文字を飛ばすように<code>self.current</code>をいじります。パーサーでは、基本的に 1 トークンを読み終えたら空白を飛ばして次のトークンになりうる文字の先頭までジャンプするべきなので、必ずトークンを読んだらこの関数を呼び出します。</p>\n<p>のこりの関数は、それぞれの<code>Token</code>を取得することを試みる関数です。<br>\n<code>Option&#x3C;Token></code>が帰ってくるので、<code>None</code>が帰ってきたら今みているトークンは別の種類のものであるといえます。</p>\n<p>これらを用いて<code>Iterator</code>を実装しました。</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">impl</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>iter<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Iterator</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Token</span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">Parser</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">next</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Token</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>current <span class=\"token operator\">>=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">.</span><span class=\"token function\">char_len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">None</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> result<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Token</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">get_pipe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">is_some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        result <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">get_ampersand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">is_some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        result <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">get_redirect_to</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">is_some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        result <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">get_redirect_from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">is_some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        result <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">get_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">is_some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">None</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>きれいじゃないコードですが、うまいやり方が他に思いつかなかったので...<br>\n純粋にある種類のトークンを取得しようと試みて<code>None</code>が帰ってきたら別の種類で試す、ということを繰り返しています。\n先頭で末尾まで読み込んだかを判定しています。\nすべての条件に当てはまらなくなったらパース失敗で<code>None</code>を返しています。</p>\n<h2>試す</h2>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>io<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">parse</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> input <span class=\"token operator\">=</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>io<span class=\"token punctuation\">::</span></span><span class=\"token function\">stdin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">read_line</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to read.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> parser <span class=\"token operator\">=</span> <span class=\"token namespace\">parse<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Parser</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> token <span class=\"token keyword\">in</span> parser <span class=\"token punctuation\">{</span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>実行結果</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">ls -a | grep foo\nStr(ls)\nStr(-a)\nPipe\nStr(grep)\nStr(foo)\nls -a| grep foo&#x26;gt;result.txt &#x26;amp;\nStr(ls)\nStr(-a)\nPipe\nStr(grep)\nStr(foo)\nRedirectTo\nStr(result.txt)\nAmpersand</code></pre></div>\n<p>このような感じになりました。\n<code>Iterator</code>を実装しているので、<code>for .. in ..</code>が使えて気持ち良いです。</p>\n<h2>反省点</h2>\n<p>パースは失敗しうる計算だから<code>Option</code>かなーどうせ<code>Option</code>かえすなら<code>Iterator</code>実装しちゃえばお得かなーとおもって漠然と実装してみましたが、パースは失敗した理由がほしいことがほとんどなのでよく考えたら<code>Result</code>を使うべきだった気がしてきました。\n効率とかは正直 Rust での効率のよい書き方がよくわかっていないのであまり気にせず、とりあえず動くものを、と作ってみました。\nあとはパーサを書いたことが殆どなかったので成功法がわからなかったので、もっときれいな書き方があるんじゃないかという気も...</p>\n<h2>今後</h2>\n<p>とりあえず動くものを、コードをたくさん書こう、の精神で進めてみます。\n次は単純なコマンド実行を実装したいです。\nといっても Rust には<code>Command</code>とか<code>Process</code>とかがあって、ちょっと読んで見た感じ割りと素直に C 言語の<code>execvp</code>とかを呼び出しているようなので、それを使えばそこまで難しくはないのかな？</p>\n<p>ソースの全文を掲載しますので、Rust 固有であってもそうでなくても、より良い書き方などありましたらご教授いただけると幸いです。よろしくお願いします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token constant\">KEYWORDS</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">&#x26;</span><span class=\"token lifetime-annotation symbol\">'static</span> <span class=\"token keyword\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"|&#x26;&#x3C;> \\n\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[deriving(Show)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Token</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Str</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Pipe</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">RedirectTo</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">RedirectFrom</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Ampersand</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Parser</span> <span class=\"token punctuation\">{</span>\n    src<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> current<span class=\"token punctuation\">:</span> uint<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Parser</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Parser</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Parser</span> <span class=\"token punctuation\">{</span> src<span class=\"token punctuation\">:</span> src<span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">current_char</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">char</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">.</span><span class=\"token function\">char_at</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">skip_whitespace</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">current_char</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">is_whitespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>current <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>current <span class=\"token operator\">>=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">.</span><span class=\"token function\">char_len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_pipe</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Token</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">current_char</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char string\">'|'</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>current <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">skip_whitespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Token</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Pipe</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">None</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_ampersand</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Token</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">current_char</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char string\">'&#x26;'</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>current <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">skip_whitespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Token</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Ampersand</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">None</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_redirect_to</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Token</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">current_char</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char string\">'>'</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>current <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">skip_whitespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Token</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">RedirectTo</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">None</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_redirect_from</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Token</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">current_char</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char string\">'&#x3C;'</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>current <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">skip_whitespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Token</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">RedirectFrom</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">None</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_str</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Token</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> i <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token operator\">!</span><span class=\"token constant\">KEYWORDS</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains_char</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">.</span><span class=\"token function\">char_at</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>current <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">None</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Token</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Str</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">.</span><span class=\"token function\">slice_chars</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">skip_whitespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            result\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>iter<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Iterator</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Token</span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">Parser</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">next</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Token</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>current <span class=\"token operator\">>=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">.</span><span class=\"token function\">char_len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">None</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> result<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Token</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">get_pipe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">is_some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        result <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">get_ampersand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">is_some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        result <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">get_redirect_to</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">is_some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        result <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">get_redirect_from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">is_some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        result <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">get_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">is_some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">None</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>io<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">parse</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> input <span class=\"token operator\">=</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>io<span class=\"token punctuation\">::</span></span><span class=\"token function\">stdin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">read_line</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to read.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> parser <span class=\"token operator\">=</span> <span class=\"token namespace\">parse<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Parser</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> token <span class=\"token keyword\">in</span> parser <span class=\"token punctuation\">{</span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n","meta":{"rawMarkdown":"---\ntitle: \"Rustで自作シェルもどきを作る(字句解析編)\"\ndate: 2014-12-21T01:15:19+09:00\ntags: [\"Rust\"]\nurl: https://qiita.com/agatan/items/8a097ead46df1c1659ff\n---\n\nRust が最近とてもおもしろいので、勉強がてら自作シェルみたいなものを作ってみたいと思います。  \nとはいえ、C 言語でさえろくにシステムプログラムを書いたことがないので、道は険しくなりそうです。\n\n## バージョン\n\n0.13.0-nightly を使用しました。\n\nコード全文はこちら\n[agatan/rsh](https://github.com/agatan/rsh)\n\n## 字句解析\n\nさて、シェルといったらまずはユーザの入力を受け付けてパースし、コマンドを実行しなくてはなりません。  \nというわけでまず初めにパース部分についてやってみます。  \nさくっと終わらせたかったのですが、どうもまだ`String`と`&str`とかそのへんで詰まってしまいます...\n\n## Token の規定\n\n`enum`を使って`Token`を列挙します。  \n一応最終的にはパイプやらリダイレクトやらも実装したいなーと思っているので、その辺を考慮に入れた実装にしてみました。\n\n```rust\nenum Token {\n\tStr(String),\n\tPipe,\n\tRedirectTo,\n\tRedirectFrom,\n\tAmpersand,\n}\n```\n\n`Str`は特殊な文字以外の文字列ですから、要素として`String`を保持させておきました。\n\n## parser\n\nパースには(おもしろそうだったので)`iterator`トレイトを実装させることにしました。  \n実際つかうときにはいらない気もしますが、ちょっとためしたかったので。\n\n構造体として`Parser`を作ります。ソースとなる文字列と、現在どこまでパース済みなのかを保持する`current`を持たせました。\n\n```rust\npub struct Parser {\n    src: String,\n    pub current: uint,\n}\n```\n\nこの構造体に`Iterator`トレイトを実装すればよいのですが、補助関数としていくつか実装しておきます。\n\n```rust\nimpl Parser {\n    pub fn new(src: String) -> Parser {\n        Parser { src: src, current: 0 }\n    }\n\n    pub fn current_char(&self) -> char {\n        self.src.char_at(self.current)\n    }\n\n    fn skip_whitespace(&mut self) {\n        while self.current_char().is_whitespace() {\n            self.current += 1;\n            if self.current >= self.src.char_len() {\n                return;\n            }\n        }\n    }\n\n    fn get_pipe(&mut self) -> Option<Token> {\n        if self.current_char() == '|' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::Pipe)\n        } else {\n            None\n        }\n    }\n\n    fn get_ampersand(&mut self) -> Option<Token> {\n        if self.current_char() == '&' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::Ampersand)\n        } else {\n            None\n        }\n    }\n\n    fn get_redirect_to(&mut self) -> Option<Token> {\n        if self.current_char() == '>' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::RedirectTo)\n        } else {\n            None\n        }\n    }\n\n    fn get_redirect_from(&mut self) -> Option<Token> {\n        if self.current_char() == '<' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::RedirectFrom)\n\n    fn get_str(&mut self) -> Option<Token> {\n        let mut i = self.current;\n        while !KEYWORDS.contains_char(self.src.char_at(i)) {\n            i += 1;\n        }\n        if i == self.current {\n            None\n        } else {\n            let result = Some(Token::Str(self.src.slice_chars(self.current, i).to_string()));\n            self.current = i;\n            self.skip_whitespace();\n            result\n        }\n    }\n}\n\n```\n\n`new`は新しいパーサーを生成するための関数です。`Parser`は文字列の所有権を要求していますが、入力された文字列はパースする以外に使い道は無いと思ったので大丈夫と判断しました。\n\n`current_char`は現在注目している文字を返します。\n`skip_whitespace`は空白文字を飛ばすように`self.current`をいじります。パーサーでは、基本的に 1 トークンを読み終えたら空白を飛ばして次のトークンになりうる文字の先頭までジャンプするべきなので、必ずトークンを読んだらこの関数を呼び出します。\n\nのこりの関数は、それぞれの`Token`を取得することを試みる関数です。  \n`Option<Token>`が帰ってくるので、`None`が帰ってきたら今みているトークンは別の種類のものであるといえます。\n\nこれらを用いて`Iterator`を実装しました。\n\n```rust\nimpl std::iter::Iterator<Token> for Parser {\n\n    fn next(&mut self) -> Option<Token> {\n        if self.current >= self.src.char_len() {\n            return None;\n        }\n        let mut result: Option<Token> = self.get_pipe();\n        if result.is_some() { return result; }\n        result = self.get_ampersand();\n        if result.is_some() { return result; }\n        result = self.get_redirect_to();\n        if result.is_some() { return result; }\n        result = self.get_redirect_from();\n        if result.is_some() { return result; }\n        result = self.get_str();\n        if result.is_some() { return result; }\n        None\n    }\n}\n```\n\nきれいじゃないコードですが、うまいやり方が他に思いつかなかったので...  \n純粋にある種類のトークンを取得しようと試みて`None`が帰ってきたら別の種類で試す、ということを繰り返しています。\n先頭で末尾まで読み込んだかを判定しています。\nすべての条件に当てはまらなくなったらパース失敗で`None`を返しています。\n\n## 試す\n\n```rust\nuse std::io;\nmod parse;\n\nfn main() {\n    loop {\n        let input = std::io::stdin().read_line().ok().expect(\"Failed to read.\");\n        let mut parser = parse::Parser::new(input);\n        for token in parser {\n            println!(\"{}\", token);\n        }\n    }\n}\n```\n\n実行結果\n\n```\nls -a | grep foo\nStr(ls)\nStr(-a)\nPipe\nStr(grep)\nStr(foo)\nls -a| grep foo>result.txt &\nStr(ls)\nStr(-a)\nPipe\nStr(grep)\nStr(foo)\nRedirectTo\nStr(result.txt)\nAmpersand\n```\n\nこのような感じになりました。\n`Iterator`を実装しているので、`for .. in ..`が使えて気持ち良いです。\n\n## 反省点\n\nパースは失敗しうる計算だから`Option`かなーどうせ`Option`かえすなら`Iterator`実装しちゃえばお得かなーとおもって漠然と実装してみましたが、パースは失敗した理由がほしいことがほとんどなのでよく考えたら`Result`を使うべきだった気がしてきました。\n効率とかは正直 Rust での効率のよい書き方がよくわかっていないのであまり気にせず、とりあえず動くものを、と作ってみました。\nあとはパーサを書いたことが殆どなかったので成功法がわからなかったので、もっときれいな書き方があるんじゃないかという気も...\n\n## 今後\n\nとりあえず動くものを、コードをたくさん書こう、の精神で進めてみます。\n次は単純なコマンド実行を実装したいです。\nといっても Rust には`Command`とか`Process`とかがあって、ちょっと読んで見た感じ割りと素直に C 言語の`execvp`とかを呼び出しているようなので、それを使えばそこまで難しくはないのかな？\n\nソースの全文を掲載しますので、Rust 固有であってもそうでなくても、より良い書き方などありましたらご教授いただけると幸いです。よろしくお願いします。\n\n```rust:parse.rs\nuse std;\n\nstatic KEYWORDS: &'static str = \"|&<> \\n\";\n\n#[deriving(Show)]\npub enum Token {\n    Str(String),\n    Pipe,\n    RedirectTo,\n    RedirectFrom,\n    Ampersand,\n}\n\npub struct Parser {\n    src: String,\n    pub current: uint,\n}\n\nimpl Parser {\n\n    pub fn new(src: String) -> Parser {\n        Parser { src: src, current: 0 }\n    }\n\n    pub fn current_char(&self) -> char {\n        self.src.char_at(self.current)\n    }\n\n    fn skip_whitespace(&mut self) {\n        while self.current_char().is_whitespace() {\n            self.current += 1;\n            if self.current >= self.src.char_len() {\n                return;\n            }\n        }\n    }\n\n    fn get_pipe(&mut self) -> Option<Token> {\n        if self.current_char() == '|' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::Pipe)\n        } else {\n            None\n        }\n    }\n\n    fn get_ampersand(&mut self) -> Option<Token> {\n        if self.current_char() == '&' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::Ampersand)\n        } else {\n            None\n        }\n    }\n\n    fn get_redirect_to(&mut self) -> Option<Token> {\n        if self.current_char() == '>' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::RedirectTo)\n        } else {\n            None\n        }\n    }\n\n    fn get_redirect_from(&mut self) -> Option<Token> {\n        if self.current_char() == '<' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::RedirectFrom)\n        } else {\n            None\n        }\n    }\n\n    fn get_str(&mut self) -> Option<Token> {\n        let mut i = self.current;\n        while !KEYWORDS.contains_char(self.src.char_at(i)) {\n            i += 1;\n        }\n        if i == self.current {\n            None\n        } else {\n            let result = Some(Token::Str(self.src.slice_chars(self.current, i).to_string()));\n            self.current = i;\n            self.skip_whitespace();\n            result\n        }\n    }\n}\n\nimpl std::iter::Iterator<Token> for Parser {\n\n    fn next(&mut self) -> Option<Token> {\n        if self.current >= self.src.char_len() {\n            return None;\n        }\n        let mut result: Option<Token> = self.get_pipe();\n        if result.is_some() { return result; }\n        result = self.get_ampersand();\n        if result.is_some() { return result; }\n        result = self.get_redirect_to();\n        if result.is_some() { return result; }\n        result = self.get_redirect_from();\n        if result.is_some() { return result; }\n        result = self.get_str();\n        if result.is_some() { return result; }\n        None\n    }\n}\n```\n\n```rust:main.rs\nuse std::io;\nmod parse;\n\nfn main() {\n    loop {\n        let input = std::io::stdin().read_line().ok().expect(\"Failed to read.\");\n        let mut parser = parse::Parser::new(input);\n        for token in parser {\n            println!(\"{}\", token);\n        }\n    }\n}\n```\n","contentMarkdown":"\nRust が最近とてもおもしろいので、勉強がてら自作シェルみたいなものを作ってみたいと思います。  \nとはいえ、C 言語でさえろくにシステムプログラムを書いたことがないので、道は険しくなりそうです。\n\n## バージョン\n\n0.13.0-nightly を使用しました。\n\nコード全文はこちら\n[agatan/rsh](https://github.com/agatan/rsh)\n\n## 字句解析\n\nさて、シェルといったらまずはユーザの入力を受け付けてパースし、コマンドを実行しなくてはなりません。  \nというわけでまず初めにパース部分についてやってみます。  \nさくっと終わらせたかったのですが、どうもまだ`String`と`&str`とかそのへんで詰まってしまいます...\n\n## Token の規定\n\n`enum`を使って`Token`を列挙します。  \n一応最終的にはパイプやらリダイレクトやらも実装したいなーと思っているので、その辺を考慮に入れた実装にしてみました。\n\n```rust\nenum Token {\n\tStr(String),\n\tPipe,\n\tRedirectTo,\n\tRedirectFrom,\n\tAmpersand,\n}\n```\n\n`Str`は特殊な文字以外の文字列ですから、要素として`String`を保持させておきました。\n\n## parser\n\nパースには(おもしろそうだったので)`iterator`トレイトを実装させることにしました。  \n実際つかうときにはいらない気もしますが、ちょっとためしたかったので。\n\n構造体として`Parser`を作ります。ソースとなる文字列と、現在どこまでパース済みなのかを保持する`current`を持たせました。\n\n```rust\npub struct Parser {\n    src: String,\n    pub current: uint,\n}\n```\n\nこの構造体に`Iterator`トレイトを実装すればよいのですが、補助関数としていくつか実装しておきます。\n\n```rust\nimpl Parser {\n    pub fn new(src: String) -> Parser {\n        Parser { src: src, current: 0 }\n    }\n\n    pub fn current_char(&self) -> char {\n        self.src.char_at(self.current)\n    }\n\n    fn skip_whitespace(&mut self) {\n        while self.current_char().is_whitespace() {\n            self.current += 1;\n            if self.current >= self.src.char_len() {\n                return;\n            }\n        }\n    }\n\n    fn get_pipe(&mut self) -> Option<Token> {\n        if self.current_char() == '|' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::Pipe)\n        } else {\n            None\n        }\n    }\n\n    fn get_ampersand(&mut self) -> Option<Token> {\n        if self.current_char() == '&' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::Ampersand)\n        } else {\n            None\n        }\n    }\n\n    fn get_redirect_to(&mut self) -> Option<Token> {\n        if self.current_char() == '>' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::RedirectTo)\n        } else {\n            None\n        }\n    }\n\n    fn get_redirect_from(&mut self) -> Option<Token> {\n        if self.current_char() == '<' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::RedirectFrom)\n\n    fn get_str(&mut self) -> Option<Token> {\n        let mut i = self.current;\n        while !KEYWORDS.contains_char(self.src.char_at(i)) {\n            i += 1;\n        }\n        if i == self.current {\n            None\n        } else {\n            let result = Some(Token::Str(self.src.slice_chars(self.current, i).to_string()));\n            self.current = i;\n            self.skip_whitespace();\n            result\n        }\n    }\n}\n\n```\n\n`new`は新しいパーサーを生成するための関数です。`Parser`は文字列の所有権を要求していますが、入力された文字列はパースする以外に使い道は無いと思ったので大丈夫と判断しました。\n\n`current_char`は現在注目している文字を返します。\n`skip_whitespace`は空白文字を飛ばすように`self.current`をいじります。パーサーでは、基本的に 1 トークンを読み終えたら空白を飛ばして次のトークンになりうる文字の先頭までジャンプするべきなので、必ずトークンを読んだらこの関数を呼び出します。\n\nのこりの関数は、それぞれの`Token`を取得することを試みる関数です。  \n`Option<Token>`が帰ってくるので、`None`が帰ってきたら今みているトークンは別の種類のものであるといえます。\n\nこれらを用いて`Iterator`を実装しました。\n\n```rust\nimpl std::iter::Iterator<Token> for Parser {\n\n    fn next(&mut self) -> Option<Token> {\n        if self.current >= self.src.char_len() {\n            return None;\n        }\n        let mut result: Option<Token> = self.get_pipe();\n        if result.is_some() { return result; }\n        result = self.get_ampersand();\n        if result.is_some() { return result; }\n        result = self.get_redirect_to();\n        if result.is_some() { return result; }\n        result = self.get_redirect_from();\n        if result.is_some() { return result; }\n        result = self.get_str();\n        if result.is_some() { return result; }\n        None\n    }\n}\n```\n\nきれいじゃないコードですが、うまいやり方が他に思いつかなかったので...  \n純粋にある種類のトークンを取得しようと試みて`None`が帰ってきたら別の種類で試す、ということを繰り返しています。\n先頭で末尾まで読み込んだかを判定しています。\nすべての条件に当てはまらなくなったらパース失敗で`None`を返しています。\n\n## 試す\n\n```rust\nuse std::io;\nmod parse;\n\nfn main() {\n    loop {\n        let input = std::io::stdin().read_line().ok().expect(\"Failed to read.\");\n        let mut parser = parse::Parser::new(input);\n        for token in parser {\n            println!(\"{}\", token);\n        }\n    }\n}\n```\n\n実行結果\n\n```\nls -a | grep foo\nStr(ls)\nStr(-a)\nPipe\nStr(grep)\nStr(foo)\nls -a| grep foo>result.txt &\nStr(ls)\nStr(-a)\nPipe\nStr(grep)\nStr(foo)\nRedirectTo\nStr(result.txt)\nAmpersand\n```\n\nこのような感じになりました。\n`Iterator`を実装しているので、`for .. in ..`が使えて気持ち良いです。\n\n## 反省点\n\nパースは失敗しうる計算だから`Option`かなーどうせ`Option`かえすなら`Iterator`実装しちゃえばお得かなーとおもって漠然と実装してみましたが、パースは失敗した理由がほしいことがほとんどなのでよく考えたら`Result`を使うべきだった気がしてきました。\n効率とかは正直 Rust での効率のよい書き方がよくわかっていないのであまり気にせず、とりあえず動くものを、と作ってみました。\nあとはパーサを書いたことが殆どなかったので成功法がわからなかったので、もっときれいな書き方があるんじゃないかという気も...\n\n## 今後\n\nとりあえず動くものを、コードをたくさん書こう、の精神で進めてみます。\n次は単純なコマンド実行を実装したいです。\nといっても Rust には`Command`とか`Process`とかがあって、ちょっと読んで見た感じ割りと素直に C 言語の`execvp`とかを呼び出しているようなので、それを使えばそこまで難しくはないのかな？\n\nソースの全文を掲載しますので、Rust 固有であってもそうでなくても、より良い書き方などありましたらご教授いただけると幸いです。よろしくお願いします。\n\n```rust:parse.rs\nuse std;\n\nstatic KEYWORDS: &'static str = \"|&<> \\n\";\n\n#[deriving(Show)]\npub enum Token {\n    Str(String),\n    Pipe,\n    RedirectTo,\n    RedirectFrom,\n    Ampersand,\n}\n\npub struct Parser {\n    src: String,\n    pub current: uint,\n}\n\nimpl Parser {\n\n    pub fn new(src: String) -> Parser {\n        Parser { src: src, current: 0 }\n    }\n\n    pub fn current_char(&self) -> char {\n        self.src.char_at(self.current)\n    }\n\n    fn skip_whitespace(&mut self) {\n        while self.current_char().is_whitespace() {\n            self.current += 1;\n            if self.current >= self.src.char_len() {\n                return;\n            }\n        }\n    }\n\n    fn get_pipe(&mut self) -> Option<Token> {\n        if self.current_char() == '|' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::Pipe)\n        } else {\n            None\n        }\n    }\n\n    fn get_ampersand(&mut self) -> Option<Token> {\n        if self.current_char() == '&' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::Ampersand)\n        } else {\n            None\n        }\n    }\n\n    fn get_redirect_to(&mut self) -> Option<Token> {\n        if self.current_char() == '>' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::RedirectTo)\n        } else {\n            None\n        }\n    }\n\n    fn get_redirect_from(&mut self) -> Option<Token> {\n        if self.current_char() == '<' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::RedirectFrom)\n        } else {\n            None\n        }\n    }\n\n    fn get_str(&mut self) -> Option<Token> {\n        let mut i = self.current;\n        while !KEYWORDS.contains_char(self.src.char_at(i)) {\n            i += 1;\n        }\n        if i == self.current {\n            None\n        } else {\n            let result = Some(Token::Str(self.src.slice_chars(self.current, i).to_string()));\n            self.current = i;\n            self.skip_whitespace();\n            result\n        }\n    }\n}\n\nimpl std::iter::Iterator<Token> for Parser {\n\n    fn next(&mut self) -> Option<Token> {\n        if self.current >= self.src.char_len() {\n            return None;\n        }\n        let mut result: Option<Token> = self.get_pipe();\n        if result.is_some() { return result; }\n        result = self.get_ampersand();\n        if result.is_some() { return result; }\n        result = self.get_redirect_to();\n        if result.is_some() { return result; }\n        result = self.get_redirect_from();\n        if result.is_some() { return result; }\n        result = self.get_str();\n        if result.is_some() { return result; }\n        None\n    }\n}\n```\n\n```rust:main.rs\nuse std::io;\nmod parse;\n\nfn main() {\n    loop {\n        let input = std::io::stdin().read_line().ok().expect(\"Failed to read.\");\n        let mut parser = parse::Parser::new(input);\n        for token in parser {\n            println!(\"{}\", token);\n        }\n    }\n}\n```\n","slug":"Rustで自作シェルもどきを作る(字句解析編)","title":"Rustで自作シェルもどきを作る(字句解析編)","timestamp":1419092119000,"tags":["Rust"]}}},"__N_SSG":true}