{"pageProps":{"post":{"content":"<p>現在時刻に依存するコードをテストするとき，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/golang\">golang</a> で <code>time.Now</code> を普通に使っているとモックできずうまくテストが書けないという問題があります．\n時間の操作は time パッケージをそのまま使えば良いのですが，time.Now だけはモックできるようにしたいところです．</p>\n<p>解決方法としては，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B0%A5%ED%A1%BC%A5%D0%A5%EB%CA%D1%BF%F4\">グローバル変数</a>に <code>var NowFunc func() time.Time</code> を置いておいて，テスト時に入れ替えるという方法があり，ORM である gorm などが実際にこれを行っています．</p>\n<p><a href=\"https://github.com/jinzhu/gorm/blob/2a1463811ee1dc85d168fd639a2d4251d030e6e5/utils.go#L21\">gorm/utils.go at 2a1463811ee1dc85d168fd639a2d4251d030e6e5 &middot; jinzhu/gorm &middot; GitHub</a></p>\n<p>例:</p>\n<pre class=\"code lang-go\" data-lang=\"go\" data-unlink><span class=\"synStatement\">var</span> NowFunc = time.Now\n\n<span class=\"synStatement\">func</span> Do() <span class=\"synType\">string</span> {\n    <span class=\"synStatement\">return</span> NowFunc().String()\n}\n\n<span class=\"synStatement\">func</span> TestDo(t *testing.T) {\n    now := time.Date(<span class=\"synConstant\">2009</span>, time.November, <span class=\"synConstant\">10</span>, <span class=\"synConstant\">23</span>, <span class=\"synConstant\">0</span>, <span class=\"synConstant\">0</span>, <span class=\"synConstant\">0</span>, time.UTC)\n    NowFunc = <span class=\"synType\">func</span>() time.Time {\n        <span class=\"synStatement\">return</span> now\n    }\n    got := Do()\n    <span class=\"synStatement\">if</span> got != now.String() {\n        t.Fail()\n    }\n}\n</pre>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/golang\">golang</a> の使用上，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a> の timecop のようなことは出来ないので，こういう工夫をするしかありません．</p>\n<p>なんとなく<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B0%A5%ED%A1%BC%A5%D0%A5%EB%CA%D1%BF%F4\">グローバル変数</a>をテストのために置いて書き換えるのが嫌なのと，なんにも考えずに <code>t.Parallel()</code> を置けなくなるのがちょっと嫌だなと思っていました．\nまた，時間経過をシミュレーションしたい場合は，そういう <code>NowFunc</code> を毎回書く必要があり，結構面倒です．\nあとパッケージをまたぐと厄介だし毎回書くのも嫌．</p>\n<p>そこで，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a> の timecop のように現在時刻をいじくり回せるようにするライブラリを作ってみました．</p>\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fagatan%2Ftimejump\" title=\"agatan/timejump\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://github.com/agatan/timejump\">github.com</a></cite></p>\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgodoc.org%2Fgithub.com%2Fagatan%2Ftimejump\" title=\"Package timejump\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://godoc.org/github.com/agatan/timejump\">godoc.org</a></cite></p>\n<p>使用する際は <code>time.Now</code> をすべて <code>timejump.Now</code> に置き換える必要があります．（ <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a> と違って <code>time.Now</code> を直接上書きできないので...）\n普段は <code>timejump.Now</code> と <code>time.Now</code> は <code>if !active { ... }</code> が一段挟まるだけなのでパフォーマンスに影響はほとんどないはずです．</p>\n<p>テスト時は，<code>timejump.Now</code> の挙動を変えたいテストの頭で</p>\n<pre class=\"code lang-go\" data-lang=\"go\" data-unlink><span class=\"synStatement\">func</span> TestDo(t *testing.T) {\n    timejump.Activate()\n    <span class=\"synStatement\">defer</span> timejump.Deactivate()\n    ...\n}\n</pre>\n<p>とします．</p>\n<p><code>timejump.Activate</code> な<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B6%E8%B4%D6\">区間</a>はロックをとっているので，テストを並列で走らせても並列に走らなくなります．</p>\n<p><code>timejump.Stop()</code> で時間停止，<code>timejump.Jump</code> で時間移動，<code>timejump.Move</code> で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BF%A5%A4%A5%E0%A5%BE%A1%BC%A5%F3\">タイムゾーン</a>の移動，<code>timejump.Scale</code> で時間の経過速度をいじれます．</p>\n<p>時間を止めたいだけの場合は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B0%A5%ED%A1%BC%A5%D0%A5%EB%CA%D1%BF%F4\">グローバル変数</a>に <code>NowFunc</code> を持っておいて <code>t.Parallel</code> を間違って置かないように気をつけるほうが正直楽だとは思いますが，時間経過をテストしたい場合にはちょっと楽になるはずです．</p>\n<p>もともとあるパッケージのテストをするために書いたパッケージだったのですが，目的だったテストを書く前にテストしたいパッケージが御役御免になってしまったので，timejump も御役御免になってしまいました．\nいつか使う日が来る気がするので，ここに寝かせておきます．</p>\n<hr>\n<hr>\n","meta":{"rawMarkdown":"---\ntitle: \"golang でテストのために時間を操作するライブラリ timejump\"\ndate: 2017-12-14T14:21:24.000Z\ntags: []\n---\n\n<p>現在時刻に依存するコードをテストするとき，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/golang\">golang</a> で <code>time.Now</code> を普通に使っているとモックできずうまくテストが書けないという問題があります．\n時間の操作は time パッケージをそのまま使えば良いのですが，time.Now だけはモックできるようにしたいところです．</p>\n\n<p>解決方法としては，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B0%A5%ED%A1%BC%A5%D0%A5%EB%CA%D1%BF%F4\">グローバル変数</a>に <code>var NowFunc func() time.Time</code> を置いておいて，テスト時に入れ替えるという方法があり，ORM である gorm などが実際にこれを行っています．</p>\n\n<p><a href=\"https://github.com/jinzhu/gorm/blob/2a1463811ee1dc85d168fd639a2d4251d030e6e5/utils.go#L21\">gorm/utils.go at 2a1463811ee1dc85d168fd639a2d4251d030e6e5 &middot; jinzhu/gorm &middot; GitHub</a></p>\n\n<p>例:</p>\n\n<pre class=\"code lang-go\" data-lang=\"go\" data-unlink><span class=\"synStatement\">var</span> NowFunc = time.Now\n\n<span class=\"synStatement\">func</span> Do() <span class=\"synType\">string</span> {\n    <span class=\"synStatement\">return</span> NowFunc().String()\n}\n\n<span class=\"synStatement\">func</span> TestDo(t *testing.T) {\n    now := time.Date(<span class=\"synConstant\">2009</span>, time.November, <span class=\"synConstant\">10</span>, <span class=\"synConstant\">23</span>, <span class=\"synConstant\">0</span>, <span class=\"synConstant\">0</span>, <span class=\"synConstant\">0</span>, time.UTC)\n    NowFunc = <span class=\"synType\">func</span>() time.Time {\n        <span class=\"synStatement\">return</span> now\n    }\n    got := Do()\n    <span class=\"synStatement\">if</span> got != now.String() {\n        t.Fail()\n    }\n}\n</pre>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/golang\">golang</a> の使用上，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a> の timecop のようなことは出来ないので，こういう工夫をするしかありません．</p>\n\n<p>なんとなく<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B0%A5%ED%A1%BC%A5%D0%A5%EB%CA%D1%BF%F4\">グローバル変数</a>をテストのために置いて書き換えるのが嫌なのと，なんにも考えずに <code>t.Parallel()</code> を置けなくなるのがちょっと嫌だなと思っていました．\nまた，時間経過をシミュレーションしたい場合は，そういう <code>NowFunc</code> を毎回書く必要があり，結構面倒です．\nあとパッケージをまたぐと厄介だし毎回書くのも嫌．</p>\n\n<p>そこで，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a> の timecop のように現在時刻をいじくり回せるようにするライブラリを作ってみました．</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fagatan%2Ftimejump\" title=\"agatan/timejump\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://github.com/agatan/timejump\">github.com</a></cite></p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgodoc.org%2Fgithub.com%2Fagatan%2Ftimejump\" title=\"Package timejump\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://godoc.org/github.com/agatan/timejump\">godoc.org</a></cite></p>\n\n<p>使用する際は <code>time.Now</code> をすべて <code>timejump.Now</code> に置き換える必要があります．（ <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a> と違って <code>time.Now</code> を直接上書きできないので...）\n普段は <code>timejump.Now</code> と <code>time.Now</code> は <code>if !active { ... }</code> が一段挟まるだけなのでパフォーマンスに影響はほとんどないはずです．</p>\n\n<p>テスト時は，<code>timejump.Now</code> の挙動を変えたいテストの頭で</p>\n\n<pre class=\"code lang-go\" data-lang=\"go\" data-unlink><span class=\"synStatement\">func</span> TestDo(t *testing.T) {\n    timejump.Activate()\n    <span class=\"synStatement\">defer</span> timejump.Deactivate()\n    ...\n}\n</pre>\n\n<p>とします．</p>\n\n<p><code>timejump.Activate</code> な<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B6%E8%B4%D6\">区間</a>はロックをとっているので，テストを並列で走らせても並列に走らなくなります．</p>\n\n<p><code>timejump.Stop()</code> で時間停止，<code>timejump.Jump</code> で時間移動，<code>timejump.Move</code> で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BF%A5%A4%A5%E0%A5%BE%A1%BC%A5%F3\">タイムゾーン</a>の移動，<code>timejump.Scale</code> で時間の経過速度をいじれます．</p>\n\n<p>時間を止めたいだけの場合は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B0%A5%ED%A1%BC%A5%D0%A5%EB%CA%D1%BF%F4\">グローバル変数</a>に <code>NowFunc</code> を持っておいて <code>t.Parallel</code> を間違って置かないように気をつけるほうが正直楽だとは思いますが，時間経過をテストしたい場合にはちょっと楽になるはずです．</p>\n\n<p>もともとあるパッケージのテストをするために書いたパッケージだったのですが，目的だったテストを書く前にテストしたいパッケージが御役御免になってしまったので，timejump も御役御免になってしまいました．\nいつか使う日が来る気がするので，ここに寝かせておきます．</p>\n\n---\n\n---\n","contentMarkdown":"\n<p>現在時刻に依存するコードをテストするとき，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/golang\">golang</a> で <code>time.Now</code> を普通に使っているとモックできずうまくテストが書けないという問題があります．\n時間の操作は time パッケージをそのまま使えば良いのですが，time.Now だけはモックできるようにしたいところです．</p>\n\n<p>解決方法としては，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B0%A5%ED%A1%BC%A5%D0%A5%EB%CA%D1%BF%F4\">グローバル変数</a>に <code>var NowFunc func() time.Time</code> を置いておいて，テスト時に入れ替えるという方法があり，ORM である gorm などが実際にこれを行っています．</p>\n\n<p><a href=\"https://github.com/jinzhu/gorm/blob/2a1463811ee1dc85d168fd639a2d4251d030e6e5/utils.go#L21\">gorm/utils.go at 2a1463811ee1dc85d168fd639a2d4251d030e6e5 &middot; jinzhu/gorm &middot; GitHub</a></p>\n\n<p>例:</p>\n\n<pre class=\"code lang-go\" data-lang=\"go\" data-unlink><span class=\"synStatement\">var</span> NowFunc = time.Now\n\n<span class=\"synStatement\">func</span> Do() <span class=\"synType\">string</span> {\n    <span class=\"synStatement\">return</span> NowFunc().String()\n}\n\n<span class=\"synStatement\">func</span> TestDo(t *testing.T) {\n    now := time.Date(<span class=\"synConstant\">2009</span>, time.November, <span class=\"synConstant\">10</span>, <span class=\"synConstant\">23</span>, <span class=\"synConstant\">0</span>, <span class=\"synConstant\">0</span>, <span class=\"synConstant\">0</span>, time.UTC)\n    NowFunc = <span class=\"synType\">func</span>() time.Time {\n        <span class=\"synStatement\">return</span> now\n    }\n    got := Do()\n    <span class=\"synStatement\">if</span> got != now.String() {\n        t.Fail()\n    }\n}\n</pre>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/golang\">golang</a> の使用上，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a> の timecop のようなことは出来ないので，こういう工夫をするしかありません．</p>\n\n<p>なんとなく<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B0%A5%ED%A1%BC%A5%D0%A5%EB%CA%D1%BF%F4\">グローバル変数</a>をテストのために置いて書き換えるのが嫌なのと，なんにも考えずに <code>t.Parallel()</code> を置けなくなるのがちょっと嫌だなと思っていました．\nまた，時間経過をシミュレーションしたい場合は，そういう <code>NowFunc</code> を毎回書く必要があり，結構面倒です．\nあとパッケージをまたぐと厄介だし毎回書くのも嫌．</p>\n\n<p>そこで，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a> の timecop のように現在時刻をいじくり回せるようにするライブラリを作ってみました．</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fagatan%2Ftimejump\" title=\"agatan/timejump\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://github.com/agatan/timejump\">github.com</a></cite></p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgodoc.org%2Fgithub.com%2Fagatan%2Ftimejump\" title=\"Package timejump\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://godoc.org/github.com/agatan/timejump\">godoc.org</a></cite></p>\n\n<p>使用する際は <code>time.Now</code> をすべて <code>timejump.Now</code> に置き換える必要があります．（ <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a> と違って <code>time.Now</code> を直接上書きできないので...）\n普段は <code>timejump.Now</code> と <code>time.Now</code> は <code>if !active { ... }</code> が一段挟まるだけなのでパフォーマンスに影響はほとんどないはずです．</p>\n\n<p>テスト時は，<code>timejump.Now</code> の挙動を変えたいテストの頭で</p>\n\n<pre class=\"code lang-go\" data-lang=\"go\" data-unlink><span class=\"synStatement\">func</span> TestDo(t *testing.T) {\n    timejump.Activate()\n    <span class=\"synStatement\">defer</span> timejump.Deactivate()\n    ...\n}\n</pre>\n\n<p>とします．</p>\n\n<p><code>timejump.Activate</code> な<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B6%E8%B4%D6\">区間</a>はロックをとっているので，テストを並列で走らせても並列に走らなくなります．</p>\n\n<p><code>timejump.Stop()</code> で時間停止，<code>timejump.Jump</code> で時間移動，<code>timejump.Move</code> で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BF%A5%A4%A5%E0%A5%BE%A1%BC%A5%F3\">タイムゾーン</a>の移動，<code>timejump.Scale</code> で時間の経過速度をいじれます．</p>\n\n<p>時間を止めたいだけの場合は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B0%A5%ED%A1%BC%A5%D0%A5%EB%CA%D1%BF%F4\">グローバル変数</a>に <code>NowFunc</code> を持っておいて <code>t.Parallel</code> を間違って置かないように気をつけるほうが正直楽だとは思いますが，時間経過をテストしたい場合にはちょっと楽になるはずです．</p>\n\n<p>もともとあるパッケージのテストをするために書いたパッケージだったのですが，目的だったテストを書く前にテストしたいパッケージが御役御免になってしまったので，timejump も御役御免になってしまいました．\nいつか使う日が来る気がするので，ここに寝かせておきます．</p>\n\n---\n\n---\n","slug":"golang_でテストのために時間を操作するライブラリ_timejump","title":"golang でテストのために時間を操作するライブラリ timejump","timestamp":1513261284000,"tags":[]}}},"__N_SSG":true}