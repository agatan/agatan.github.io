{"pageProps":{"post":{"content":"<p>Ruby 初心者なのでなにかお気づきの点がありましたらご教授いただけると幸いです。</p>\n<h2>QiitaApiAccessor</h2>\n<p>QiitaAPI との通信, 受信情報のハッシュ化を担当している。\n<code>@result_json</code>をローカル変数にしたいのだけど, <code>open</code>ブロック内のローカル変数になってしまうので出来ない...\n<code>get_with_tag</code>内のローカル変数にならできるけど結局<code>result_json = {}</code>として<code>open</code>内で更新みたいな書き方になってしまって綺麗じゃない...</p>\n<div class=\"remark-highlight\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">'open-uri'</span>\n<span class=\"token keyword\">require</span> <span class=\"token string\">'json'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QiitaApiAccessor</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span>\n    <span class=\"token variable\">@qiita_url</span> <span class=\"token operator\">=</span> <span class=\"token string\">'http://qiita.com/api/v2'</span>\n    <span class=\"token variable\">@result_json</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">get_with_tag</span></span><span class=\"token punctuation\">(</span>tag_name<span class=\"token punctuation\">)</span>\n    open<span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span><span class=\"token variable\">@qiita_url</span><span class=\"token delimiter tag\">}</span></span>/tags/<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>tag_name<span class=\"token delimiter tag\">}</span></span>/items?page=1&#x26;per_page=100\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>uri<span class=\"token operator\">|</span>\n      <span class=\"token variable\">@result_json</span> <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">,</span> symbolize_names<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token variable\">@result_json</span>\n  <span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">end</span>\n</code></pre></div>\n<h2>QiitaArticle</h2>\n<p>一つの記事についての情報を保持する。\n<code>has_tag?</code>メソッドでは, 大文字小文字にかかわらず判定が出来るよう<code>upcase</code>を使用している。</p>\n<div class=\"remark-highlight\"><pre class=\"language-rb\"><code class=\"language-rb\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">QiitaArticle</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span> <span class=\"token punctuation\">(</span>article_hash<span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@data</span> <span class=\"token operator\">=</span> article_hash\n    <span class=\"token variable\">@title</span> <span class=\"token operator\">=</span> article_hash<span class=\"token punctuation\">[</span><span class=\"token symbol\">:title</span><span class=\"token punctuation\">]</span>\n    <span class=\"token variable\">@url</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"http://qiita.com/api/v2/items/<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>article_hash<span class=\"token punctuation\">[</span><span class=\"token symbol\">:id</span><span class=\"token punctuation\">]</span><span class=\"token delimiter tag\">}</span></span>\"</span>\n    <span class=\"token variable\">@tags</span> <span class=\"token operator\">=</span> article_hash<span class=\"token punctuation\">[</span><span class=\"token symbol\">:tags</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span>tag<span class=\"token operator\">|</span> tag<span class=\"token punctuation\">[</span><span class=\"token symbol\">:name</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token variable\">@body</span> <span class=\"token operator\">=</span> article_hash<span class=\"token punctuation\">[</span><span class=\"token symbol\">:body</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">end</span>\n\n  attr_reader <span class=\"token symbol\">:title</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:url</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:tags</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:body</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">has_tag</span></span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>tag_name<span class=\"token punctuation\">)</span>\n    tags <span class=\"token operator\">=</span> <span class=\"token variable\">@data</span><span class=\"token punctuation\">[</span><span class=\"token symbol\">:tags</span><span class=\"token punctuation\">]</span>\n    tags<span class=\"token punctuation\">.</span>any<span class=\"token operator\">?</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span>tag_info<span class=\"token operator\">|</span> tag_info<span class=\"token punctuation\">[</span><span class=\"token symbol\">:name</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>upcase <span class=\"token operator\">==</span> tag_name<span class=\"token punctuation\">.</span>upcase <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">end</span>\n</code></pre></div>\n<h2>MultiTagsSearcher</h2>\n<p>これがメインのクラス。コンストラクタに<code>QiitaApiAccessor#get_with_tag</code>の戻り値と検索したいタグのリストを渡してやる。\n<code>group_by_relevance</code>によって含んでいる対象タグの数によってグループ化する。</p>\n<div class=\"remark-highlight\"><pre class=\"language-rb\"><code class=\"language-rb\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MultiTagsSearcher</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>articles_data<span class=\"token punctuation\">,</span> tags<span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@articles</span> <span class=\"token operator\">=</span> articles_data<span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span>data<span class=\"token operator\">|</span> <span class=\"token constant\">QiitaArticle</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token variable\">@tags</span> <span class=\"token operator\">=</span> tags\n  <span class=\"token keyword\">end</span>\n\n  attr_reader <span class=\"token symbol\">:articles</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">group_by_relevance</span></span>\n    <span class=\"token variable\">@articles</span><span class=\"token punctuation\">.</span>group_by <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>article<span class=\"token operator\">|</span>\n      <span class=\"token variable\">@tags</span><span class=\"token punctuation\">.</span>count <span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span>tag<span class=\"token operator\">|</span> article<span class=\"token punctuation\">.</span>has_tag<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">end</span>\n</code></pre></div>\n<h2>使い方</h2>\n<p><code>QiitaApiAccessor#get_with_tag</code>にメインとなるキーワードタグを渡す。\nその戻り値と、キーワードタグを含む検索したいタグ名のリストを、<code>MultiTagsSearcher</code>に渡して<code>group_by_relevance</code>してやる。\nすると<code>含んでいる対象タグ数 => [QiitaArticleのインスタンス]</code>というハッシュが得られるので、適当に<code>QiitaArticle#url</code>とかで記事の url を取ってこられます。</p>\n<h2>問題点・改善点</h2>\n<p>QiitaAPI の都合上一度に 100 件までしか記事の情報を取得できないので, 本当はループで全件取得してから<code>MultiTagsSearcher</code>に渡したい。\nが、そうすると 5000 件とか普通に行く場合もあるから<code>QiitaArticle</code>のインスタンスが無駄に大量生成されてしまうし、時間もかかる。\nなので、検索の際のキーワードタグには記事数の少なそうなものを選ぶことでお茶を濁す...\n<code>ruby</code>ではなく<code>sinatra</code>をキーワードにするだけで結果がかなり違ってくる。\nけどそれじゃ根本的な解決になってない。なにか良い方法ありましたら教えて下さい。</p>\n","meta":{"rawMarkdown":"---\ntitle: \"QiitaAPIを通じて複数のタグを持つ記事を検索する\"\ndate: 2014-10-13T18:11:43+09:00\ntags: [\"Qiita\", \"Ruby\"]\nurl: https://qiita.com/agatan/items/55dce1d2bc887de0cd71\n---\n\nRuby 初心者なのでなにかお気づきの点がありましたらご教授いただけると幸いです。\n\n## QiitaApiAccessor\n\nQiitaAPI との通信, 受信情報のハッシュ化を担当している。\n`@result_json`をローカル変数にしたいのだけど, `open`ブロック内のローカル変数になってしまうので出来ない...\n`get_with_tag`内のローカル変数にならできるけど結局`result_json = {}`として`open`内で更新みたいな書き方になってしまって綺麗じゃない...\n\n```ruby\nrequire 'open-uri'\nrequire 'json'\n\nclass QiitaApiAccessor\n\n  def initialize\n    @qiita_url = 'http://qiita.com/api/v2'\n    @result_json = {}\n  end\n\n  def get_with_tag(tag_name)\n    open(\"#{@qiita_url}/tags/#{tag_name}/items?page=1&per_page=100\") do |uri|\n      @result_json = JSON.parse(uri.read, symbolize_names: true)\n    end\n    @result_json\n  end\n\nend\n```\n\n## QiitaArticle\n\n一つの記事についての情報を保持する。\n`has_tag?`メソッドでは, 大文字小文字にかかわらず判定が出来るよう`upcase`を使用している。\n\n```rb\nclass QiitaArticle\n\n  def initialize (article_hash)\n    @data = article_hash\n    @title = article_hash[:title]\n    @url = \"http://qiita.com/api/v2/items/#{article_hash[:id]}\"\n    @tags = article_hash[:tags].map { |tag| tag[:name] }\n    @body = article_hash[:body]\n  end\n\n  attr_reader :title, :url, :tags, :body\n\n  def has_tag?(tag_name)\n    tags = @data[:tags]\n    tags.any?{ |tag_info| tag_info[:name].upcase == tag_name.upcase }\n  end\n\nend\n```\n\n## MultiTagsSearcher\n\nこれがメインのクラス。コンストラクタに`QiitaApiAccessor#get_with_tag`の戻り値と検索したいタグのリストを渡してやる。\n`group_by_relevance`によって含んでいる対象タグの数によってグループ化する。\n\n```rb\nclass MultiTagsSearcher\n\n  def initialize(articles_data, tags)\n    @articles = articles_data.map { |data| QiitaArticle.new(data) }\n    @tags = tags\n  end\n\n  attr_reader :articles\n\n  def group_by_relevance\n    @articles.group_by do |article|\n      @tags.count { |tag| article.has_tag?(tag) }\n    end\n  end\n\nend\n```\n\n## 使い方\n\n`QiitaApiAccessor#get_with_tag`にメインとなるキーワードタグを渡す。\nその戻り値と、キーワードタグを含む検索したいタグ名のリストを、`MultiTagsSearcher`に渡して`group_by_relevance`してやる。\nすると`含んでいる対象タグ数 => [QiitaArticleのインスタンス]`というハッシュが得られるので、適当に`QiitaArticle#url`とかで記事の url を取ってこられます。\n\n## 問題点・改善点\n\nQiitaAPI の都合上一度に 100 件までしか記事の情報を取得できないので, 本当はループで全件取得してから`MultiTagsSearcher`に渡したい。\nが、そうすると 5000 件とか普通に行く場合もあるから`QiitaArticle`のインスタンスが無駄に大量生成されてしまうし、時間もかかる。\nなので、検索の際のキーワードタグには記事数の少なそうなものを選ぶことでお茶を濁す...\n`ruby`ではなく`sinatra`をキーワードにするだけで結果がかなり違ってくる。\nけどそれじゃ根本的な解決になってない。なにか良い方法ありましたら教えて下さい。\n","contentMarkdown":"\nRuby 初心者なのでなにかお気づきの点がありましたらご教授いただけると幸いです。\n\n## QiitaApiAccessor\n\nQiitaAPI との通信, 受信情報のハッシュ化を担当している。\n`@result_json`をローカル変数にしたいのだけど, `open`ブロック内のローカル変数になってしまうので出来ない...\n`get_with_tag`内のローカル変数にならできるけど結局`result_json = {}`として`open`内で更新みたいな書き方になってしまって綺麗じゃない...\n\n```ruby\nrequire 'open-uri'\nrequire 'json'\n\nclass QiitaApiAccessor\n\n  def initialize\n    @qiita_url = 'http://qiita.com/api/v2'\n    @result_json = {}\n  end\n\n  def get_with_tag(tag_name)\n    open(\"#{@qiita_url}/tags/#{tag_name}/items?page=1&per_page=100\") do |uri|\n      @result_json = JSON.parse(uri.read, symbolize_names: true)\n    end\n    @result_json\n  end\n\nend\n```\n\n## QiitaArticle\n\n一つの記事についての情報を保持する。\n`has_tag?`メソッドでは, 大文字小文字にかかわらず判定が出来るよう`upcase`を使用している。\n\n```rb\nclass QiitaArticle\n\n  def initialize (article_hash)\n    @data = article_hash\n    @title = article_hash[:title]\n    @url = \"http://qiita.com/api/v2/items/#{article_hash[:id]}\"\n    @tags = article_hash[:tags].map { |tag| tag[:name] }\n    @body = article_hash[:body]\n  end\n\n  attr_reader :title, :url, :tags, :body\n\n  def has_tag?(tag_name)\n    tags = @data[:tags]\n    tags.any?{ |tag_info| tag_info[:name].upcase == tag_name.upcase }\n  end\n\nend\n```\n\n## MultiTagsSearcher\n\nこれがメインのクラス。コンストラクタに`QiitaApiAccessor#get_with_tag`の戻り値と検索したいタグのリストを渡してやる。\n`group_by_relevance`によって含んでいる対象タグの数によってグループ化する。\n\n```rb\nclass MultiTagsSearcher\n\n  def initialize(articles_data, tags)\n    @articles = articles_data.map { |data| QiitaArticle.new(data) }\n    @tags = tags\n  end\n\n  attr_reader :articles\n\n  def group_by_relevance\n    @articles.group_by do |article|\n      @tags.count { |tag| article.has_tag?(tag) }\n    end\n  end\n\nend\n```\n\n## 使い方\n\n`QiitaApiAccessor#get_with_tag`にメインとなるキーワードタグを渡す。\nその戻り値と、キーワードタグを含む検索したいタグ名のリストを、`MultiTagsSearcher`に渡して`group_by_relevance`してやる。\nすると`含んでいる対象タグ数 => [QiitaArticleのインスタンス]`というハッシュが得られるので、適当に`QiitaArticle#url`とかで記事の url を取ってこられます。\n\n## 問題点・改善点\n\nQiitaAPI の都合上一度に 100 件までしか記事の情報を取得できないので, 本当はループで全件取得してから`MultiTagsSearcher`に渡したい。\nが、そうすると 5000 件とか普通に行く場合もあるから`QiitaArticle`のインスタンスが無駄に大量生成されてしまうし、時間もかかる。\nなので、検索の際のキーワードタグには記事数の少なそうなものを選ぶことでお茶を濁す...\n`ruby`ではなく`sinatra`をキーワードにするだけで結果がかなり違ってくる。\nけどそれじゃ根本的な解決になってない。なにか良い方法ありましたら教えて下さい。\n","slug":"QiitaAPIを通じて複数のタグを持つ記事を検索する","title":"QiitaAPIを通じて複数のタグを持つ記事を検索する","timestamp":1413191503000,"tags":["Qiita","Ruby"]}}},"__N_SSG":true}