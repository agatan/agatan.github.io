{"pageProps":{"post":{"content":"<p>こんにちは。<br/>\nちょっと <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> への熱を冷まさないために、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> のテンプレートについてまとめてみたいと思います。</p>\n<h2>対象</h2>\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> のテンプレートが怖い人</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>エラーメッセージが怖い人</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> の規格とブログポストを比較して誤りを探したい人(もし誤っていたら教えて下さい...)</li>\n</ul>\n<h2>テンプレートとは</h2>\n<blockquote><p>プログラミングにおけるテンプレートは、静的型付けの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>でデータ型にとらわれずにコードを書くことを可能にする機能であり、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>においては<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%C3%A5%AF\">ジェネリック</a>プログラミングに用いられる。<br/>\n<a href=\"https://ja.wikipedia.org/wiki/%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0\">テンプレート (プログラミング) - Wikipedia</a>)より</p></blockquote>\n<p>他の静的型付きな<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC\">プログラミング言語</a>をすでに知っている場合は，すんなり入りやすいかもしれません。<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a> や <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Scala\">Scala</a>, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%23\">C#</a> でいうところの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%AF%A5%B9\">ジェネリクス</a>に近い存在です。<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OCaml\">OCaml</a> や <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a> だと多相とか。</p>\n<p>雑に表現するならば、リストとか<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CF%A2%C1%DB%C7%DB%CE%F3\">連想配列</a>のように内部のデータ型に依らないデータ構造を、静的型のもとにどうやったらうまく表現できるかな、に対する解の一つです。</p>\n<h3>例</h3>\n<p>では一つの例として、スタックというデータ構造をプログラムに落としこむことを考えます。<br/>\nまずは <code>int</code> 型のスタックを定義してみます。</p>\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synPreProc\">#define MAX_ELEM </span><span class=\"synConstant\">10</span>\n\n<span class=\"synType\">class</span> int_stack {\n<span class=\"synStatement\">public</span>:\n  int_stack() : data(), n() {}\n\n  <span class=\"synType\">void</span> push(<span class=\"synType\">int</span> x) {\n    <span class=\"synStatement\">if</span> (n &gt;= MAX_ELEM) {\n      <span class=\"synStatement\">throw</span> <span class=\"synConstant\">&quot;stack is full!!&quot;</span>;\n    }\n    data[n++] = x;\n  }\n\n  <span class=\"synType\">int</span> pop() {\n    <span class=\"synStatement\">if</span> (n &lt; <span class=\"synConstant\">0</span>) {\n      <span class=\"synStatement\">throw</span> <span class=\"synConstant\">&quot;stack is empty!!&quot;</span>;\n    }\n    <span class=\"synStatement\">return</span> data[--n];\n  }\n<span class=\"synStatement\">private</span>:\n  <span class=\"synType\">int</span> data[MAX_ELEM];\n  <span class=\"synType\">int</span> n;\n};\n</pre>\n<p>簡単のため、かなりお粗末なスタックですが、最低限のスタックとしての見た目はしていると思います。</p>\n<p>では次に、<code>std::string</code> 型のスタックや <code>double</code> 型のスタックを作りたいとなったらどうすればよいでしょうか。<br/>\nコピーして <code>int</code> を置換しますか？あまり褒められた方法ではなさそうです。</p>\n<h4>C でのアプローチの一つ</h4>\n<p>C 言語の場合、このような問題に対しては <code>void*</code> というアプローチがあります。<br/>\n<code>void*</code> は <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/java\">java</a> でいう <code>Object</code> のように扱われます。</p>\n<pre class=\"code lang-c\" data-lang=\"c\" data-unlink><span class=\"synPreProc\">#define MAX_ELEM </span><span class=\"synConstant\">10</span>\n\n<span class=\"synType\">struct</span> stack {\n  <span class=\"synType\">void</span> *data[MAX_ELEM];\n  <span class=\"synType\">int</span> n;\n};\n\n<span class=\"synType\">void</span> push(stack *s, <span class=\"synType\">void</span> *elem) {\n  ....\n}\n\n<span class=\"synType\">void</span> *pop(stack *s) {\n  ....\n}\n\n<span class=\"synComment\">/* Usage */</span>\nstack *s = new_stack();\n<span class=\"synType\">int</span> *x = (<span class=\"synType\">int</span>*)malloc(<span class=\"synStatement\">sizeof</span>(<span class=\"synType\">int</span>));\n*x = <span class=\"synConstant\">1</span>;\npush(s, (<span class=\"synType\">void</span>*)x);\n<span class=\"synType\">int</span> *y = (<span class=\"synType\">int</span>*)pop(s);\nprintf(<span class=\"synConstant\">&quot;</span><span class=\"synSpecial\">%d\\n</span><span class=\"synConstant\">&quot;</span> *y); <span class=\"synComment\">/* =&gt; 1 */</span>\n</pre>\n<p>こんな感じでしょうか。実装の細かい部分は省略しています。<br/>\n<code>push</code> の際にはあらゆるポインタを <code>void*</code> にキャストし、逆に <code>pop</code> する際には <code>void*</code> を求める型にキャストしています。<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%AF%A5%B9\">ジェネリクス</a>のなかった頃の <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/java\">java</a> は、これを <code>Object</code> へのキャスト・<code>Object</code> からのキャストとして表現していました。</p>\n<h5>void* のデメリット</h5>\n<p><code>void*</code> を使う場合のデメリットは、型システムを台無しにしている点です。(<code>malloc</code> や <code>free</code> が必要であることは C 言語特有の問題なのでスルー)<br/>\nつまり、<code>int</code> のスタックから <code>pop</code> してきたとき、<code>int*</code> に正しくキャストを行う責任は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE\">プログラマ</a>にあり、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9\">コンパイラ</a>は何も手助けをしてくれないということです。<br/>\nしたがって、 <code>int</code> スタックに <code>double</code> の値を <code>push</code> したり、 <code>double</code> スタックから <code>char*</code> を <code>pop</code> したりというミスが簡単に引き起こされてしまうということです。</p>\n<h4>そこでテンプレート</h4>\n<p>では <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> ではどのようなアプローチを取るかというと、テンプレートを使います。<br/>\n今回は型に関するテンプレートの話しかしないので、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/java\">java</a> の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%AF%A5%B9\">ジェネリクス</a>も大体同じ話だと思って構わないと思います。(実行時の表現や<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9\">コンパイラ</a>の動きなどの違いはあるが、対象としている問題は同じ)</p>\n<p>さきほどの <code>int_stack</code> の実装では、要素型が <code>int</code> に固定化されてしまっているのが問題でした。<br/>\nそこで、テンプレートでは、型を抽象化し、ある種の引数のように扱っています。</p>\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">template</span> &lt;<span class=\"synType\">typename</span> T&gt;\n<span class=\"synType\">class</span> stack {\n<span class=\"synStatement\">public</span>:\n  stack() : data(), n() {}\n\n  <span class=\"synType\">void</span> push(T x) {\n    <span class=\"synStatement\">if</span> (n &gt;= MAX_ELEM) {\n      <span class=\"synStatement\">throw</span> <span class=\"synConstant\">&quot;stack is full!!&quot;</span>;\n    }\n    data[n++] = x;\n  }\n\n  T pop() {\n    <span class=\"synStatement\">if</span> (n &lt; <span class=\"synConstant\">0</span>) {\n      <span class=\"synStatement\">throw</span> <span class=\"synConstant\">&quot;stack is empty!!&quot;</span>;\n    }\n    <span class=\"synStatement\">return</span> data[--n];\n  }\n<span class=\"synStatement\">private</span>:\n  T data[MAX_ELEM];\n  <span class=\"synType\">int</span> n;\n};\n</pre>\n<p>先頭の <code>template &lt;typename T&gt;</code> (<code>template &lt;class T&gt;</code> でも可)は、型引数の導入の役割を果たしています。<br/>\n<code>stack</code> クラスの定義内に登場する <code>T</code> は型引数として導入された型を表します。</p>\n<p>利用する際には、<code>stack&lt;int&gt;</code> とか <code>stack&lt;std::string&gt;</code> とか、型を <code>stack</code> に渡してあげればOKです。</p>\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink>stack&lt;<span class=\"synType\">int</span>&gt; int_stack;\nint_stack.push(<span class=\"synConstant\">1</span>);\nint_stack.push(<span class=\"synConstant\">2</span>);\n<span class=\"synType\">int</span> x = int_stack.pop();\nint_stack.push(<span class=\"synConstant\">&quot;abc&quot;</span>); <span class=\"synComment\">// =&gt; Compile error!</span>\n\nstack&lt;std::string&gt; str_stack;\nstr_stack.push(<span class=\"synConstant\">&quot;abc&quot;</span>);\nstr_stack.push(<span class=\"synConstant\">1</span>); <span class=\"synComment\">// =&gt; Compile error!</span>\n</pre>\n<p>このように、同じコードをコピペすることなく、複数の型に対応したスタックという汎用的なデータ構造を表現することが出来ています。<br/>\nさらに、この方法では、<code>void*</code> や <code>Object</code> と異なり、型的に誤った使用方法をしようとすると<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>エラーになるというメリットがあります。<br/>\nランタイムエラーより<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>エラーのほうが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%D0%A5%C3%A5%B0\">デバッグ</a>しやすいし発見しやすいですよね。</p>\n<h2>一旦まとめ</h2>\n<p>というわけで今回はテンプレートがなぜ便利かという話のほんのさわりの部分について書いてみました。<br/>\n次はテンプレートや<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%AF%A5%B9\">ジェネリクス</a>の実現方法、ランタイムにおける表現方法などについて書いてみます。<br/>\nそこからはテンプレート引数として値をとる話や、TMP についても触れていければと思っています。</p>\n<hr>\n<hr>\n","meta":{"rawMarkdown":"---\ntitle: \"C++ : なぜテンプレートが必要なのか\"\ndate: 2016-05-30T14:46:47.000Z\ntags: []\n---\n\n<p>こんにちは。<br/>\nちょっと <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> への熱を冷まさないために、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> のテンプレートについてまとめてみたいと思います。</p>\n\n<h2>対象</h2>\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> のテンプレートが怖い人</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>エラーメッセージが怖い人</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> の規格とブログポストを比較して誤りを探したい人(もし誤っていたら教えて下さい...)</li>\n</ul>\n\n<h2>テンプレートとは</h2>\n\n<blockquote><p>プログラミングにおけるテンプレートは、静的型付けの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>でデータ型にとらわれずにコードを書くことを可能にする機能であり、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>においては<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%C3%A5%AF\">ジェネリック</a>プログラミングに用いられる。<br/>\n<a href=\"https://ja.wikipedia.org/wiki/%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0\">テンプレート (プログラミング) - Wikipedia</a>)より</p></blockquote>\n\n<p>他の静的型付きな<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC\">プログラミング言語</a>をすでに知っている場合は，すんなり入りやすいかもしれません。<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a> や <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Scala\">Scala</a>, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%23\">C#</a> でいうところの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%AF%A5%B9\">ジェネリクス</a>に近い存在です。<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OCaml\">OCaml</a> や <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a> だと多相とか。</p>\n\n<p>雑に表現するならば、リストとか<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CF%A2%C1%DB%C7%DB%CE%F3\">連想配列</a>のように内部のデータ型に依らないデータ構造を、静的型のもとにどうやったらうまく表現できるかな、に対する解の一つです。</p>\n\n<h3>例</h3>\n\n<p>では一つの例として、スタックというデータ構造をプログラムに落としこむことを考えます。<br/>\nまずは <code>int</code> 型のスタックを定義してみます。</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synPreProc\">#define MAX_ELEM </span><span class=\"synConstant\">10</span>\n\n<span class=\"synType\">class</span> int_stack {\n<span class=\"synStatement\">public</span>:\n  int_stack() : data(), n() {}\n\n  <span class=\"synType\">void</span> push(<span class=\"synType\">int</span> x) {\n    <span class=\"synStatement\">if</span> (n &gt;= MAX_ELEM) {\n      <span class=\"synStatement\">throw</span> <span class=\"synConstant\">&quot;stack is full!!&quot;</span>;\n    }\n    data[n++] = x;\n  }\n\n  <span class=\"synType\">int</span> pop() {\n    <span class=\"synStatement\">if</span> (n &lt; <span class=\"synConstant\">0</span>) {\n      <span class=\"synStatement\">throw</span> <span class=\"synConstant\">&quot;stack is empty!!&quot;</span>;\n    }\n    <span class=\"synStatement\">return</span> data[--n];\n  }\n<span class=\"synStatement\">private</span>:\n  <span class=\"synType\">int</span> data[MAX_ELEM];\n  <span class=\"synType\">int</span> n;\n};\n</pre>\n\n<p>簡単のため、かなりお粗末なスタックですが、最低限のスタックとしての見た目はしていると思います。</p>\n\n<p>では次に、<code>std::string</code> 型のスタックや <code>double</code> 型のスタックを作りたいとなったらどうすればよいでしょうか。<br/>\nコピーして <code>int</code> を置換しますか？あまり褒められた方法ではなさそうです。</p>\n\n<h4>C でのアプローチの一つ</h4>\n\n<p>C 言語の場合、このような問題に対しては <code>void*</code> というアプローチがあります。<br/>\n<code>void*</code> は <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/java\">java</a> でいう <code>Object</code> のように扱われます。</p>\n\n<pre class=\"code lang-c\" data-lang=\"c\" data-unlink><span class=\"synPreProc\">#define MAX_ELEM </span><span class=\"synConstant\">10</span>\n\n<span class=\"synType\">struct</span> stack {\n  <span class=\"synType\">void</span> *data[MAX_ELEM];\n  <span class=\"synType\">int</span> n;\n};\n\n<span class=\"synType\">void</span> push(stack *s, <span class=\"synType\">void</span> *elem) {\n  ....\n}\n\n<span class=\"synType\">void</span> *pop(stack *s) {\n  ....\n}\n\n<span class=\"synComment\">/* Usage */</span>\nstack *s = new_stack();\n<span class=\"synType\">int</span> *x = (<span class=\"synType\">int</span>*)malloc(<span class=\"synStatement\">sizeof</span>(<span class=\"synType\">int</span>));\n*x = <span class=\"synConstant\">1</span>;\npush(s, (<span class=\"synType\">void</span>*)x);\n<span class=\"synType\">int</span> *y = (<span class=\"synType\">int</span>*)pop(s);\nprintf(<span class=\"synConstant\">&quot;</span><span class=\"synSpecial\">%d\\n</span><span class=\"synConstant\">&quot;</span> *y); <span class=\"synComment\">/* =&gt; 1 */</span>\n</pre>\n\n<p>こんな感じでしょうか。実装の細かい部分は省略しています。<br/>\n<code>push</code> の際にはあらゆるポインタを <code>void*</code> にキャストし、逆に <code>pop</code> する際には <code>void*</code> を求める型にキャストしています。<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%AF%A5%B9\">ジェネリクス</a>のなかった頃の <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/java\">java</a> は、これを <code>Object</code> へのキャスト・<code>Object</code> からのキャストとして表現していました。</p>\n\n<h5>void* のデメリット</h5>\n\n<p><code>void*</code> を使う場合のデメリットは、型システムを台無しにしている点です。(<code>malloc</code> や <code>free</code> が必要であることは C 言語特有の問題なのでスルー)<br/>\nつまり、<code>int</code> のスタックから <code>pop</code> してきたとき、<code>int*</code> に正しくキャストを行う責任は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE\">プログラマ</a>にあり、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9\">コンパイラ</a>は何も手助けをしてくれないということです。<br/>\nしたがって、 <code>int</code> スタックに <code>double</code> の値を <code>push</code> したり、 <code>double</code> スタックから <code>char*</code> を <code>pop</code> したりというミスが簡単に引き起こされてしまうということです。</p>\n\n<h4>そこでテンプレート</h4>\n\n<p>では <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> ではどのようなアプローチを取るかというと、テンプレートを使います。<br/>\n今回は型に関するテンプレートの話しかしないので、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/java\">java</a> の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%AF%A5%B9\">ジェネリクス</a>も大体同じ話だと思って構わないと思います。(実行時の表現や<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9\">コンパイラ</a>の動きなどの違いはあるが、対象としている問題は同じ)</p>\n\n<p>さきほどの <code>int_stack</code> の実装では、要素型が <code>int</code> に固定化されてしまっているのが問題でした。<br/>\nそこで、テンプレートでは、型を抽象化し、ある種の引数のように扱っています。</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">template</span> &lt;<span class=\"synType\">typename</span> T&gt;\n<span class=\"synType\">class</span> stack {\n<span class=\"synStatement\">public</span>:\n  stack() : data(), n() {}\n\n  <span class=\"synType\">void</span> push(T x) {\n    <span class=\"synStatement\">if</span> (n &gt;= MAX_ELEM) {\n      <span class=\"synStatement\">throw</span> <span class=\"synConstant\">&quot;stack is full!!&quot;</span>;\n    }\n    data[n++] = x;\n  }\n\n  T pop() {\n    <span class=\"synStatement\">if</span> (n &lt; <span class=\"synConstant\">0</span>) {\n      <span class=\"synStatement\">throw</span> <span class=\"synConstant\">&quot;stack is empty!!&quot;</span>;\n    }\n    <span class=\"synStatement\">return</span> data[--n];\n  }\n<span class=\"synStatement\">private</span>:\n  T data[MAX_ELEM];\n  <span class=\"synType\">int</span> n;\n};\n</pre>\n\n<p>先頭の <code>template &lt;typename T&gt;</code> (<code>template &lt;class T&gt;</code> でも可)は、型引数の導入の役割を果たしています。<br/>\n<code>stack</code> クラスの定義内に登場する <code>T</code> は型引数として導入された型を表します。</p>\n\n<p>利用する際には、<code>stack&lt;int&gt;</code> とか <code>stack&lt;std::string&gt;</code> とか、型を <code>stack</code> に渡してあげればOKです。</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink>stack&lt;<span class=\"synType\">int</span>&gt; int_stack;\nint_stack.push(<span class=\"synConstant\">1</span>);\nint_stack.push(<span class=\"synConstant\">2</span>);\n<span class=\"synType\">int</span> x = int_stack.pop();\nint_stack.push(<span class=\"synConstant\">&quot;abc&quot;</span>); <span class=\"synComment\">// =&gt; Compile error!</span>\n\nstack&lt;std::string&gt; str_stack;\nstr_stack.push(<span class=\"synConstant\">&quot;abc&quot;</span>);\nstr_stack.push(<span class=\"synConstant\">1</span>); <span class=\"synComment\">// =&gt; Compile error!</span>\n</pre>\n\n<p>このように、同じコードをコピペすることなく、複数の型に対応したスタックという汎用的なデータ構造を表現することが出来ています。<br/>\nさらに、この方法では、<code>void*</code> や <code>Object</code> と異なり、型的に誤った使用方法をしようとすると<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>エラーになるというメリットがあります。<br/>\nランタイムエラーより<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>エラーのほうが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%D0%A5%C3%A5%B0\">デバッグ</a>しやすいし発見しやすいですよね。</p>\n\n<h2>一旦まとめ</h2>\n\n<p>というわけで今回はテンプレートがなぜ便利かという話のほんのさわりの部分について書いてみました。<br/>\n次はテンプレートや<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%AF%A5%B9\">ジェネリクス</a>の実現方法、ランタイムにおける表現方法などについて書いてみます。<br/>\nそこからはテンプレート引数として値をとる話や、TMP についても触れていければと思っています。</p>\n\n---\n\n---\n","contentMarkdown":"\n<p>こんにちは。<br/>\nちょっと <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> への熱を冷まさないために、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> のテンプレートについてまとめてみたいと思います。</p>\n\n<h2>対象</h2>\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> のテンプレートが怖い人</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>エラーメッセージが怖い人</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> の規格とブログポストを比較して誤りを探したい人(もし誤っていたら教えて下さい...)</li>\n</ul>\n\n<h2>テンプレートとは</h2>\n\n<blockquote><p>プログラミングにおけるテンプレートは、静的型付けの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>でデータ型にとらわれずにコードを書くことを可能にする機能であり、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>においては<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%C3%A5%AF\">ジェネリック</a>プログラミングに用いられる。<br/>\n<a href=\"https://ja.wikipedia.org/wiki/%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0\">テンプレート (プログラミング) - Wikipedia</a>)より</p></blockquote>\n\n<p>他の静的型付きな<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC\">プログラミング言語</a>をすでに知っている場合は，すんなり入りやすいかもしれません。<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a> や <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Scala\">Scala</a>, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%23\">C#</a> でいうところの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%AF%A5%B9\">ジェネリクス</a>に近い存在です。<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OCaml\">OCaml</a> や <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a> だと多相とか。</p>\n\n<p>雑に表現するならば、リストとか<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CF%A2%C1%DB%C7%DB%CE%F3\">連想配列</a>のように内部のデータ型に依らないデータ構造を、静的型のもとにどうやったらうまく表現できるかな、に対する解の一つです。</p>\n\n<h3>例</h3>\n\n<p>では一つの例として、スタックというデータ構造をプログラムに落としこむことを考えます。<br/>\nまずは <code>int</code> 型のスタックを定義してみます。</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synPreProc\">#define MAX_ELEM </span><span class=\"synConstant\">10</span>\n\n<span class=\"synType\">class</span> int_stack {\n<span class=\"synStatement\">public</span>:\n  int_stack() : data(), n() {}\n\n  <span class=\"synType\">void</span> push(<span class=\"synType\">int</span> x) {\n    <span class=\"synStatement\">if</span> (n &gt;= MAX_ELEM) {\n      <span class=\"synStatement\">throw</span> <span class=\"synConstant\">&quot;stack is full!!&quot;</span>;\n    }\n    data[n++] = x;\n  }\n\n  <span class=\"synType\">int</span> pop() {\n    <span class=\"synStatement\">if</span> (n &lt; <span class=\"synConstant\">0</span>) {\n      <span class=\"synStatement\">throw</span> <span class=\"synConstant\">&quot;stack is empty!!&quot;</span>;\n    }\n    <span class=\"synStatement\">return</span> data[--n];\n  }\n<span class=\"synStatement\">private</span>:\n  <span class=\"synType\">int</span> data[MAX_ELEM];\n  <span class=\"synType\">int</span> n;\n};\n</pre>\n\n<p>簡単のため、かなりお粗末なスタックですが、最低限のスタックとしての見た目はしていると思います。</p>\n\n<p>では次に、<code>std::string</code> 型のスタックや <code>double</code> 型のスタックを作りたいとなったらどうすればよいでしょうか。<br/>\nコピーして <code>int</code> を置換しますか？あまり褒められた方法ではなさそうです。</p>\n\n<h4>C でのアプローチの一つ</h4>\n\n<p>C 言語の場合、このような問題に対しては <code>void*</code> というアプローチがあります。<br/>\n<code>void*</code> は <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/java\">java</a> でいう <code>Object</code> のように扱われます。</p>\n\n<pre class=\"code lang-c\" data-lang=\"c\" data-unlink><span class=\"synPreProc\">#define MAX_ELEM </span><span class=\"synConstant\">10</span>\n\n<span class=\"synType\">struct</span> stack {\n  <span class=\"synType\">void</span> *data[MAX_ELEM];\n  <span class=\"synType\">int</span> n;\n};\n\n<span class=\"synType\">void</span> push(stack *s, <span class=\"synType\">void</span> *elem) {\n  ....\n}\n\n<span class=\"synType\">void</span> *pop(stack *s) {\n  ....\n}\n\n<span class=\"synComment\">/* Usage */</span>\nstack *s = new_stack();\n<span class=\"synType\">int</span> *x = (<span class=\"synType\">int</span>*)malloc(<span class=\"synStatement\">sizeof</span>(<span class=\"synType\">int</span>));\n*x = <span class=\"synConstant\">1</span>;\npush(s, (<span class=\"synType\">void</span>*)x);\n<span class=\"synType\">int</span> *y = (<span class=\"synType\">int</span>*)pop(s);\nprintf(<span class=\"synConstant\">&quot;</span><span class=\"synSpecial\">%d\\n</span><span class=\"synConstant\">&quot;</span> *y); <span class=\"synComment\">/* =&gt; 1 */</span>\n</pre>\n\n<p>こんな感じでしょうか。実装の細かい部分は省略しています。<br/>\n<code>push</code> の際にはあらゆるポインタを <code>void*</code> にキャストし、逆に <code>pop</code> する際には <code>void*</code> を求める型にキャストしています。<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%AF%A5%B9\">ジェネリクス</a>のなかった頃の <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/java\">java</a> は、これを <code>Object</code> へのキャスト・<code>Object</code> からのキャストとして表現していました。</p>\n\n<h5>void* のデメリット</h5>\n\n<p><code>void*</code> を使う場合のデメリットは、型システムを台無しにしている点です。(<code>malloc</code> や <code>free</code> が必要であることは C 言語特有の問題なのでスルー)<br/>\nつまり、<code>int</code> のスタックから <code>pop</code> してきたとき、<code>int*</code> に正しくキャストを行う責任は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE\">プログラマ</a>にあり、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9\">コンパイラ</a>は何も手助けをしてくれないということです。<br/>\nしたがって、 <code>int</code> スタックに <code>double</code> の値を <code>push</code> したり、 <code>double</code> スタックから <code>char*</code> を <code>pop</code> したりというミスが簡単に引き起こされてしまうということです。</p>\n\n<h4>そこでテンプレート</h4>\n\n<p>では <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> ではどのようなアプローチを取るかというと、テンプレートを使います。<br/>\n今回は型に関するテンプレートの話しかしないので、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/java\">java</a> の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%AF%A5%B9\">ジェネリクス</a>も大体同じ話だと思って構わないと思います。(実行時の表現や<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9\">コンパイラ</a>の動きなどの違いはあるが、対象としている問題は同じ)</p>\n\n<p>さきほどの <code>int_stack</code> の実装では、要素型が <code>int</code> に固定化されてしまっているのが問題でした。<br/>\nそこで、テンプレートでは、型を抽象化し、ある種の引数のように扱っています。</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synType\">template</span> &lt;<span class=\"synType\">typename</span> T&gt;\n<span class=\"synType\">class</span> stack {\n<span class=\"synStatement\">public</span>:\n  stack() : data(), n() {}\n\n  <span class=\"synType\">void</span> push(T x) {\n    <span class=\"synStatement\">if</span> (n &gt;= MAX_ELEM) {\n      <span class=\"synStatement\">throw</span> <span class=\"synConstant\">&quot;stack is full!!&quot;</span>;\n    }\n    data[n++] = x;\n  }\n\n  T pop() {\n    <span class=\"synStatement\">if</span> (n &lt; <span class=\"synConstant\">0</span>) {\n      <span class=\"synStatement\">throw</span> <span class=\"synConstant\">&quot;stack is empty!!&quot;</span>;\n    }\n    <span class=\"synStatement\">return</span> data[--n];\n  }\n<span class=\"synStatement\">private</span>:\n  T data[MAX_ELEM];\n  <span class=\"synType\">int</span> n;\n};\n</pre>\n\n<p>先頭の <code>template &lt;typename T&gt;</code> (<code>template &lt;class T&gt;</code> でも可)は、型引数の導入の役割を果たしています。<br/>\n<code>stack</code> クラスの定義内に登場する <code>T</code> は型引数として導入された型を表します。</p>\n\n<p>利用する際には、<code>stack&lt;int&gt;</code> とか <code>stack&lt;std::string&gt;</code> とか、型を <code>stack</code> に渡してあげればOKです。</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink>stack&lt;<span class=\"synType\">int</span>&gt; int_stack;\nint_stack.push(<span class=\"synConstant\">1</span>);\nint_stack.push(<span class=\"synConstant\">2</span>);\n<span class=\"synType\">int</span> x = int_stack.pop();\nint_stack.push(<span class=\"synConstant\">&quot;abc&quot;</span>); <span class=\"synComment\">// =&gt; Compile error!</span>\n\nstack&lt;std::string&gt; str_stack;\nstr_stack.push(<span class=\"synConstant\">&quot;abc&quot;</span>);\nstr_stack.push(<span class=\"synConstant\">1</span>); <span class=\"synComment\">// =&gt; Compile error!</span>\n</pre>\n\n<p>このように、同じコードをコピペすることなく、複数の型に対応したスタックという汎用的なデータ構造を表現することが出来ています。<br/>\nさらに、この方法では、<code>void*</code> や <code>Object</code> と異なり、型的に誤った使用方法をしようとすると<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>エラーになるというメリットがあります。<br/>\nランタイムエラーより<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>エラーのほうが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%D0%A5%C3%A5%B0\">デバッグ</a>しやすいし発見しやすいですよね。</p>\n\n<h2>一旦まとめ</h2>\n\n<p>というわけで今回はテンプレートがなぜ便利かという話のほんのさわりの部分について書いてみました。<br/>\n次はテンプレートや<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%AF%A5%B9\">ジェネリクス</a>の実現方法、ランタイムにおける表現方法などについて書いてみます。<br/>\nそこからはテンプレート引数として値をとる話や、TMP についても触れていければと思っています。</p>\n\n---\n\n---\n","slug":"C++_:_なぜテンプレートが必要なのか","title":"C++ : なぜテンプレートが必要なのか","timestamp":1464619607000,"tags":[]}}},"__N_SSG":true}