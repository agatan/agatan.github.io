{"pageProps":{"post":{"content":"<p>CNN による画像分類を現実のアプリケーションで使う際には、限られた計算資源で推論をする必要があります。\n推論を待って処理するような場合は latency が重要になり、バッチ処理でも throughput を最大化したいという要求があります。</p>\n<p>各タスクで SoTA を達成しているようなモデルはとても Deep であり、毎回走らせるには大きすぎます。\nとはいえ浅いネットワークでは精度に限界もあるので、速度と精度のトレードオフを常に考える必要があります。\n計算量を抑えつつ精度を向上するネットワークを設計する、という方向で MobileNet や SqueezeNet などが提案されています。</p>\n<p>今回紹介する論文は、ちょっと別のアプローチで計算資源の問題に立ち向かっています。\nひとことでまとめると <strong>分類が十分に簡単だった場合は早期 exit し、難しいケースだけ深く計算する</strong> という構造をとります。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/39030/763043e9-c89d-1521-011a-2ae6905eb2fe.png\" alt=\"image.png\"></p>\n<p>（この図の \"easy\" と書かれている行の画像は省エネで、 \"hard\" と書かれている行の画像は全力で予測する）</p>\n<p>この記事は、Wantedly の勉強会で取り上げられた論文・技術をまとめたものです。\n<a href=\"https://qiita.com/advent-calendar/2018/wantedly_ml\">2018 年に読んだ機械学習系論文・技術まとめ at Wantedly Advent Calendar 2018 - Qiita</a></p>\n<h3>Reference</h3>\n<ul>\n<li>Multi-Scale Dense Networks for Resource Efficient Image Classification - Gao Huang, Danlu Chen, Tianhong Li, Felix Wu, Laurens van der Maaten, Kilian Q. Weinberger, et al., ICLR 2018</li>\n<li><a href=\"https://arxiv.org/abs/1703.09844\">https://arxiv.org/abs/1703.09844</a></li>\n</ul>\n<p>文中の図表は論文より引用しています。</p>\n<h3>モチベーション</h3>\n<p>先にも書きましたが、DNN は計算量の大きなアルゴリズムであり、実際に利用するケースを考えると、その速度や計算効率が気になってきます。\n現実の入力画像は様々な難易度のものがあるので、簡単な画像は浅いネットワークで解きたくなりますし、難しい画像は深いネットワークで解きたくなります。</p>\n<p>こう表現すると単純そうに見えますが、これを実現するためには「この画像は簡単か（浅いネットワークで解くべきか）、難しいか（深いネットワークで解くべきか）」を決定しなければなりません。\n実際に解く前に難易度を推定するのは難しく、事前に 2 つの model を定義しておく方法ではうまくいきません。</p>\n<p>Multi-Scale Dense Networks は、ひとつのモデルで逐次的に推論結果を出しつつ、十分に精度が出せそうであれば早期に Exit し、それ以降の計算を省略します。</p>\n<h3>アーキテクチャ</h3>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/39030/c6304ac6-1ccc-369b-0de0-2654fe5cef8d.png\" alt=\"image.png\">\n↑ がモデルのイメージです。\n<code>classifier</code> と書かれた module が複数回出てきているように、それぞれが逐次的な推論結果を出す module になります。</p>\n<p>このような構造を単純にとると以下の２点が問題になります。</p>\n<ol>\n<li>粒度の大きい特徴を捉えづらい</li>\n<li>浅い層の classifier が深い層の classifier の精度を下げてしまう</li>\n</ol>\n<h4>粒度の大きい特徴を捉えづらい</h4>\n<p>典型的な画像分類のネットワークでは、浅い層で細かい粒度の特徴を獲得し、多くの Convolution や Pooling を経たあとの深い層で荒い粒度の特徴を獲得しています。\n浅い層で分類をやってしまうと解像度の大きい特徴を獲得することができていないため、エラー率が高くなってしまいます。\n次の図は、 ResNet や DenseNet の浅い層に分類器をつけて学習させた場合のエラー率をプロットしています。（損失関数は最終層の分類器の損失と浅い層の分類器の損失の和です。）</p>\n<img src=\"https://qiita-image-store.s3.amazonaws.com/0/39030/f0488839-0129-0b45-74c4-159779694ade.png\" width=\"60%\">\n<p>横軸は全体の深さに対して「どの深さに分類器をつけるか」を表しています。\n浅い層につけた分類器ほどエラー率が高くなっていることがわかります。</p>\n<p>receptive field を大きく取った視野の広い特徴を効率的に獲得するためには feature map の解像度を下げる operation （2x2, stride 2 の convolution や pooling など）がよく使われますが、浅いうちにそれらの operation をやってしまうと、細かい粒度の特徴を獲得しづらくなってしまいます。</p>\n<h5>解決策</h5>\n<p>Multi-Scale Dense Networks では、複数の解像度の feature map を各深さごとに用意するという解決方法をとっています。\nアーキテクチャの全体像の図で縦に 3 種類のスケールの feature map が並んでいます。\n各層では、以下の２つの operation の concatenate を分類器につなげます。</p>\n<ol>\n<li>一つ前の層のもっとも解像度の低い feature map</li>\n<li>一つ前の層の一段細かい feature map を畳み込んで解像度を荒くしたもの</li>\n</ol>\n<p>これによって、細かい粒度の特徴の獲得を維持しつつ、視野の広い特徴を分類器に流すことを可能にしています。</p>\n<h4>浅い層の classifier が深い層の classifier の精度を下げてしまう</h4>\n<img src=\"https://qiita-image-store.s3.amazonaws.com/0/39030/9dd54945-ba86-d438-882b-9636fced2451.png\" width=\"60%\">\n<p>このグラフは ResNet や DenseNet の浅い層に分類器をつけたときの <strong>最終層の分類器の精度</strong> を表したものです。\n縦軸は最終層の分類器のみで学習したときの精度の相対精度です。\n特に ResNet で顕著ですが、浅い層に分類器をつけてしまうと <strong>最終層の分類器の精度が悪くなる</strong> ことがわかります。\n浅い層の分類器を最適化するために、細かい粒度の特徴が失われ、深い層にその特徴が伝わらないことが問題になっています。</p>\n<h5>解決策</h5>\n<p><strong>Dense connectivity</strong> によってこの問題を解決しています。\nDense connectiviy は DenseNet で提案されたもので、あるブロック内の中間層をすべて concatenate するブロックです。\nResNet で提案された Residual Module は、入力とそれを convolution などに通したものを足し合わせるというものでしたが、更にその考えを推し進めたのが DenseNet です。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/39030/d19184ee-8412-8705-e8a6-b92f1ab00108.png\" alt=\"image.png\"></p>\n<p>これによって、浅い層の結果がそのまま深い層に直結するため、一度細かい特徴を失っても浅い層の出力で recovery することができます。</p>\n<h3>まとめと感想</h3>\n<p>僕らも Wantedly People というスマートフォンのカメラを使ったアプリケーションを提供しているので、モバイル上での推論をしたいというモチベーションがあって読んだ論文でした。\nDenseNet の特徴をきれいに活用していて面白い論文だなと思いました。\nDenseBlock の有効性をちゃんと検証していてこの論文の提案のいいところがわかりやすいのも好きなところです。</p>\n","meta":{"rawMarkdown":"---\ntitle: \"簡単な問題は省エネで解き、難しい問題には全力を出すネットワーク: Multi-Scale Dense Networks\"\ndate: 2018-12-07T22:34:37+09:00\ntags: [\"DeepLearning\", \"論文読み\"]\nurl: https://qiita.com/agatan/items/9ea14206bf7a3881ed6d\n---\n\nCNN による画像分類を現実のアプリケーションで使う際には、限られた計算資源で推論をする必要があります。\n推論を待って処理するような場合は latency が重要になり、バッチ処理でも throughput を最大化したいという要求があります。\n\n各タスクで SoTA を達成しているようなモデルはとても Deep であり、毎回走らせるには大きすぎます。\nとはいえ浅いネットワークでは精度に限界もあるので、速度と精度のトレードオフを常に考える必要があります。\n計算量を抑えつつ精度を向上するネットワークを設計する、という方向で MobileNet や SqueezeNet などが提案されています。\n\n今回紹介する論文は、ちょっと別のアプローチで計算資源の問題に立ち向かっています。\nひとことでまとめると **分類が十分に簡単だった場合は早期 exit し、難しいケースだけ深く計算する** という構造をとります。\n\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/39030/763043e9-c89d-1521-011a-2ae6905eb2fe.png)\n\n（この図の \"easy\" と書かれている行の画像は省エネで、 \"hard\" と書かれている行の画像は全力で予測する）\n\nこの記事は、Wantedly の勉強会で取り上げられた論文・技術をまとめたものです。\n[2018 年に読んだ機械学習系論文・技術まとめ at Wantedly Advent Calendar 2018 - Qiita](https://qiita.com/advent-calendar/2018/wantedly_ml)\n\n### Reference\n\n- Multi-Scale Dense Networks for Resource Efficient Image Classification - Gao Huang, Danlu Chen, Tianhong Li, Felix Wu, Laurens van der Maaten, Kilian Q. Weinberger, et al., ICLR 2018\n- https://arxiv.org/abs/1703.09844\n\n文中の図表は論文より引用しています。\n\n### モチベーション\n\n先にも書きましたが、DNN は計算量の大きなアルゴリズムであり、実際に利用するケースを考えると、その速度や計算効率が気になってきます。\n現実の入力画像は様々な難易度のものがあるので、簡単な画像は浅いネットワークで解きたくなりますし、難しい画像は深いネットワークで解きたくなります。\n\nこう表現すると単純そうに見えますが、これを実現するためには「この画像は簡単か（浅いネットワークで解くべきか）、難しいか（深いネットワークで解くべきか）」を決定しなければなりません。\n実際に解く前に難易度を推定するのは難しく、事前に 2 つの model を定義しておく方法ではうまくいきません。\n\nMulti-Scale Dense Networks は、ひとつのモデルで逐次的に推論結果を出しつつ、十分に精度が出せそうであれば早期に Exit し、それ以降の計算を省略します。\n\n### アーキテクチャ\n\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/39030/c6304ac6-1ccc-369b-0de0-2654fe5cef8d.png)\n↑ がモデルのイメージです。\n`classifier` と書かれた module が複数回出てきているように、それぞれが逐次的な推論結果を出す module になります。\n\nこのような構造を単純にとると以下の２点が問題になります。\n\n1. 粒度の大きい特徴を捉えづらい\n2. 浅い層の classifier が深い層の classifier の精度を下げてしまう\n\n#### 粒度の大きい特徴を捉えづらい\n\n典型的な画像分類のネットワークでは、浅い層で細かい粒度の特徴を獲得し、多くの Convolution や Pooling を経たあとの深い層で荒い粒度の特徴を獲得しています。\n浅い層で分類をやってしまうと解像度の大きい特徴を獲得することができていないため、エラー率が高くなってしまいます。\n次の図は、 ResNet や DenseNet の浅い層に分類器をつけて学習させた場合のエラー率をプロットしています。（損失関数は最終層の分類器の損失と浅い層の分類器の損失の和です。）\n\n<img src=\"https://qiita-image-store.s3.amazonaws.com/0/39030/f0488839-0129-0b45-74c4-159779694ade.png\" width=\"60%\">\n\n横軸は全体の深さに対して「どの深さに分類器をつけるか」を表しています。\n浅い層につけた分類器ほどエラー率が高くなっていることがわかります。\n\nreceptive field を大きく取った視野の広い特徴を効率的に獲得するためには feature map の解像度を下げる operation （2x2, stride 2 の convolution や pooling など）がよく使われますが、浅いうちにそれらの operation をやってしまうと、細かい粒度の特徴を獲得しづらくなってしまいます。\n\n##### 解決策\n\nMulti-Scale Dense Networks では、複数の解像度の feature map を各深さごとに用意するという解決方法をとっています。\nアーキテクチャの全体像の図で縦に 3 種類のスケールの feature map が並んでいます。\n各層では、以下の２つの operation の concatenate を分類器につなげます。\n\n1. 一つ前の層のもっとも解像度の低い feature map\n2. 一つ前の層の一段細かい feature map を畳み込んで解像度を荒くしたもの\n\nこれによって、細かい粒度の特徴の獲得を維持しつつ、視野の広い特徴を分類器に流すことを可能にしています。\n\n#### 浅い層の classifier が深い層の classifier の精度を下げてしまう\n\n<img src=\"https://qiita-image-store.s3.amazonaws.com/0/39030/9dd54945-ba86-d438-882b-9636fced2451.png\" width=\"60%\">\n\nこのグラフは ResNet や DenseNet の浅い層に分類器をつけたときの **最終層の分類器の精度** を表したものです。\n縦軸は最終層の分類器のみで学習したときの精度の相対精度です。\n特に ResNet で顕著ですが、浅い層に分類器をつけてしまうと **最終層の分類器の精度が悪くなる** ことがわかります。\n浅い層の分類器を最適化するために、細かい粒度の特徴が失われ、深い層にその特徴が伝わらないことが問題になっています。\n\n##### 解決策\n\n**Dense connectivity** によってこの問題を解決しています。\nDense connectiviy は DenseNet で提案されたもので、あるブロック内の中間層をすべて concatenate するブロックです。\nResNet で提案された Residual Module は、入力とそれを convolution などに通したものを足し合わせるというものでしたが、更にその考えを推し進めたのが DenseNet です。\n\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/39030/d19184ee-8412-8705-e8a6-b92f1ab00108.png)\n\nこれによって、浅い層の結果がそのまま深い層に直結するため、一度細かい特徴を失っても浅い層の出力で recovery することができます。\n\n### まとめと感想\n\n僕らも Wantedly People というスマートフォンのカメラを使ったアプリケーションを提供しているので、モバイル上での推論をしたいというモチベーションがあって読んだ論文でした。\nDenseNet の特徴をきれいに活用していて面白い論文だなと思いました。\nDenseBlock の有効性をちゃんと検証していてこの論文の提案のいいところがわかりやすいのも好きなところです。\n","contentMarkdown":"\nCNN による画像分類を現実のアプリケーションで使う際には、限られた計算資源で推論をする必要があります。\n推論を待って処理するような場合は latency が重要になり、バッチ処理でも throughput を最大化したいという要求があります。\n\n各タスクで SoTA を達成しているようなモデルはとても Deep であり、毎回走らせるには大きすぎます。\nとはいえ浅いネットワークでは精度に限界もあるので、速度と精度のトレードオフを常に考える必要があります。\n計算量を抑えつつ精度を向上するネットワークを設計する、という方向で MobileNet や SqueezeNet などが提案されています。\n\n今回紹介する論文は、ちょっと別のアプローチで計算資源の問題に立ち向かっています。\nひとことでまとめると **分類が十分に簡単だった場合は早期 exit し、難しいケースだけ深く計算する** という構造をとります。\n\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/39030/763043e9-c89d-1521-011a-2ae6905eb2fe.png)\n\n（この図の \"easy\" と書かれている行の画像は省エネで、 \"hard\" と書かれている行の画像は全力で予測する）\n\nこの記事は、Wantedly の勉強会で取り上げられた論文・技術をまとめたものです。\n[2018 年に読んだ機械学習系論文・技術まとめ at Wantedly Advent Calendar 2018 - Qiita](https://qiita.com/advent-calendar/2018/wantedly_ml)\n\n### Reference\n\n- Multi-Scale Dense Networks for Resource Efficient Image Classification - Gao Huang, Danlu Chen, Tianhong Li, Felix Wu, Laurens van der Maaten, Kilian Q. Weinberger, et al., ICLR 2018\n- https://arxiv.org/abs/1703.09844\n\n文中の図表は論文より引用しています。\n\n### モチベーション\n\n先にも書きましたが、DNN は計算量の大きなアルゴリズムであり、実際に利用するケースを考えると、その速度や計算効率が気になってきます。\n現実の入力画像は様々な難易度のものがあるので、簡単な画像は浅いネットワークで解きたくなりますし、難しい画像は深いネットワークで解きたくなります。\n\nこう表現すると単純そうに見えますが、これを実現するためには「この画像は簡単か（浅いネットワークで解くべきか）、難しいか（深いネットワークで解くべきか）」を決定しなければなりません。\n実際に解く前に難易度を推定するのは難しく、事前に 2 つの model を定義しておく方法ではうまくいきません。\n\nMulti-Scale Dense Networks は、ひとつのモデルで逐次的に推論結果を出しつつ、十分に精度が出せそうであれば早期に Exit し、それ以降の計算を省略します。\n\n### アーキテクチャ\n\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/39030/c6304ac6-1ccc-369b-0de0-2654fe5cef8d.png)\n↑ がモデルのイメージです。\n`classifier` と書かれた module が複数回出てきているように、それぞれが逐次的な推論結果を出す module になります。\n\nこのような構造を単純にとると以下の２点が問題になります。\n\n1. 粒度の大きい特徴を捉えづらい\n2. 浅い層の classifier が深い層の classifier の精度を下げてしまう\n\n#### 粒度の大きい特徴を捉えづらい\n\n典型的な画像分類のネットワークでは、浅い層で細かい粒度の特徴を獲得し、多くの Convolution や Pooling を経たあとの深い層で荒い粒度の特徴を獲得しています。\n浅い層で分類をやってしまうと解像度の大きい特徴を獲得することができていないため、エラー率が高くなってしまいます。\n次の図は、 ResNet や DenseNet の浅い層に分類器をつけて学習させた場合のエラー率をプロットしています。（損失関数は最終層の分類器の損失と浅い層の分類器の損失の和です。）\n\n<img src=\"https://qiita-image-store.s3.amazonaws.com/0/39030/f0488839-0129-0b45-74c4-159779694ade.png\" width=\"60%\">\n\n横軸は全体の深さに対して「どの深さに分類器をつけるか」を表しています。\n浅い層につけた分類器ほどエラー率が高くなっていることがわかります。\n\nreceptive field を大きく取った視野の広い特徴を効率的に獲得するためには feature map の解像度を下げる operation （2x2, stride 2 の convolution や pooling など）がよく使われますが、浅いうちにそれらの operation をやってしまうと、細かい粒度の特徴を獲得しづらくなってしまいます。\n\n##### 解決策\n\nMulti-Scale Dense Networks では、複数の解像度の feature map を各深さごとに用意するという解決方法をとっています。\nアーキテクチャの全体像の図で縦に 3 種類のスケールの feature map が並んでいます。\n各層では、以下の２つの operation の concatenate を分類器につなげます。\n\n1. 一つ前の層のもっとも解像度の低い feature map\n2. 一つ前の層の一段細かい feature map を畳み込んで解像度を荒くしたもの\n\nこれによって、細かい粒度の特徴の獲得を維持しつつ、視野の広い特徴を分類器に流すことを可能にしています。\n\n#### 浅い層の classifier が深い層の classifier の精度を下げてしまう\n\n<img src=\"https://qiita-image-store.s3.amazonaws.com/0/39030/9dd54945-ba86-d438-882b-9636fced2451.png\" width=\"60%\">\n\nこのグラフは ResNet や DenseNet の浅い層に分類器をつけたときの **最終層の分類器の精度** を表したものです。\n縦軸は最終層の分類器のみで学習したときの精度の相対精度です。\n特に ResNet で顕著ですが、浅い層に分類器をつけてしまうと **最終層の分類器の精度が悪くなる** ことがわかります。\n浅い層の分類器を最適化するために、細かい粒度の特徴が失われ、深い層にその特徴が伝わらないことが問題になっています。\n\n##### 解決策\n\n**Dense connectivity** によってこの問題を解決しています。\nDense connectiviy は DenseNet で提案されたもので、あるブロック内の中間層をすべて concatenate するブロックです。\nResNet で提案された Residual Module は、入力とそれを convolution などに通したものを足し合わせるというものでしたが、更にその考えを推し進めたのが DenseNet です。\n\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/39030/d19184ee-8412-8705-e8a6-b92f1ab00108.png)\n\nこれによって、浅い層の結果がそのまま深い層に直結するため、一度細かい特徴を失っても浅い層の出力で recovery することができます。\n\n### まとめと感想\n\n僕らも Wantedly People というスマートフォンのカメラを使ったアプリケーションを提供しているので、モバイル上での推論をしたいというモチベーションがあって読んだ論文でした。\nDenseNet の特徴をきれいに活用していて面白い論文だなと思いました。\nDenseBlock の有効性をちゃんと検証していてこの論文の提案のいいところがわかりやすいのも好きなところです。\n","slug":"簡単な問題は省エネで解き、難しい問題には全力を出すネットワーク:_Multi-Scale_Dense_Networks","title":"簡単な問題は省エネで解き、難しい問題には全力を出すネットワーク: Multi-Scale Dense Networks","timestamp":1544189677000,"tags":["DeepLearning","論文読み"]}}},"__N_SSG":true}