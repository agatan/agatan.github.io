{"pageProps":{"post":{"content":"<p>こんばんは. <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>(<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GHC\">GHC</a>)で並行処理を必要とするアプリケーションを書いてみようと思ったのですが, 並列処理に関するいろいろについてよくわかっていない部分が多かったので, 調べたついでにまとめておこうと思います.</p>\n<p>もし間違い等ありましたらコメントいただけるとありがたいです</p>\n<h2>Concurrent v.s. Parallel</h2>\n<p>Concurrentは並行, Parallelは並列と訳されます.<br/>\nConcurrentは論理的に同時に実行されることで, 実際に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>のタスクが物理的に同時に実行している必要はありません. 実際どうであれ, 同時に実行しているように見えればOKで, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>のタスクでCPUを細かく交代で使用しながら実行していくといった実行モデルもConcurrentであるといえます.<br/>\nParallelは物理的に同時に実行されることです. 必然的に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>のCPUが必要になります. 物理的に同時に実行されているタスクは, 論理的にも同時に実行しているとみなせるので, ParallelであればConcurrentです.</p>\n<p>この記事ではConcurrentについて言及しているつもりです.</p>\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>のスレッド</h2>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>は処理系実装の軽量スレッドを持ちます. OSが提供するネイティブスレッドと違い, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C6%A5%AD%A5%B9%A5%C8%A5%B9%A5%A4%A5%C3%A5%C1\">コンテキストスイッチ</a>(スレッドの切り替え)のオーバーヘッドが少なく, より気軽に扱えるスレッドのようです. 軽量スレッドといえば <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Erlang\">Erlang</a> や <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Golang\">Golang</a> が思い浮かびますね.(<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Erlang\">Erlang</a>は軽量プロセスっていうんでしたっけ)</p>\n<p>実際に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>で軽量スレッドを立ち上げてみます.  <br/>\nまずはスレッドを立ち上げない場合です. (threadDelayは指定したマイクロ秒分スレッドをスリープします)</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>module Main where\n\nimport Control.Concurrent (threadDelay)\n\nsleepN :: Int -&gt; IO ()\nsleepN n = do\n    putStrLn $ &#34;sleep &#34; ++ show n\n    threadDelay $ n * 10 ^ 6\n    putStrLn $ &#34;wake up &#34; ++ show n\n\nmain :: IO ()\nmain = do\n    sleepN 3\n    threadDelay $ 2 * 10 ^ 6\n    putStrLn &#34;sleep 2 and wakeup&#34;\n    threadDelay $ 2 * 10 ^ 6\n    putStrLn &#34;end&#34;</pre>\n<p>実行結果</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>sleep 3\nwake up 3\nsleep 2 and wakeup\nend</pre>\n<p>全体として, 3秒->2秒->2秒とスリープするので7秒ほどの実行時間になります.</p>\n<p>つぎにスレッドを立ち上げる場合です<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>でスレッドを立ち上げるには <code>forkIO :: IO () -&gt; IO ThreadId</code> を使用します. <code>IO ()</code>を渡すと, それを新しく立ち上げたスレッド上で実行してくれます.<br/>\n(<code>forkOS :: IO () -&gt; IO ThreadId</code> というものもありますが, こちらは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>の軽量スレッドではなく, ネイティブスレッドを立ち上げます)</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>module Main where\n\nimport Control.Concurrent (forkIO, threadDelay)\n\nsleepN :: Int -&gt; IO ()\nsleepN n = do\n    putStrLn $ &#34;sleep &#34; ++ show n\n    threadDelay $ n * 10 ^ 6\n    putStrLn $ &#34;wake up &#34; ++ show n\n\nmain :: IO ()\nmain = do\n    forkIO $ sleepN 3\n    threadDelay $ 2 * 10 ^ 6\n    putStrLn &#34;sleep 2 and wakeup&#34;\n    threadDelay $ 2 * 10 ^ 6\n    putStrLn &#34;end&#34;</pre>\n<p>実行結果</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>sleep 3\nsleep 2 and wakeup\nwake up 3\nend</pre>\n<p>１つのスレッドが3秒スリープしている間に, もう一つのスレッドのスリープが始まるので, 全体で4秒ほどの実行時間になります.</p>\n<h2>共有変数</h2>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>スレッドによる並行実行を扱うと, どうしても共有変数的なものが欲しくなる場合があります. <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>でスレッド間共有をしたい場合はいくつかの方法があるようです.<br/>\nもっとも直感的(手続きプログラミング出身者にとって)で馴染みやすいのは <code>Data.IORef</code> かと思います. <code>IO</code> の世界の内側でのみ読み書きができる\"変数\"です.</p>\n<p>まずは単一スレッドで実際に使ってみます.(以後import などは省略します)</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>add1 :: IORef Int -&gt; IO ()\nadd1 v = do\n    modifyIORef v (+1)\n\nmain :: IO ()\nmain = do\n    ref &lt;- newIORef 0\n    v &lt;- readIORef ref\n    print v\n    add1 ref\n    v&#39; &lt;- readIORef ref\n    print v&#39;</pre>\n<p>実行結果</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>0\n1</pre>\n<p>このように変数として中身を書き換えることができます.<br/>\nこれは変数なので, ひとつのスレッドで行った書き換えが他のスレッドにも影響を及ぼします.(State<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E2%A5%CA%A5%C9\">モナド</a>のように変数を模倣しているだけではこれはできない)</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>add1 :: IORef Int -&gt; IO ()\nadd1 v = modifyIORef v (+1)\n\nspawn :: IORef Int -&gt; IO ()\nspawn ref = do\n    forkIO $ add1 ref\n    return ()\n\nmain :: IO ()\nmain = do\n    ref &lt;- newIORef 0\n    spawn ref\n    spawn ref\n    spawn ref\n    threadDelay 1000000\n    v &lt;- readIORef ref\n    print v</pre>\n<h2>データ競合</h2>\n<p>一方これを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>スレッドで並列に動かすことを考えます. <code>modifyIORef</code> はアトミックではないので,</p>\n<pre><code>v の中身を読む\nv の中身 + 1 を計算する\nv にその結果を入れる\n</code></pre>\n<p>というそれぞれの計算の間に別のスレッドでの計算が割り込まれる可能性がある.<br/>\n上の例で, <code>spawn ref &gt;&gt; spawn ref &gt;&gt; spawn ref</code> という部分は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>スレッドから一つの変数を同時に変更しようとしている. そのため, 変更が競合し意図しない動作になる可能性がある.</p>\n<p>IORefで競合を防ぐ方法としては <code>atomicModifyIORef :: IORef a -&gt; (a -&gt; (a, b)) -&gt; IO b</code> を使用する方法がある.<br/>\n<code>atomicModifyIORef</code> の第2引数は <code>a -&gt; (a, b)</code> である. これは <code>IORef</code> の中身を引数にとって, <code>(変更後の値, atomicModifyIORefの返り値にしたい値)</code> を返す関数である.</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>inc :: IORef Int -&gt; IO Int\ninc ref = atomicModifyIORef ref (\\n -&gt; (n + 1, n))\n\nmain :: IO ()\nmain = do\n    ref &lt;- newIORef 0\n    res &lt;- inc ref\n    v &lt;- readIORef ref\n    print res\n    print v</pre>\n<p><code>inc</code> は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%B8%C0%B8%EC\">C言語</a>の<code>i++;</code>のような動きをする. 加算する前の値を返し, 変数をインクリメントする.<br/>\n<code>atomicModifyIORef</code> は名前の通り atomic な操作であり, 分割不可能になるため他のスレッドと処理が競合することがなくなる.</p>\n<h2>一旦まとめ</h2>\n<p>長くなってきた &amp; 疲れてきたので一旦きります.<br/>\n今回はスレッド間共有変数のために <code>IORef</code> を使用し, その変更に <code>atomicModifyIORef</code> を使用することでデータ競合を防ぐ方法を紹介した.</p>\n<p><code>MVar</code> や <code>STM</code> を使用する方法もあり, そっちのほうが良い場合もあるっぽいのでそっちについてもまとめたいと思います.</p>\n<hr>\n<hr>\n","meta":{"rawMarkdown":"---\ntitle: \"HaskellのConcurrentについて調べてまとめる (IORef編)\"\ndate: 2015-07-21T14:46:58.000Z\ntags: []\n---\n\n<p>こんばんは. <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>(<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GHC\">GHC</a>)で並行処理を必要とするアプリケーションを書いてみようと思ったのですが, 並列処理に関するいろいろについてよくわかっていない部分が多かったので, 調べたついでにまとめておこうと思います.</p>\n\n<p>もし間違い等ありましたらコメントいただけるとありがたいです</p>\n\n<h2>Concurrent v.s. Parallel</h2>\n\n<p>Concurrentは並行, Parallelは並列と訳されます.<br/>\nConcurrentは論理的に同時に実行されることで, 実際に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>のタスクが物理的に同時に実行している必要はありません. 実際どうであれ, 同時に実行しているように見えればOKで, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>のタスクでCPUを細かく交代で使用しながら実行していくといった実行モデルもConcurrentであるといえます.<br/>\nParallelは物理的に同時に実行されることです. 必然的に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>のCPUが必要になります. 物理的に同時に実行されているタスクは, 論理的にも同時に実行しているとみなせるので, ParallelであればConcurrentです.</p>\n\n<p>この記事ではConcurrentについて言及しているつもりです.</p>\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>のスレッド</h2>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>は処理系実装の軽量スレッドを持ちます. OSが提供するネイティブスレッドと違い, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C6%A5%AD%A5%B9%A5%C8%A5%B9%A5%A4%A5%C3%A5%C1\">コンテキストスイッチ</a>(スレッドの切り替え)のオーバーヘッドが少なく, より気軽に扱えるスレッドのようです. 軽量スレッドといえば <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Erlang\">Erlang</a> や <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Golang\">Golang</a> が思い浮かびますね.(<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Erlang\">Erlang</a>は軽量プロセスっていうんでしたっけ)</p>\n\n<p>実際に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>で軽量スレッドを立ち上げてみます.  <br/>\nまずはスレッドを立ち上げない場合です. (threadDelayは指定したマイクロ秒分スレッドをスリープします)</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>module Main where\n\nimport Control.Concurrent (threadDelay)\n\nsleepN :: Int -&gt; IO ()\nsleepN n = do\n    putStrLn $ &#34;sleep &#34; ++ show n\n    threadDelay $ n * 10 ^ 6\n    putStrLn $ &#34;wake up &#34; ++ show n\n\nmain :: IO ()\nmain = do\n    sleepN 3\n    threadDelay $ 2 * 10 ^ 6\n    putStrLn &#34;sleep 2 and wakeup&#34;\n    threadDelay $ 2 * 10 ^ 6\n    putStrLn &#34;end&#34;</pre>\n\n<p>実行結果</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>sleep 3\nwake up 3\nsleep 2 and wakeup\nend</pre>\n\n<p>全体として, 3秒->2秒->2秒とスリープするので7秒ほどの実行時間になります.</p>\n\n<p>つぎにスレッドを立ち上げる場合です<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>でスレッドを立ち上げるには <code>forkIO :: IO () -&gt; IO ThreadId</code> を使用します. <code>IO ()</code>を渡すと, それを新しく立ち上げたスレッド上で実行してくれます.<br/>\n(<code>forkOS :: IO () -&gt; IO ThreadId</code> というものもありますが, こちらは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>の軽量スレッドではなく, ネイティブスレッドを立ち上げます)</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>module Main where\n\nimport Control.Concurrent (forkIO, threadDelay)\n\nsleepN :: Int -&gt; IO ()\nsleepN n = do\n    putStrLn $ &#34;sleep &#34; ++ show n\n    threadDelay $ n * 10 ^ 6\n    putStrLn $ &#34;wake up &#34; ++ show n\n\nmain :: IO ()\nmain = do\n    forkIO $ sleepN 3\n    threadDelay $ 2 * 10 ^ 6\n    putStrLn &#34;sleep 2 and wakeup&#34;\n    threadDelay $ 2 * 10 ^ 6\n    putStrLn &#34;end&#34;</pre>\n\n<p>実行結果</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>sleep 3\nsleep 2 and wakeup\nwake up 3\nend</pre>\n\n<p>１つのスレッドが3秒スリープしている間に, もう一つのスレッドのスリープが始まるので, 全体で4秒ほどの実行時間になります.</p>\n\n<h2>共有変数</h2>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>スレッドによる並行実行を扱うと, どうしても共有変数的なものが欲しくなる場合があります. <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>でスレッド間共有をしたい場合はいくつかの方法があるようです.<br/>\nもっとも直感的(手続きプログラミング出身者にとって)で馴染みやすいのは <code>Data.IORef</code> かと思います. <code>IO</code> の世界の内側でのみ読み書きができる\"変数\"です.</p>\n\n<p>まずは単一スレッドで実際に使ってみます.(以後import などは省略します)</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>add1 :: IORef Int -&gt; IO ()\nadd1 v = do\n    modifyIORef v (+1)\n\nmain :: IO ()\nmain = do\n    ref &lt;- newIORef 0\n    v &lt;- readIORef ref\n    print v\n    add1 ref\n    v&#39; &lt;- readIORef ref\n    print v&#39;</pre>\n\n<p>実行結果</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>0\n1</pre>\n\n<p>このように変数として中身を書き換えることができます.<br/>\nこれは変数なので, ひとつのスレッドで行った書き換えが他のスレッドにも影響を及ぼします.(State<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E2%A5%CA%A5%C9\">モナド</a>のように変数を模倣しているだけではこれはできない)</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>add1 :: IORef Int -&gt; IO ()\nadd1 v = modifyIORef v (+1)\n\nspawn :: IORef Int -&gt; IO ()\nspawn ref = do\n    forkIO $ add1 ref\n    return ()\n\nmain :: IO ()\nmain = do\n    ref &lt;- newIORef 0\n    spawn ref\n    spawn ref\n    spawn ref\n    threadDelay 1000000\n    v &lt;- readIORef ref\n    print v</pre>\n\n<h2>データ競合</h2>\n\n<p>一方これを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>スレッドで並列に動かすことを考えます. <code>modifyIORef</code> はアトミックではないので,</p>\n\n<pre><code>v の中身を読む\nv の中身 + 1 を計算する\nv にその結果を入れる\n</code></pre>\n\n<p>というそれぞれの計算の間に別のスレッドでの計算が割り込まれる可能性がある.<br/>\n上の例で, <code>spawn ref &gt;&gt; spawn ref &gt;&gt; spawn ref</code> という部分は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>スレッドから一つの変数を同時に変更しようとしている. そのため, 変更が競合し意図しない動作になる可能性がある.</p>\n\n<p>IORefで競合を防ぐ方法としては <code>atomicModifyIORef :: IORef a -&gt; (a -&gt; (a, b)) -&gt; IO b</code> を使用する方法がある.<br/>\n<code>atomicModifyIORef</code> の第2引数は <code>a -&gt; (a, b)</code> である. これは <code>IORef</code> の中身を引数にとって, <code>(変更後の値, atomicModifyIORefの返り値にしたい値)</code> を返す関数である.</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>inc :: IORef Int -&gt; IO Int\ninc ref = atomicModifyIORef ref (\\n -&gt; (n + 1, n))\n\nmain :: IO ()\nmain = do\n    ref &lt;- newIORef 0\n    res &lt;- inc ref\n    v &lt;- readIORef ref\n    print res\n    print v</pre>\n\n<p><code>inc</code> は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%B8%C0%B8%EC\">C言語</a>の<code>i++;</code>のような動きをする. 加算する前の値を返し, 変数をインクリメントする.<br/>\n<code>atomicModifyIORef</code> は名前の通り atomic な操作であり, 分割不可能になるため他のスレッドと処理が競合することがなくなる.</p>\n\n<h2>一旦まとめ</h2>\n\n<p>長くなってきた &amp; 疲れてきたので一旦きります.<br/>\n今回はスレッド間共有変数のために <code>IORef</code> を使用し, その変更に <code>atomicModifyIORef</code> を使用することでデータ競合を防ぐ方法を紹介した.</p>\n\n<p><code>MVar</code> や <code>STM</code> を使用する方法もあり, そっちのほうが良い場合もあるっぽいのでそっちについてもまとめたいと思います.</p>\n\n---\n\n---\n","contentMarkdown":"\n<p>こんばんは. <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>(<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GHC\">GHC</a>)で並行処理を必要とするアプリケーションを書いてみようと思ったのですが, 並列処理に関するいろいろについてよくわかっていない部分が多かったので, 調べたついでにまとめておこうと思います.</p>\n\n<p>もし間違い等ありましたらコメントいただけるとありがたいです</p>\n\n<h2>Concurrent v.s. Parallel</h2>\n\n<p>Concurrentは並行, Parallelは並列と訳されます.<br/>\nConcurrentは論理的に同時に実行されることで, 実際に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>のタスクが物理的に同時に実行している必要はありません. 実際どうであれ, 同時に実行しているように見えればOKで, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>のタスクでCPUを細かく交代で使用しながら実行していくといった実行モデルもConcurrentであるといえます.<br/>\nParallelは物理的に同時に実行されることです. 必然的に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>のCPUが必要になります. 物理的に同時に実行されているタスクは, 論理的にも同時に実行しているとみなせるので, ParallelであればConcurrentです.</p>\n\n<p>この記事ではConcurrentについて言及しているつもりです.</p>\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>のスレッド</h2>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>は処理系実装の軽量スレッドを持ちます. OSが提供するネイティブスレッドと違い, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C6%A5%AD%A5%B9%A5%C8%A5%B9%A5%A4%A5%C3%A5%C1\">コンテキストスイッチ</a>(スレッドの切り替え)のオーバーヘッドが少なく, より気軽に扱えるスレッドのようです. 軽量スレッドといえば <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Erlang\">Erlang</a> や <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Golang\">Golang</a> が思い浮かびますね.(<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Erlang\">Erlang</a>は軽量プロセスっていうんでしたっけ)</p>\n\n<p>実際に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>で軽量スレッドを立ち上げてみます.  <br/>\nまずはスレッドを立ち上げない場合です. (threadDelayは指定したマイクロ秒分スレッドをスリープします)</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>module Main where\n\nimport Control.Concurrent (threadDelay)\n\nsleepN :: Int -&gt; IO ()\nsleepN n = do\n    putStrLn $ &#34;sleep &#34; ++ show n\n    threadDelay $ n * 10 ^ 6\n    putStrLn $ &#34;wake up &#34; ++ show n\n\nmain :: IO ()\nmain = do\n    sleepN 3\n    threadDelay $ 2 * 10 ^ 6\n    putStrLn &#34;sleep 2 and wakeup&#34;\n    threadDelay $ 2 * 10 ^ 6\n    putStrLn &#34;end&#34;</pre>\n\n<p>実行結果</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>sleep 3\nwake up 3\nsleep 2 and wakeup\nend</pre>\n\n<p>全体として, 3秒->2秒->2秒とスリープするので7秒ほどの実行時間になります.</p>\n\n<p>つぎにスレッドを立ち上げる場合です<br/>\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>でスレッドを立ち上げるには <code>forkIO :: IO () -&gt; IO ThreadId</code> を使用します. <code>IO ()</code>を渡すと, それを新しく立ち上げたスレッド上で実行してくれます.<br/>\n(<code>forkOS :: IO () -&gt; IO ThreadId</code> というものもありますが, こちらは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>の軽量スレッドではなく, ネイティブスレッドを立ち上げます)</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>module Main where\n\nimport Control.Concurrent (forkIO, threadDelay)\n\nsleepN :: Int -&gt; IO ()\nsleepN n = do\n    putStrLn $ &#34;sleep &#34; ++ show n\n    threadDelay $ n * 10 ^ 6\n    putStrLn $ &#34;wake up &#34; ++ show n\n\nmain :: IO ()\nmain = do\n    forkIO $ sleepN 3\n    threadDelay $ 2 * 10 ^ 6\n    putStrLn &#34;sleep 2 and wakeup&#34;\n    threadDelay $ 2 * 10 ^ 6\n    putStrLn &#34;end&#34;</pre>\n\n<p>実行結果</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>sleep 3\nsleep 2 and wakeup\nwake up 3\nend</pre>\n\n<p>１つのスレッドが3秒スリープしている間に, もう一つのスレッドのスリープが始まるので, 全体で4秒ほどの実行時間になります.</p>\n\n<h2>共有変数</h2>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>スレッドによる並行実行を扱うと, どうしても共有変数的なものが欲しくなる場合があります. <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Haskell\">Haskell</a>でスレッド間共有をしたい場合はいくつかの方法があるようです.<br/>\nもっとも直感的(手続きプログラミング出身者にとって)で馴染みやすいのは <code>Data.IORef</code> かと思います. <code>IO</code> の世界の内側でのみ読み書きができる\"変数\"です.</p>\n\n<p>まずは単一スレッドで実際に使ってみます.(以後import などは省略します)</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>add1 :: IORef Int -&gt; IO ()\nadd1 v = do\n    modifyIORef v (+1)\n\nmain :: IO ()\nmain = do\n    ref &lt;- newIORef 0\n    v &lt;- readIORef ref\n    print v\n    add1 ref\n    v&#39; &lt;- readIORef ref\n    print v&#39;</pre>\n\n<p>実行結果</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>0\n1</pre>\n\n<p>このように変数として中身を書き換えることができます.<br/>\nこれは変数なので, ひとつのスレッドで行った書き換えが他のスレッドにも影響を及ぼします.(State<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E2%A5%CA%A5%C9\">モナド</a>のように変数を模倣しているだけではこれはできない)</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>add1 :: IORef Int -&gt; IO ()\nadd1 v = modifyIORef v (+1)\n\nspawn :: IORef Int -&gt; IO ()\nspawn ref = do\n    forkIO $ add1 ref\n    return ()\n\nmain :: IO ()\nmain = do\n    ref &lt;- newIORef 0\n    spawn ref\n    spawn ref\n    spawn ref\n    threadDelay 1000000\n    v &lt;- readIORef ref\n    print v</pre>\n\n<h2>データ競合</h2>\n\n<p>一方これを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>スレッドで並列に動かすことを考えます. <code>modifyIORef</code> はアトミックではないので,</p>\n\n<pre><code>v の中身を読む\nv の中身 + 1 を計算する\nv にその結果を入れる\n</code></pre>\n\n<p>というそれぞれの計算の間に別のスレッドでの計算が割り込まれる可能性がある.<br/>\n上の例で, <code>spawn ref &gt;&gt; spawn ref &gt;&gt; spawn ref</code> という部分は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>スレッドから一つの変数を同時に変更しようとしている. そのため, 変更が競合し意図しない動作になる可能性がある.</p>\n\n<p>IORefで競合を防ぐ方法としては <code>atomicModifyIORef :: IORef a -&gt; (a -&gt; (a, b)) -&gt; IO b</code> を使用する方法がある.<br/>\n<code>atomicModifyIORef</code> の第2引数は <code>a -&gt; (a, b)</code> である. これは <code>IORef</code> の中身を引数にとって, <code>(変更後の値, atomicModifyIORefの返り値にしたい値)</code> を返す関数である.</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>inc :: IORef Int -&gt; IO Int\ninc ref = atomicModifyIORef ref (\\n -&gt; (n + 1, n))\n\nmain :: IO ()\nmain = do\n    ref &lt;- newIORef 0\n    res &lt;- inc ref\n    v &lt;- readIORef ref\n    print res\n    print v</pre>\n\n<p><code>inc</code> は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%B8%C0%B8%EC\">C言語</a>の<code>i++;</code>のような動きをする. 加算する前の値を返し, 変数をインクリメントする.<br/>\n<code>atomicModifyIORef</code> は名前の通り atomic な操作であり, 分割不可能になるため他のスレッドと処理が競合することがなくなる.</p>\n\n<h2>一旦まとめ</h2>\n\n<p>長くなってきた &amp; 疲れてきたので一旦きります.<br/>\n今回はスレッド間共有変数のために <code>IORef</code> を使用し, その変更に <code>atomicModifyIORef</code> を使用することでデータ競合を防ぐ方法を紹介した.</p>\n\n<p><code>MVar</code> や <code>STM</code> を使用する方法もあり, そっちのほうが良い場合もあるっぽいのでそっちについてもまとめたいと思います.</p>\n\n---\n\n---\n","slug":"HaskellのConcurrentについて調べてまとめる_(IORef編)","title":"HaskellのConcurrentについて調べてまとめる (IORef編)","timestamp":1437490018000,"tags":[]}}},"__N_SSG":true}