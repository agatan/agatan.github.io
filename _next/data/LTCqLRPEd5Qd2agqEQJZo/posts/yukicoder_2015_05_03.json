{"pageProps":{"post":{"content":"<p>今週は土日共に予定があって<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/AtCoder\">AtCoder</a>さんもyukicoderさんも出場したかったのですが出来ず...</p>\n<h1><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/AtCoder\">AtCoder</a> - ARC</h1>\n<p>今週の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/AtCoder\">AtCoder</a>さんはABCはなかった？ぽくて, ARCに挑むにはまだちょっと力不足かなと思うので, 一旦保留します</p>\n<h1>yukicoder</h1>\n<p>というわけでyukicoderさんの方の最初の2問についてだけコンテスト後ですが挑戦してみましたー</p>\n<h2>　<a href=\"http://yukicoder.me/problems/436\">No.201 yukicoderじゃんけん - yukicoder</a></h2>\n<p>ゆるふわなじゃんけんですね。じゃんけんといいつつ、手は全く関係ないただの数値比較ですｗｗ<br/>\nただし、注意しなければならないのが数値の範囲です。<code>10 ^ 1000</code> までという非常に大きな数字を扱う必要があるので、単純に実装すると落ちます。<br/>\n今まであんまりこういった入力数値の範囲について注視していなかったのですが、今回ばっちりひっかかって落ちたので今度からはちゃんと見ないとダメですねｗｗ</p>\n<p>あ、あと今回は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>を使用してみましたー競技プログラミングとは別件で最近<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>をよく利用しているので、その流れでDから一旦変えてみましたー</p>\n<p>非常に大きな数値を扱う場合、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/ruby\">ruby</a>や<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/python\">python</a>であれば自動的に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/BigDecimal\">BigDecimal</a>のようなクラスを使用してくれるので素直に実装すればそのまま通ってしまいますが、今回は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>なので文字列として受け取って桁数を比較する方法で実装しました。</p>\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;iostream&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;string&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;vector&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;functional&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;algorithm&gt;</span>\n\n<span class=\"synPreProc\">#define REP(i,n) </span><span class=\"synStatement\">for</span><span class=\"synPreProc\">(</span><span class=\"synType\">int</span><span class=\"synPreProc\"> i;i&lt;(n);i++)</span>\n\n<span class=\"synStatement\">using</span> <span class=\"synType\">namespace</span> std;\n\n<span class=\"synType\">int</span> main() {\n    cin.tie(<span class=\"synConstant\">0</span>);\n    ios::sync_with_stdio(<span class=\"synConstant\">false</span>);\n\n    string a, ap, b, bp, g;\n    cin &gt;&gt; a &gt;&gt; ap &gt;&gt; g &gt;&gt; b &gt;&gt; bp &gt;&gt; g;\n    <span class=\"synStatement\">if</span> (ap.length() &gt; bp.length())\n        cout &lt;&lt; a;\n    <span class=\"synStatement\">else</span> <span class=\"synStatement\">if</span> (ap.length() &lt; bp.length())\n        cout &lt;&lt; b;\n    <span class=\"synStatement\">else</span> {\n        <span class=\"synStatement\">if</span> (ap &gt; bp)\n            cout &lt;&lt; a;\n        <span class=\"synStatement\">else</span> <span class=\"synStatement\">if</span> (ap &lt; bp)\n            cout &lt;&lt; b;\n        <span class=\"synStatement\">else</span>\n            cout &lt;&lt; -<span class=\"synConstant\">1</span>;\n    }\n    cout &lt;&lt; endl;\n\n    <span class=\"synStatement\">return</span> <span class=\"synConstant\">0</span>;\n}\n</pre>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>にもBigInt的なものはあるんですかね？あんまり<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>も詳しくないのでわかりませんが多分あるでしょう。どっちがはやいんだろうなー</p>\n<h2><a href=\"http://yukicoder.me/problems/476\">No.202 1円玉投げ - yukicoder</a></h2>\n<p>1円玉を1つずつ投げていって重なったら取り除く、を繰り返した時最後に何枚残っているか、という問題ですね。<br/>\n最初にとりあえず書いてみた解答がこちら。</p>\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;iostream&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;string&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;vector&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;functional&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;algorithm&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;cmath&gt;</span>\n\n<span class=\"synPreProc\">#define REP(i,n) </span><span class=\"synStatement\">for</span><span class=\"synPreProc\">(</span><span class=\"synType\">int</span><span class=\"synPreProc\"> i=</span><span class=\"synConstant\">0</span><span class=\"synPreProc\">;i&lt;(n);i++)</span>\n\n<span class=\"synStatement\">using</span> <span class=\"synType\">namespace</span> std;\n\n<span class=\"synType\">bool</span> is_on(pair&lt;<span class=\"synType\">int</span>,<span class=\"synType\">int</span>&gt; &amp;a, pair&lt;<span class=\"synType\">int</span>, <span class=\"synType\">int</span>&gt; &amp;b)\n{\n    <span class=\"synType\">double</span> dist = (a.first - b.first) * (a.first - b.first) + (a.second - b.second) * (a.second - b.second);\n    dist = sqrt(dist);\n    <span class=\"synStatement\">return</span> dist &lt; <span class=\"synConstant\">20</span>;\n}\n\n<span class=\"synType\">int</span> main() {\n    cin.tie(<span class=\"synConstant\">0</span>);\n    ios::sync_with_stdio(<span class=\"synConstant\">false</span>);\n\n    <span class=\"synType\">int</span> N;\n    cin &gt;&gt; N;\n    <span class=\"synType\">int</span> x, y;\n    cin &gt;&gt; x &gt;&gt; y;\n    N--;\n    vector&lt;pair&lt;<span class=\"synType\">int</span>, <span class=\"synType\">int</span>&gt; &gt; coins;\n    coins.emplace_back(x, y);\n\n    REP(i, N) {\n        cin &gt;&gt; x &gt;&gt; y;\n        <span class=\"synType\">auto</span> p = pair&lt;<span class=\"synType\">int</span>,<span class=\"synType\">int</span>&gt;(x, y);\n        <span class=\"synStatement\">if</span> (!any_of(coins.begin(), coins.end(), [&amp;p](pair&lt;<span class=\"synType\">int</span>, <span class=\"synType\">int</span>&gt; &amp;a) <span class=\"synError\">{</span> <span class=\"synStatement\">return</span> is_on(a, p); })) {\n            coins.push_back(move(p));\n        }\n    }\n    cout &lt;&lt; coins.size() &lt;&lt; endl;\n\n    <span class=\"synStatement\">return</span> <span class=\"synConstant\">0</span>;\n}\n</pre>\n<p>投げるたびに、今までのコイン達と重なっているかどうかをチェックし、どれとも重なっていなかった場合は追加する、というナイーブな実装です。これだと答えは合うのですが、TLEになってしまいました。<br/>\nはじめはx軸方向にソートして、x軸方向で20より離れていればチェックの必要がないので、チェックの必要がある部分を二分探索で求めるという方法を考えたのですが、なんかあんまりうまい方法に思えなくて詰まりまくりました。</p>\n<p>0 &lt;= x, y &lt;= 20000 というフィールドを 10 × 10 の細かいフィールドに区切ってチェックするという方法がスタンダードみたいですね！なるほど！ <br/>\nというわけで実装してみたのがこちら</p>\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;iostream&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;string&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;vector&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;functional&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;algorithm&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;cmath&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;array&gt;</span>\n\n<span class=\"synPreProc\">#define REP(i, n) </span><span class=\"synStatement\">for</span><span class=\"synPreProc\">(</span><span class=\"synType\">int</span><span class=\"synPreProc\"> i=</span><span class=\"synConstant\">0</span><span class=\"synPreProc\">;i&lt;(n);i++)</span>\n\n<span class=\"synStatement\">using</span> <span class=\"synType\">namespace</span> std;\n\n<span class=\"synType\">typedef</span> pair&lt;<span class=\"synType\">int</span>, <span class=\"synType\">int</span>&gt; P;\n\n<span class=\"synType\">const</span> <span class=\"synType\">int</span> MAX_N = <span class=\"synConstant\">100000</span>;\narray&lt;array&lt;vector&lt;P&gt;, <span class=\"synConstant\">2000</span>&gt;, <span class=\"synConstant\">20000</span> / <span class=\"synConstant\">10</span>&gt; fields;\n\n<span class=\"synType\">bool</span> is_on(pair&lt;<span class=\"synType\">int</span>, <span class=\"synType\">int</span>&gt; &amp;a, pair&lt;<span class=\"synType\">int</span>, <span class=\"synType\">int</span>&gt; &amp;b) {\n    <span class=\"synType\">double</span> dist = (a.first - b.first) * (a.first - b.first) + (a.second - b.second) * (a.second - b.second);\n    dist = sqrt(dist);\n    <span class=\"synStatement\">return</span> dist &lt; <span class=\"synConstant\">20</span>;\n}\n\n<span class=\"synType\">int</span> main() {\n    cin.tie(<span class=\"synConstant\">0</span>);\n    ios::sync_with_stdio(<span class=\"synConstant\">false</span>);\n\n    <span class=\"synType\">int</span> N;\n    cin &gt;&gt; N;\n    <span class=\"synType\">int</span> x, y;\n    cin &gt;&gt; x &gt;&gt; y;\n    N--;\n    fields[x / <span class=\"synConstant\">20</span>][y / <span class=\"synConstant\">20</span>].emplace_back(x, y);\n\n    <span class=\"synType\">int</span> ans = <span class=\"synConstant\">1</span>;\n\n    REP(k, N) {\n        cin &gt;&gt; x &gt;&gt; y;\n        P current(x, y);\n        <span class=\"synType\">int</span> fx = x / <span class=\"synConstant\">20</span>, fy = y / <span class=\"synConstant\">20</span>;\n        <span class=\"synType\">bool</span> flg = <span class=\"synConstant\">true</span>;\n        <span class=\"synStatement\">for</span> (<span class=\"synType\">int</span> i = -<span class=\"synConstant\">1</span>; i &lt;= <span class=\"synConstant\">1</span> &amp;&amp; flg; ++i) {\n            <span class=\"synStatement\">for</span> (<span class=\"synType\">int</span> j = -<span class=\"synConstant\">1</span>; j &lt;= <span class=\"synConstant\">1</span> &amp;&amp; flg; ++j) {\n                <span class=\"synStatement\">if</span> (fx + i &lt; <span class=\"synConstant\">0</span> || fx + i &gt;= <span class=\"synConstant\">2000</span> || fy + j &lt; <span class=\"synConstant\">0</span> || fy + j &gt;= <span class=\"synConstant\">2000</span>) <span class=\"synStatement\">continue</span>;\n                <span class=\"synStatement\">for</span> (<span class=\"synType\">auto</span> p: fields[fx + i][fy + j]) {\n                    <span class=\"synStatement\">if</span> (is_on(p, current)) {\n                        flg = <span class=\"synConstant\">false</span>;\n                        <span class=\"synStatement\">break</span>;\n                    }\n                }\n            }\n        }\n        <span class=\"synStatement\">if</span> (flg) {\n            fields[fx][fy].push_back(current);\n            ans++;\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; endl;\n\n    <span class=\"synStatement\">return</span> <span class=\"synConstant\">0</span>;\n}\n</pre>\n<p>10 × 10 のマスに区切って、コインが重なる可能性のある部分(つまり隣接するマス)についてのみチェックをするという実装です。<br/>\n今思ったのですが、10 × 10 のマスに区切ったらその中に存在できるコインの数って多分1子だけですよね？そしたら <code>array&lt; array&lt;P, 2000&gt;, 2000&gt;</code> でもよかったかもですね！(あ、でもそれだとコインが存在しないときの値がよくわからなくなるなーoption型とか欲しくなる)</p>\n<h1>まとめ</h1>\n<p>やっぱり出場したかったなーあのコンテストの感じがないと集中しきれないというかｗｗ<br/>\nコンテストだと出来ない時にすごく悔しくて次回への勉強のモチベーションがあがるんですよね！だから今後極力出場していこうと思います！</p>\n<p>学びとしては、きちんと問題の対象範囲をよく読むことと、検索の範囲を狭めることで解決できる問題の場合はフィールドをマス目状に区切る方法があるということですね！次回に活かします！</p>\n<hr>\n<hr>\n","meta":{"rawMarkdown":"---\ntitle: \"yukicoder 2015/05/03\"\ndate: 2015-05-04T09:38:47.000Z\ntags: []\n---\n\n<p>今週は土日共に予定があって<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/AtCoder\">AtCoder</a>さんもyukicoderさんも出場したかったのですが出来ず...</p>\n\n<h1><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/AtCoder\">AtCoder</a> - ARC</h1>\n\n<p>今週の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/AtCoder\">AtCoder</a>さんはABCはなかった？ぽくて, ARCに挑むにはまだちょっと力不足かなと思うので, 一旦保留します</p>\n\n<h1>yukicoder</h1>\n\n<p>というわけでyukicoderさんの方の最初の2問についてだけコンテスト後ですが挑戦してみましたー</p>\n\n<h2>　<a href=\"http://yukicoder.me/problems/436\">No.201 yukicoderじゃんけん - yukicoder</a></h2>\n\n<p>ゆるふわなじゃんけんですね。じゃんけんといいつつ、手は全く関係ないただの数値比較ですｗｗ<br/>\nただし、注意しなければならないのが数値の範囲です。<code>10 ^ 1000</code> までという非常に大きな数字を扱う必要があるので、単純に実装すると落ちます。<br/>\n今まであんまりこういった入力数値の範囲について注視していなかったのですが、今回ばっちりひっかかって落ちたので今度からはちゃんと見ないとダメですねｗｗ</p>\n\n<p>あ、あと今回は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>を使用してみましたー競技プログラミングとは別件で最近<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>をよく利用しているので、その流れでDから一旦変えてみましたー</p>\n\n<p>非常に大きな数値を扱う場合、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/ruby\">ruby</a>や<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/python\">python</a>であれば自動的に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/BigDecimal\">BigDecimal</a>のようなクラスを使用してくれるので素直に実装すればそのまま通ってしまいますが、今回は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>なので文字列として受け取って桁数を比較する方法で実装しました。</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;iostream&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;string&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;vector&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;functional&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;algorithm&gt;</span>\n\n<span class=\"synPreProc\">#define REP(i,n) </span><span class=\"synStatement\">for</span><span class=\"synPreProc\">(</span><span class=\"synType\">int</span><span class=\"synPreProc\"> i;i&lt;(n);i++)</span>\n\n<span class=\"synStatement\">using</span> <span class=\"synType\">namespace</span> std;\n\n<span class=\"synType\">int</span> main() {\n    cin.tie(<span class=\"synConstant\">0</span>);\n    ios::sync_with_stdio(<span class=\"synConstant\">false</span>);\n\n    string a, ap, b, bp, g;\n    cin &gt;&gt; a &gt;&gt; ap &gt;&gt; g &gt;&gt; b &gt;&gt; bp &gt;&gt; g;\n    <span class=\"synStatement\">if</span> (ap.length() &gt; bp.length())\n        cout &lt;&lt; a;\n    <span class=\"synStatement\">else</span> <span class=\"synStatement\">if</span> (ap.length() &lt; bp.length())\n        cout &lt;&lt; b;\n    <span class=\"synStatement\">else</span> {\n        <span class=\"synStatement\">if</span> (ap &gt; bp)\n            cout &lt;&lt; a;\n        <span class=\"synStatement\">else</span> <span class=\"synStatement\">if</span> (ap &lt; bp)\n            cout &lt;&lt; b;\n        <span class=\"synStatement\">else</span>\n            cout &lt;&lt; -<span class=\"synConstant\">1</span>;\n    }\n    cout &lt;&lt; endl;\n\n    <span class=\"synStatement\">return</span> <span class=\"synConstant\">0</span>;\n}\n</pre>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>にもBigInt的なものはあるんですかね？あんまり<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>も詳しくないのでわかりませんが多分あるでしょう。どっちがはやいんだろうなー</p>\n\n<h2><a href=\"http://yukicoder.me/problems/476\">No.202 1円玉投げ - yukicoder</a></h2>\n\n<p>1円玉を1つずつ投げていって重なったら取り除く、を繰り返した時最後に何枚残っているか、という問題ですね。<br/>\n最初にとりあえず書いてみた解答がこちら。</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;iostream&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;string&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;vector&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;functional&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;algorithm&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;cmath&gt;</span>\n\n<span class=\"synPreProc\">#define REP(i,n) </span><span class=\"synStatement\">for</span><span class=\"synPreProc\">(</span><span class=\"synType\">int</span><span class=\"synPreProc\"> i=</span><span class=\"synConstant\">0</span><span class=\"synPreProc\">;i&lt;(n);i++)</span>\n\n<span class=\"synStatement\">using</span> <span class=\"synType\">namespace</span> std;\n\n<span class=\"synType\">bool</span> is_on(pair&lt;<span class=\"synType\">int</span>,<span class=\"synType\">int</span>&gt; &amp;a, pair&lt;<span class=\"synType\">int</span>, <span class=\"synType\">int</span>&gt; &amp;b)\n{\n    <span class=\"synType\">double</span> dist = (a.first - b.first) * (a.first - b.first) + (a.second - b.second) * (a.second - b.second);\n    dist = sqrt(dist);\n    <span class=\"synStatement\">return</span> dist &lt; <span class=\"synConstant\">20</span>;\n}\n\n<span class=\"synType\">int</span> main() {\n    cin.tie(<span class=\"synConstant\">0</span>);\n    ios::sync_with_stdio(<span class=\"synConstant\">false</span>);\n\n    <span class=\"synType\">int</span> N;\n    cin &gt;&gt; N;\n    <span class=\"synType\">int</span> x, y;\n    cin &gt;&gt; x &gt;&gt; y;\n    N--;\n    vector&lt;pair&lt;<span class=\"synType\">int</span>, <span class=\"synType\">int</span>&gt; &gt; coins;\n    coins.emplace_back(x, y);\n\n    REP(i, N) {\n        cin &gt;&gt; x &gt;&gt; y;\n        <span class=\"synType\">auto</span> p = pair&lt;<span class=\"synType\">int</span>,<span class=\"synType\">int</span>&gt;(x, y);\n        <span class=\"synStatement\">if</span> (!any_of(coins.begin(), coins.end(), [&amp;p](pair&lt;<span class=\"synType\">int</span>, <span class=\"synType\">int</span>&gt; &amp;a) <span class=\"synError\">{</span> <span class=\"synStatement\">return</span> is_on(a, p); })) {\n            coins.push_back(move(p));\n        }\n    }\n    cout &lt;&lt; coins.size() &lt;&lt; endl;\n\n    <span class=\"synStatement\">return</span> <span class=\"synConstant\">0</span>;\n}\n</pre>\n\n<p>投げるたびに、今までのコイン達と重なっているかどうかをチェックし、どれとも重なっていなかった場合は追加する、というナイーブな実装です。これだと答えは合うのですが、TLEになってしまいました。<br/>\nはじめはx軸方向にソートして、x軸方向で20より離れていればチェックの必要がないので、チェックの必要がある部分を二分探索で求めるという方法を考えたのですが、なんかあんまりうまい方法に思えなくて詰まりまくりました。</p>\n\n<p>0 &lt;= x, y &lt;= 20000 というフィールドを 10 × 10 の細かいフィールドに区切ってチェックするという方法がスタンダードみたいですね！なるほど！ <br/>\nというわけで実装してみたのがこちら</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;iostream&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;string&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;vector&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;functional&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;algorithm&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;cmath&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;array&gt;</span>\n\n<span class=\"synPreProc\">#define REP(i, n) </span><span class=\"synStatement\">for</span><span class=\"synPreProc\">(</span><span class=\"synType\">int</span><span class=\"synPreProc\"> i=</span><span class=\"synConstant\">0</span><span class=\"synPreProc\">;i&lt;(n);i++)</span>\n\n<span class=\"synStatement\">using</span> <span class=\"synType\">namespace</span> std;\n\n<span class=\"synType\">typedef</span> pair&lt;<span class=\"synType\">int</span>, <span class=\"synType\">int</span>&gt; P;\n\n<span class=\"synType\">const</span> <span class=\"synType\">int</span> MAX_N = <span class=\"synConstant\">100000</span>;\narray&lt;array&lt;vector&lt;P&gt;, <span class=\"synConstant\">2000</span>&gt;, <span class=\"synConstant\">20000</span> / <span class=\"synConstant\">10</span>&gt; fields;\n\n<span class=\"synType\">bool</span> is_on(pair&lt;<span class=\"synType\">int</span>, <span class=\"synType\">int</span>&gt; &amp;a, pair&lt;<span class=\"synType\">int</span>, <span class=\"synType\">int</span>&gt; &amp;b) {\n    <span class=\"synType\">double</span> dist = (a.first - b.first) * (a.first - b.first) + (a.second - b.second) * (a.second - b.second);\n    dist = sqrt(dist);\n    <span class=\"synStatement\">return</span> dist &lt; <span class=\"synConstant\">20</span>;\n}\n\n<span class=\"synType\">int</span> main() {\n    cin.tie(<span class=\"synConstant\">0</span>);\n    ios::sync_with_stdio(<span class=\"synConstant\">false</span>);\n\n    <span class=\"synType\">int</span> N;\n    cin &gt;&gt; N;\n    <span class=\"synType\">int</span> x, y;\n    cin &gt;&gt; x &gt;&gt; y;\n    N--;\n    fields[x / <span class=\"synConstant\">20</span>][y / <span class=\"synConstant\">20</span>].emplace_back(x, y);\n\n    <span class=\"synType\">int</span> ans = <span class=\"synConstant\">1</span>;\n\n    REP(k, N) {\n        cin &gt;&gt; x &gt;&gt; y;\n        P current(x, y);\n        <span class=\"synType\">int</span> fx = x / <span class=\"synConstant\">20</span>, fy = y / <span class=\"synConstant\">20</span>;\n        <span class=\"synType\">bool</span> flg = <span class=\"synConstant\">true</span>;\n        <span class=\"synStatement\">for</span> (<span class=\"synType\">int</span> i = -<span class=\"synConstant\">1</span>; i &lt;= <span class=\"synConstant\">1</span> &amp;&amp; flg; ++i) {\n            <span class=\"synStatement\">for</span> (<span class=\"synType\">int</span> j = -<span class=\"synConstant\">1</span>; j &lt;= <span class=\"synConstant\">1</span> &amp;&amp; flg; ++j) {\n                <span class=\"synStatement\">if</span> (fx + i &lt; <span class=\"synConstant\">0</span> || fx + i &gt;= <span class=\"synConstant\">2000</span> || fy + j &lt; <span class=\"synConstant\">0</span> || fy + j &gt;= <span class=\"synConstant\">2000</span>) <span class=\"synStatement\">continue</span>;\n                <span class=\"synStatement\">for</span> (<span class=\"synType\">auto</span> p: fields[fx + i][fy + j]) {\n                    <span class=\"synStatement\">if</span> (is_on(p, current)) {\n                        flg = <span class=\"synConstant\">false</span>;\n                        <span class=\"synStatement\">break</span>;\n                    }\n                }\n            }\n        }\n        <span class=\"synStatement\">if</span> (flg) {\n            fields[fx][fy].push_back(current);\n            ans++;\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; endl;\n\n    <span class=\"synStatement\">return</span> <span class=\"synConstant\">0</span>;\n}\n</pre>\n\n<p>10 × 10 のマスに区切って、コインが重なる可能性のある部分(つまり隣接するマス)についてのみチェックをするという実装です。<br/>\n今思ったのですが、10 × 10 のマスに区切ったらその中に存在できるコインの数って多分1子だけですよね？そしたら <code>array&lt; array&lt;P, 2000&gt;, 2000&gt;</code> でもよかったかもですね！(あ、でもそれだとコインが存在しないときの値がよくわからなくなるなーoption型とか欲しくなる)</p>\n\n<h1>まとめ</h1>\n\n<p>やっぱり出場したかったなーあのコンテストの感じがないと集中しきれないというかｗｗ<br/>\nコンテストだと出来ない時にすごく悔しくて次回への勉強のモチベーションがあがるんですよね！だから今後極力出場していこうと思います！</p>\n\n<p>学びとしては、きちんと問題の対象範囲をよく読むことと、検索の範囲を狭めることで解決できる問題の場合はフィールドをマス目状に区切る方法があるということですね！次回に活かします！</p>\n\n---\n\n---\n","contentMarkdown":"\n<p>今週は土日共に予定があって<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/AtCoder\">AtCoder</a>さんもyukicoderさんも出場したかったのですが出来ず...</p>\n\n<h1><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/AtCoder\">AtCoder</a> - ARC</h1>\n\n<p>今週の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/AtCoder\">AtCoder</a>さんはABCはなかった？ぽくて, ARCに挑むにはまだちょっと力不足かなと思うので, 一旦保留します</p>\n\n<h1>yukicoder</h1>\n\n<p>というわけでyukicoderさんの方の最初の2問についてだけコンテスト後ですが挑戦してみましたー</p>\n\n<h2>　<a href=\"http://yukicoder.me/problems/436\">No.201 yukicoderじゃんけん - yukicoder</a></h2>\n\n<p>ゆるふわなじゃんけんですね。じゃんけんといいつつ、手は全く関係ないただの数値比較ですｗｗ<br/>\nただし、注意しなければならないのが数値の範囲です。<code>10 ^ 1000</code> までという非常に大きな数字を扱う必要があるので、単純に実装すると落ちます。<br/>\n今まであんまりこういった入力数値の範囲について注視していなかったのですが、今回ばっちりひっかかって落ちたので今度からはちゃんと見ないとダメですねｗｗ</p>\n\n<p>あ、あと今回は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>を使用してみましたー競技プログラミングとは別件で最近<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>をよく利用しているので、その流れでDから一旦変えてみましたー</p>\n\n<p>非常に大きな数値を扱う場合、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/ruby\">ruby</a>や<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/python\">python</a>であれば自動的に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/BigDecimal\">BigDecimal</a>のようなクラスを使用してくれるので素直に実装すればそのまま通ってしまいますが、今回は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>なので文字列として受け取って桁数を比較する方法で実装しました。</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;iostream&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;string&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;vector&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;functional&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;algorithm&gt;</span>\n\n<span class=\"synPreProc\">#define REP(i,n) </span><span class=\"synStatement\">for</span><span class=\"synPreProc\">(</span><span class=\"synType\">int</span><span class=\"synPreProc\"> i;i&lt;(n);i++)</span>\n\n<span class=\"synStatement\">using</span> <span class=\"synType\">namespace</span> std;\n\n<span class=\"synType\">int</span> main() {\n    cin.tie(<span class=\"synConstant\">0</span>);\n    ios::sync_with_stdio(<span class=\"synConstant\">false</span>);\n\n    string a, ap, b, bp, g;\n    cin &gt;&gt; a &gt;&gt; ap &gt;&gt; g &gt;&gt; b &gt;&gt; bp &gt;&gt; g;\n    <span class=\"synStatement\">if</span> (ap.length() &gt; bp.length())\n        cout &lt;&lt; a;\n    <span class=\"synStatement\">else</span> <span class=\"synStatement\">if</span> (ap.length() &lt; bp.length())\n        cout &lt;&lt; b;\n    <span class=\"synStatement\">else</span> {\n        <span class=\"synStatement\">if</span> (ap &gt; bp)\n            cout &lt;&lt; a;\n        <span class=\"synStatement\">else</span> <span class=\"synStatement\">if</span> (ap &lt; bp)\n            cout &lt;&lt; b;\n        <span class=\"synStatement\">else</span>\n            cout &lt;&lt; -<span class=\"synConstant\">1</span>;\n    }\n    cout &lt;&lt; endl;\n\n    <span class=\"synStatement\">return</span> <span class=\"synConstant\">0</span>;\n}\n</pre>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>にもBigInt的なものはあるんですかね？あんまり<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>も詳しくないのでわかりませんが多分あるでしょう。どっちがはやいんだろうなー</p>\n\n<h2><a href=\"http://yukicoder.me/problems/476\">No.202 1円玉投げ - yukicoder</a></h2>\n\n<p>1円玉を1つずつ投げていって重なったら取り除く、を繰り返した時最後に何枚残っているか、という問題ですね。<br/>\n最初にとりあえず書いてみた解答がこちら。</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;iostream&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;string&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;vector&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;functional&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;algorithm&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;cmath&gt;</span>\n\n<span class=\"synPreProc\">#define REP(i,n) </span><span class=\"synStatement\">for</span><span class=\"synPreProc\">(</span><span class=\"synType\">int</span><span class=\"synPreProc\"> i=</span><span class=\"synConstant\">0</span><span class=\"synPreProc\">;i&lt;(n);i++)</span>\n\n<span class=\"synStatement\">using</span> <span class=\"synType\">namespace</span> std;\n\n<span class=\"synType\">bool</span> is_on(pair&lt;<span class=\"synType\">int</span>,<span class=\"synType\">int</span>&gt; &amp;a, pair&lt;<span class=\"synType\">int</span>, <span class=\"synType\">int</span>&gt; &amp;b)\n{\n    <span class=\"synType\">double</span> dist = (a.first - b.first) * (a.first - b.first) + (a.second - b.second) * (a.second - b.second);\n    dist = sqrt(dist);\n    <span class=\"synStatement\">return</span> dist &lt; <span class=\"synConstant\">20</span>;\n}\n\n<span class=\"synType\">int</span> main() {\n    cin.tie(<span class=\"synConstant\">0</span>);\n    ios::sync_with_stdio(<span class=\"synConstant\">false</span>);\n\n    <span class=\"synType\">int</span> N;\n    cin &gt;&gt; N;\n    <span class=\"synType\">int</span> x, y;\n    cin &gt;&gt; x &gt;&gt; y;\n    N--;\n    vector&lt;pair&lt;<span class=\"synType\">int</span>, <span class=\"synType\">int</span>&gt; &gt; coins;\n    coins.emplace_back(x, y);\n\n    REP(i, N) {\n        cin &gt;&gt; x &gt;&gt; y;\n        <span class=\"synType\">auto</span> p = pair&lt;<span class=\"synType\">int</span>,<span class=\"synType\">int</span>&gt;(x, y);\n        <span class=\"synStatement\">if</span> (!any_of(coins.begin(), coins.end(), [&amp;p](pair&lt;<span class=\"synType\">int</span>, <span class=\"synType\">int</span>&gt; &amp;a) <span class=\"synError\">{</span> <span class=\"synStatement\">return</span> is_on(a, p); })) {\n            coins.push_back(move(p));\n        }\n    }\n    cout &lt;&lt; coins.size() &lt;&lt; endl;\n\n    <span class=\"synStatement\">return</span> <span class=\"synConstant\">0</span>;\n}\n</pre>\n\n<p>投げるたびに、今までのコイン達と重なっているかどうかをチェックし、どれとも重なっていなかった場合は追加する、というナイーブな実装です。これだと答えは合うのですが、TLEになってしまいました。<br/>\nはじめはx軸方向にソートして、x軸方向で20より離れていればチェックの必要がないので、チェックの必要がある部分を二分探索で求めるという方法を考えたのですが、なんかあんまりうまい方法に思えなくて詰まりまくりました。</p>\n\n<p>0 &lt;= x, y &lt;= 20000 というフィールドを 10 × 10 の細かいフィールドに区切ってチェックするという方法がスタンダードみたいですね！なるほど！ <br/>\nというわけで実装してみたのがこちら</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink><span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;iostream&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;string&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;vector&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;functional&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;algorithm&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;cmath&gt;</span>\n<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;array&gt;</span>\n\n<span class=\"synPreProc\">#define REP(i, n) </span><span class=\"synStatement\">for</span><span class=\"synPreProc\">(</span><span class=\"synType\">int</span><span class=\"synPreProc\"> i=</span><span class=\"synConstant\">0</span><span class=\"synPreProc\">;i&lt;(n);i++)</span>\n\n<span class=\"synStatement\">using</span> <span class=\"synType\">namespace</span> std;\n\n<span class=\"synType\">typedef</span> pair&lt;<span class=\"synType\">int</span>, <span class=\"synType\">int</span>&gt; P;\n\n<span class=\"synType\">const</span> <span class=\"synType\">int</span> MAX_N = <span class=\"synConstant\">100000</span>;\narray&lt;array&lt;vector&lt;P&gt;, <span class=\"synConstant\">2000</span>&gt;, <span class=\"synConstant\">20000</span> / <span class=\"synConstant\">10</span>&gt; fields;\n\n<span class=\"synType\">bool</span> is_on(pair&lt;<span class=\"synType\">int</span>, <span class=\"synType\">int</span>&gt; &amp;a, pair&lt;<span class=\"synType\">int</span>, <span class=\"synType\">int</span>&gt; &amp;b) {\n    <span class=\"synType\">double</span> dist = (a.first - b.first) * (a.first - b.first) + (a.second - b.second) * (a.second - b.second);\n    dist = sqrt(dist);\n    <span class=\"synStatement\">return</span> dist &lt; <span class=\"synConstant\">20</span>;\n}\n\n<span class=\"synType\">int</span> main() {\n    cin.tie(<span class=\"synConstant\">0</span>);\n    ios::sync_with_stdio(<span class=\"synConstant\">false</span>);\n\n    <span class=\"synType\">int</span> N;\n    cin &gt;&gt; N;\n    <span class=\"synType\">int</span> x, y;\n    cin &gt;&gt; x &gt;&gt; y;\n    N--;\n    fields[x / <span class=\"synConstant\">20</span>][y / <span class=\"synConstant\">20</span>].emplace_back(x, y);\n\n    <span class=\"synType\">int</span> ans = <span class=\"synConstant\">1</span>;\n\n    REP(k, N) {\n        cin &gt;&gt; x &gt;&gt; y;\n        P current(x, y);\n        <span class=\"synType\">int</span> fx = x / <span class=\"synConstant\">20</span>, fy = y / <span class=\"synConstant\">20</span>;\n        <span class=\"synType\">bool</span> flg = <span class=\"synConstant\">true</span>;\n        <span class=\"synStatement\">for</span> (<span class=\"synType\">int</span> i = -<span class=\"synConstant\">1</span>; i &lt;= <span class=\"synConstant\">1</span> &amp;&amp; flg; ++i) {\n            <span class=\"synStatement\">for</span> (<span class=\"synType\">int</span> j = -<span class=\"synConstant\">1</span>; j &lt;= <span class=\"synConstant\">1</span> &amp;&amp; flg; ++j) {\n                <span class=\"synStatement\">if</span> (fx + i &lt; <span class=\"synConstant\">0</span> || fx + i &gt;= <span class=\"synConstant\">2000</span> || fy + j &lt; <span class=\"synConstant\">0</span> || fy + j &gt;= <span class=\"synConstant\">2000</span>) <span class=\"synStatement\">continue</span>;\n                <span class=\"synStatement\">for</span> (<span class=\"synType\">auto</span> p: fields[fx + i][fy + j]) {\n                    <span class=\"synStatement\">if</span> (is_on(p, current)) {\n                        flg = <span class=\"synConstant\">false</span>;\n                        <span class=\"synStatement\">break</span>;\n                    }\n                }\n            }\n        }\n        <span class=\"synStatement\">if</span> (flg) {\n            fields[fx][fy].push_back(current);\n            ans++;\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; endl;\n\n    <span class=\"synStatement\">return</span> <span class=\"synConstant\">0</span>;\n}\n</pre>\n\n<p>10 × 10 のマスに区切って、コインが重なる可能性のある部分(つまり隣接するマス)についてのみチェックをするという実装です。<br/>\n今思ったのですが、10 × 10 のマスに区切ったらその中に存在できるコインの数って多分1子だけですよね？そしたら <code>array&lt; array&lt;P, 2000&gt;, 2000&gt;</code> でもよかったかもですね！(あ、でもそれだとコインが存在しないときの値がよくわからなくなるなーoption型とか欲しくなる)</p>\n\n<h1>まとめ</h1>\n\n<p>やっぱり出場したかったなーあのコンテストの感じがないと集中しきれないというかｗｗ<br/>\nコンテストだと出来ない時にすごく悔しくて次回への勉強のモチベーションがあがるんですよね！だから今後極力出場していこうと思います！</p>\n\n<p>学びとしては、きちんと問題の対象範囲をよく読むことと、検索の範囲を狭めることで解決できる問題の場合はフィールドをマス目状に区切る方法があるということですね！次回に活かします！</p>\n\n---\n\n---\n","slug":"yukicoder_2015_05_03","title":"yukicoder 2015/05/03","timestamp":1430732327000,"tags":[]}}},"__N_SSG":true}