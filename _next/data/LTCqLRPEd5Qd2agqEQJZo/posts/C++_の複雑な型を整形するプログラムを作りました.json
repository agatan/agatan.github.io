{"pageProps":{"post":{"content":"<p>テンプレートをバリバリ使っている <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> プログラムの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>エラーが，死ぬほど辛かったので作りました．\n型を綺麗に出力するだけです．\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>の型版 <code>jq</code> みたいなやつありそうだけど無いのかな？</p>\n<p><a href=\"https://github.com/agatan/tf\">agatan/tf</a></p>\n<p>たとえば，</p>\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink>boost::spirit::x3::raw_directive&lt;boost::spirit::x3::lexeme_directive&lt;boost::spirit::x3::sequence&lt;boost::spirit::x3::alternative&lt;boost::spirit::x3::char_class&lt;boost::spirit::char_encoding::standard, boost::spirit::x3::alpha_tag&gt;, boost::spirit::x3::literal_char&lt;boost::spirit::char_encoding::standard, boost::spirit::x3::unused_type&gt; &gt;, boost::spirit::x3::kleene&lt;boost::spirit::x3::alternative&lt;boost::spirit::x3::char_class&lt;boost::spirit::char_encoding::standard, boost::spirit::x3::alnum_tag&gt;, boost::spirit::x3::literal_char&lt;boost::spirit::char_encoding::standard, boost::spirit::x3::unused_type&gt; &gt; &gt; &gt; &gt; &gt;::parse&lt;__gnu_cxx::__normal_iterator&lt;<span class=\"synType\">const</span> <span class=\"synType\">char</span> *, std::__cxx11::basic_string&lt;<span class=\"synType\">char</span>&gt; &gt;, boost::spirit::x3::context&lt;boost::spirit::x3::error_handler_tag, <span class=\"synType\">const</span> std::reference_wrapper&lt;boost::spirit::x3::error_handler&lt;__gnu_cxx::__normal_iterator&lt;<span class=\"synType\">const</span> <span class=\"synType\">char</span> *, std::__cxx11::basic_string&lt;<span class=\"synType\">char</span>&gt; &gt; &gt; &gt;, boost::spirit::x3::context&lt;boost::spirit::x3::skipper_tag, <span class=\"synType\">const</span> boost::spirit::x3::char_class&lt;boost::spirit::char_encoding::ascii, boost::spirit::x3::space_tag&gt;, boost::spirit::x3::unused_type&gt; &gt;, std::__cxx11::basic_string&lt;<span class=\"synType\">char</span>&gt;, <span class=\"synType\">char</span>&gt;\n</pre>\n<p>こんなエラーがよく有りますよね．</p>\n<p>これを <code>tf</code> の標準入力に流しこむと，</p>\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink>boost::spirit::x3::raw_directive&lt;\n    boost::spirit::x3::lexeme_directive&lt;\n        boost::spirit::x3::sequence&lt;\n            boost::spirit::x3::alternative&lt;\n                boost::spirit::x3::char_class&lt;\n                    boost::spirit::char_encoding::standard,\n                    boost::spirit::x3::alpha_tag\n                &gt;,\n                boost::spirit::x3::literal_char&lt;\n                    boost::spirit::char_encoding::standard,\n                    boost::spirit::x3::unused_type\n                &gt;\n            &gt;,\n            boost::spirit::x3::kleene&lt;\n                boost::spirit::x3::alternative&lt;\n                    boost::spirit::x3::char_class&lt;\n                        boost::spirit::char_encoding::standard,\n                        boost::spirit::x3::alnum_tag\n                    &gt;,\n                    boost::spirit::x3::literal_char&lt;\n                        boost::spirit::char_encoding::standard,\n                        boost::spirit::x3::unused_type\n                    &gt;\n                &gt;\n            &gt;\n        &gt;\n    &gt;\n&gt;::parse&lt;\n    __gnu_cxx::__normal_iterator&lt;\n        constchar*,\n        std::__cxx11::basic_string&lt;\n            <span class=\"synType\">char</span>\n        &gt;\n    &gt;,\n    boost::spirit::x3::context&lt;\n        boost::spirit::x3::error_handler_tag,\n        conststd::reference_wrapper&lt;\n            boost::spirit::x3::error_handler&lt;\n                __gnu_cxx::__normal_iterator&lt;\n                    constchar*,\n                    std::__cxx11::basic_string&lt;\n                        <span class=\"synType\">char</span>\n                    &gt;\n                &gt;\n            &gt;\n        &gt;,\n        boost::spirit::x3::context&lt;\n            boost::spirit::x3::skipper_tag,\n            constboost::spirit::x3::char_class&lt;\n                boost::spirit::char_encoding::ascii,\n                boost::spirit::x3::space_tag\n            &gt;,\n            boost::spirit::x3::unused_type\n        &gt;\n    &gt;,\n    std::__cxx11::basic_string&lt;\n        <span class=\"synType\">char</span>\n    &gt;,\n    <span class=\"synType\">char</span>\n&gt;\n</pre>\n<p>こうなります．</p>\n<p>単純に <code>&lt;</code>, <code>&gt;</code>, <code>,</code> を見てインデントを調整しながら出力しているだけです．\n空白はスキップします．</p>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>とかは全くしていないので，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>エラーをそのまま流し込んでも悲惨な事になります．\n<del>あと今気がついたのですが，<code>const hoge</code> が <code>consthoge</code> になっていますね．</del>\n修正しました</p>\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink>boost::spirit::x3::raw_directive&lt;\n    boost::spirit::x3::lexeme_directive&lt;\n        boost::spirit::x3::sequence&lt;\n            boost::spirit::x3::alternative&lt;\n                boost::spirit::x3::char_class&lt;\n                    boost::spirit::char_encoding::standard,\n                    boost::spirit::x3::alpha_tag\n                &gt;,\n                boost::spirit::x3::literal_char&lt;\n                    boost::spirit::char_encoding::standard,\n                    boost::spirit::x3::unused_type\n                &gt;\n            &gt;,\n            boost::spirit::x3::kleene&lt;\n                boost::spirit::x3::alternative&lt;\n                    boost::spirit::x3::char_class&lt;\n                        boost::spirit::char_encoding::standard,\n                        boost::spirit::x3::alnum_tag\n                    &gt;,\n                    boost::spirit::x3::literal_char&lt;\n                        boost::spirit::char_encoding::standard,\n                        boost::spirit::x3::unused_type\n                    &gt;\n                &gt;\n            &gt;\n        &gt;\n    &gt;\n&gt;::parse&lt;\n    __gnu_cxx::__normal_iterator&lt;\n        <span class=\"synType\">const</span> <span class=\"synType\">char</span> *,\n        std::__cxx11::basic_string&lt;\n            <span class=\"synType\">char</span>\n        &gt;\n    &gt;,\n    boost::spirit::x3::context&lt;\n        boost::spirit::x3::error_handler_tag,\n        <span class=\"synType\">const</span> std::reference_wrapper&lt;\n            boost::spirit::x3::error_handler&lt;\n                __gnu_cxx::__normal_iterator&lt;\n                    <span class=\"synType\">const</span> <span class=\"synType\">char</span> *,\n                    std::__cxx11::basic_string&lt;\n                        <span class=\"synType\">char</span>\n                    &gt;\n                &gt;\n            &gt;\n        &gt;,\n        boost::spirit::x3::context&lt;\n            boost::spirit::x3::skipper_tag,\n            <span class=\"synType\">const</span> boost::spirit::x3::char_class&lt;\n                boost::spirit::char_encoding::ascii,\n                boost::spirit::x3::space_tag\n            &gt;,\n            boost::spirit::x3::unused_type\n        &gt;\n    &gt;,\n    std::__cxx11::basic_string&lt;\n        <span class=\"synType\">char</span>\n    &gt;,\n    <span class=\"synType\">char</span>\n&gt;\n</pre>\n<hr>\n<hr>\n","meta":{"rawMarkdown":"---\ntitle: \"C++ の複雑な型を整形するプログラムを作りました\"\ndate: 2016-03-08T11:55:10.000Z\ntags: []\n---\n\n<p>テンプレートをバリバリ使っている <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> プログラムの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>エラーが，死ぬほど辛かったので作りました．\n型を綺麗に出力するだけです．\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>の型版 <code>jq</code> みたいなやつありそうだけど無いのかな？</p>\n\n<p><a href=\"https://github.com/agatan/tf\">agatan/tf</a></p>\n\n<p>たとえば，</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink>boost::spirit::x3::raw_directive&lt;boost::spirit::x3::lexeme_directive&lt;boost::spirit::x3::sequence&lt;boost::spirit::x3::alternative&lt;boost::spirit::x3::char_class&lt;boost::spirit::char_encoding::standard, boost::spirit::x3::alpha_tag&gt;, boost::spirit::x3::literal_char&lt;boost::spirit::char_encoding::standard, boost::spirit::x3::unused_type&gt; &gt;, boost::spirit::x3::kleene&lt;boost::spirit::x3::alternative&lt;boost::spirit::x3::char_class&lt;boost::spirit::char_encoding::standard, boost::spirit::x3::alnum_tag&gt;, boost::spirit::x3::literal_char&lt;boost::spirit::char_encoding::standard, boost::spirit::x3::unused_type&gt; &gt; &gt; &gt; &gt; &gt;::parse&lt;__gnu_cxx::__normal_iterator&lt;<span class=\"synType\">const</span> <span class=\"synType\">char</span> *, std::__cxx11::basic_string&lt;<span class=\"synType\">char</span>&gt; &gt;, boost::spirit::x3::context&lt;boost::spirit::x3::error_handler_tag, <span class=\"synType\">const</span> std::reference_wrapper&lt;boost::spirit::x3::error_handler&lt;__gnu_cxx::__normal_iterator&lt;<span class=\"synType\">const</span> <span class=\"synType\">char</span> *, std::__cxx11::basic_string&lt;<span class=\"synType\">char</span>&gt; &gt; &gt; &gt;, boost::spirit::x3::context&lt;boost::spirit::x3::skipper_tag, <span class=\"synType\">const</span> boost::spirit::x3::char_class&lt;boost::spirit::char_encoding::ascii, boost::spirit::x3::space_tag&gt;, boost::spirit::x3::unused_type&gt; &gt;, std::__cxx11::basic_string&lt;<span class=\"synType\">char</span>&gt;, <span class=\"synType\">char</span>&gt;\n</pre>\n\n<p>こんなエラーがよく有りますよね．</p>\n\n<p>これを <code>tf</code> の標準入力に流しこむと，</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink>boost::spirit::x3::raw_directive&lt;\n    boost::spirit::x3::lexeme_directive&lt;\n        boost::spirit::x3::sequence&lt;\n            boost::spirit::x3::alternative&lt;\n                boost::spirit::x3::char_class&lt;\n                    boost::spirit::char_encoding::standard,\n                    boost::spirit::x3::alpha_tag\n                &gt;,\n                boost::spirit::x3::literal_char&lt;\n                    boost::spirit::char_encoding::standard,\n                    boost::spirit::x3::unused_type\n                &gt;\n            &gt;,\n            boost::spirit::x3::kleene&lt;\n                boost::spirit::x3::alternative&lt;\n                    boost::spirit::x3::char_class&lt;\n                        boost::spirit::char_encoding::standard,\n                        boost::spirit::x3::alnum_tag\n                    &gt;,\n                    boost::spirit::x3::literal_char&lt;\n                        boost::spirit::char_encoding::standard,\n                        boost::spirit::x3::unused_type\n                    &gt;\n                &gt;\n            &gt;\n        &gt;\n    &gt;\n&gt;::parse&lt;\n    __gnu_cxx::__normal_iterator&lt;\n        constchar*,\n        std::__cxx11::basic_string&lt;\n            <span class=\"synType\">char</span>\n        &gt;\n    &gt;,\n    boost::spirit::x3::context&lt;\n        boost::spirit::x3::error_handler_tag,\n        conststd::reference_wrapper&lt;\n            boost::spirit::x3::error_handler&lt;\n                __gnu_cxx::__normal_iterator&lt;\n                    constchar*,\n                    std::__cxx11::basic_string&lt;\n                        <span class=\"synType\">char</span>\n                    &gt;\n                &gt;\n            &gt;\n        &gt;,\n        boost::spirit::x3::context&lt;\n            boost::spirit::x3::skipper_tag,\n            constboost::spirit::x3::char_class&lt;\n                boost::spirit::char_encoding::ascii,\n                boost::spirit::x3::space_tag\n            &gt;,\n            boost::spirit::x3::unused_type\n        &gt;\n    &gt;,\n    std::__cxx11::basic_string&lt;\n        <span class=\"synType\">char</span>\n    &gt;,\n    <span class=\"synType\">char</span>\n&gt;\n</pre>\n\n<p>こうなります．</p>\n\n<p>単純に <code>&lt;</code>, <code>&gt;</code>, <code>,</code> を見てインデントを調整しながら出力しているだけです．\n空白はスキップします．</p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>とかは全くしていないので，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>エラーをそのまま流し込んでも悲惨な事になります．\n<del>あと今気がついたのですが，<code>const hoge</code> が <code>consthoge</code> になっていますね．</del>\n修正しました</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink>boost::spirit::x3::raw_directive&lt;\n    boost::spirit::x3::lexeme_directive&lt;\n        boost::spirit::x3::sequence&lt;\n            boost::spirit::x3::alternative&lt;\n                boost::spirit::x3::char_class&lt;\n                    boost::spirit::char_encoding::standard,\n                    boost::spirit::x3::alpha_tag\n                &gt;,\n                boost::spirit::x3::literal_char&lt;\n                    boost::spirit::char_encoding::standard,\n                    boost::spirit::x3::unused_type\n                &gt;\n            &gt;,\n            boost::spirit::x3::kleene&lt;\n                boost::spirit::x3::alternative&lt;\n                    boost::spirit::x3::char_class&lt;\n                        boost::spirit::char_encoding::standard,\n                        boost::spirit::x3::alnum_tag\n                    &gt;,\n                    boost::spirit::x3::literal_char&lt;\n                        boost::spirit::char_encoding::standard,\n                        boost::spirit::x3::unused_type\n                    &gt;\n                &gt;\n            &gt;\n        &gt;\n    &gt;\n&gt;::parse&lt;\n    __gnu_cxx::__normal_iterator&lt;\n        <span class=\"synType\">const</span> <span class=\"synType\">char</span> *,\n        std::__cxx11::basic_string&lt;\n            <span class=\"synType\">char</span>\n        &gt;\n    &gt;,\n    boost::spirit::x3::context&lt;\n        boost::spirit::x3::error_handler_tag,\n        <span class=\"synType\">const</span> std::reference_wrapper&lt;\n            boost::spirit::x3::error_handler&lt;\n                __gnu_cxx::__normal_iterator&lt;\n                    <span class=\"synType\">const</span> <span class=\"synType\">char</span> *,\n                    std::__cxx11::basic_string&lt;\n                        <span class=\"synType\">char</span>\n                    &gt;\n                &gt;\n            &gt;\n        &gt;,\n        boost::spirit::x3::context&lt;\n            boost::spirit::x3::skipper_tag,\n            <span class=\"synType\">const</span> boost::spirit::x3::char_class&lt;\n                boost::spirit::char_encoding::ascii,\n                boost::spirit::x3::space_tag\n            &gt;,\n            boost::spirit::x3::unused_type\n        &gt;\n    &gt;,\n    std::__cxx11::basic_string&lt;\n        <span class=\"synType\">char</span>\n    &gt;,\n    <span class=\"synType\">char</span>\n&gt;\n</pre>\n\n---\n\n---\n","contentMarkdown":"\n<p>テンプレートをバリバリ使っている <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a> プログラムの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>エラーが，死ぬほど辛かったので作りました．\n型を綺麗に出力するだけです．\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>の型版 <code>jq</code> みたいなやつありそうだけど無いのかな？</p>\n\n<p><a href=\"https://github.com/agatan/tf\">agatan/tf</a></p>\n\n<p>たとえば，</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink>boost::spirit::x3::raw_directive&lt;boost::spirit::x3::lexeme_directive&lt;boost::spirit::x3::sequence&lt;boost::spirit::x3::alternative&lt;boost::spirit::x3::char_class&lt;boost::spirit::char_encoding::standard, boost::spirit::x3::alpha_tag&gt;, boost::spirit::x3::literal_char&lt;boost::spirit::char_encoding::standard, boost::spirit::x3::unused_type&gt; &gt;, boost::spirit::x3::kleene&lt;boost::spirit::x3::alternative&lt;boost::spirit::x3::char_class&lt;boost::spirit::char_encoding::standard, boost::spirit::x3::alnum_tag&gt;, boost::spirit::x3::literal_char&lt;boost::spirit::char_encoding::standard, boost::spirit::x3::unused_type&gt; &gt; &gt; &gt; &gt; &gt;::parse&lt;__gnu_cxx::__normal_iterator&lt;<span class=\"synType\">const</span> <span class=\"synType\">char</span> *, std::__cxx11::basic_string&lt;<span class=\"synType\">char</span>&gt; &gt;, boost::spirit::x3::context&lt;boost::spirit::x3::error_handler_tag, <span class=\"synType\">const</span> std::reference_wrapper&lt;boost::spirit::x3::error_handler&lt;__gnu_cxx::__normal_iterator&lt;<span class=\"synType\">const</span> <span class=\"synType\">char</span> *, std::__cxx11::basic_string&lt;<span class=\"synType\">char</span>&gt; &gt; &gt; &gt;, boost::spirit::x3::context&lt;boost::spirit::x3::skipper_tag, <span class=\"synType\">const</span> boost::spirit::x3::char_class&lt;boost::spirit::char_encoding::ascii, boost::spirit::x3::space_tag&gt;, boost::spirit::x3::unused_type&gt; &gt;, std::__cxx11::basic_string&lt;<span class=\"synType\">char</span>&gt;, <span class=\"synType\">char</span>&gt;\n</pre>\n\n<p>こんなエラーがよく有りますよね．</p>\n\n<p>これを <code>tf</code> の標準入力に流しこむと，</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink>boost::spirit::x3::raw_directive&lt;\n    boost::spirit::x3::lexeme_directive&lt;\n        boost::spirit::x3::sequence&lt;\n            boost::spirit::x3::alternative&lt;\n                boost::spirit::x3::char_class&lt;\n                    boost::spirit::char_encoding::standard,\n                    boost::spirit::x3::alpha_tag\n                &gt;,\n                boost::spirit::x3::literal_char&lt;\n                    boost::spirit::char_encoding::standard,\n                    boost::spirit::x3::unused_type\n                &gt;\n            &gt;,\n            boost::spirit::x3::kleene&lt;\n                boost::spirit::x3::alternative&lt;\n                    boost::spirit::x3::char_class&lt;\n                        boost::spirit::char_encoding::standard,\n                        boost::spirit::x3::alnum_tag\n                    &gt;,\n                    boost::spirit::x3::literal_char&lt;\n                        boost::spirit::char_encoding::standard,\n                        boost::spirit::x3::unused_type\n                    &gt;\n                &gt;\n            &gt;\n        &gt;\n    &gt;\n&gt;::parse&lt;\n    __gnu_cxx::__normal_iterator&lt;\n        constchar*,\n        std::__cxx11::basic_string&lt;\n            <span class=\"synType\">char</span>\n        &gt;\n    &gt;,\n    boost::spirit::x3::context&lt;\n        boost::spirit::x3::error_handler_tag,\n        conststd::reference_wrapper&lt;\n            boost::spirit::x3::error_handler&lt;\n                __gnu_cxx::__normal_iterator&lt;\n                    constchar*,\n                    std::__cxx11::basic_string&lt;\n                        <span class=\"synType\">char</span>\n                    &gt;\n                &gt;\n            &gt;\n        &gt;,\n        boost::spirit::x3::context&lt;\n            boost::spirit::x3::skipper_tag,\n            constboost::spirit::x3::char_class&lt;\n                boost::spirit::char_encoding::ascii,\n                boost::spirit::x3::space_tag\n            &gt;,\n            boost::spirit::x3::unused_type\n        &gt;\n    &gt;,\n    std::__cxx11::basic_string&lt;\n        <span class=\"synType\">char</span>\n    &gt;,\n    <span class=\"synType\">char</span>\n&gt;\n</pre>\n\n<p>こうなります．</p>\n\n<p>単純に <code>&lt;</code>, <code>&gt;</code>, <code>,</code> を見てインデントを調整しながら出力しているだけです．\n空白はスキップします．</p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF\">構文解析</a>とかは全くしていないので，<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>エラーをそのまま流し込んでも悲惨な事になります．\n<del>あと今気がついたのですが，<code>const hoge</code> が <code>consthoge</code> になっていますね．</del>\n修正しました</p>\n\n<pre class=\"code lang-cpp\" data-lang=\"cpp\" data-unlink>boost::spirit::x3::raw_directive&lt;\n    boost::spirit::x3::lexeme_directive&lt;\n        boost::spirit::x3::sequence&lt;\n            boost::spirit::x3::alternative&lt;\n                boost::spirit::x3::char_class&lt;\n                    boost::spirit::char_encoding::standard,\n                    boost::spirit::x3::alpha_tag\n                &gt;,\n                boost::spirit::x3::literal_char&lt;\n                    boost::spirit::char_encoding::standard,\n                    boost::spirit::x3::unused_type\n                &gt;\n            &gt;,\n            boost::spirit::x3::kleene&lt;\n                boost::spirit::x3::alternative&lt;\n                    boost::spirit::x3::char_class&lt;\n                        boost::spirit::char_encoding::standard,\n                        boost::spirit::x3::alnum_tag\n                    &gt;,\n                    boost::spirit::x3::literal_char&lt;\n                        boost::spirit::char_encoding::standard,\n                        boost::spirit::x3::unused_type\n                    &gt;\n                &gt;\n            &gt;\n        &gt;\n    &gt;\n&gt;::parse&lt;\n    __gnu_cxx::__normal_iterator&lt;\n        <span class=\"synType\">const</span> <span class=\"synType\">char</span> *,\n        std::__cxx11::basic_string&lt;\n            <span class=\"synType\">char</span>\n        &gt;\n    &gt;,\n    boost::spirit::x3::context&lt;\n        boost::spirit::x3::error_handler_tag,\n        <span class=\"synType\">const</span> std::reference_wrapper&lt;\n            boost::spirit::x3::error_handler&lt;\n                __gnu_cxx::__normal_iterator&lt;\n                    <span class=\"synType\">const</span> <span class=\"synType\">char</span> *,\n                    std::__cxx11::basic_string&lt;\n                        <span class=\"synType\">char</span>\n                    &gt;\n                &gt;\n            &gt;\n        &gt;,\n        boost::spirit::x3::context&lt;\n            boost::spirit::x3::skipper_tag,\n            <span class=\"synType\">const</span> boost::spirit::x3::char_class&lt;\n                boost::spirit::char_encoding::ascii,\n                boost::spirit::x3::space_tag\n            &gt;,\n            boost::spirit::x3::unused_type\n        &gt;\n    &gt;,\n    std::__cxx11::basic_string&lt;\n        <span class=\"synType\">char</span>\n    &gt;,\n    <span class=\"synType\">char</span>\n&gt;\n</pre>\n\n---\n\n---\n","slug":"C++_の複雑な型を整形するプログラムを作りました","title":"C++ の複雑な型を整形するプログラムを作りました","timestamp":1457438110000,"tags":[]}}},"__N_SSG":true}